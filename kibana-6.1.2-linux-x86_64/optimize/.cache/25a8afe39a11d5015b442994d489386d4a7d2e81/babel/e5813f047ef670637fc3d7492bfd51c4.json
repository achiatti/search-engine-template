{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/agg_type.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/agg_type.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesAggTypeProvider = AggTypesAggTypeProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_params = require('ui/agg_types/agg_params');\n\nvar _field_formats = require('ui/registry/field_formats');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesAggTypeProvider(Private) {\n  var AggParams = Private(_agg_params.AggTypesAggParamsProvider);\n  var fieldFormats = Private(_field_formats.RegistryFieldFormatsProvider);\n\n  /**\n   * Generic AggType Constructor\n   *\n   * Used to create the values exposed by the agg_types module.\n   *\n   * @class AggType\n   * @private\n   * @param {object} config - used to set the properties of the AggType\n   */\n  function AggType(config) {\n\n    /**\n     * the unique, unchanging, name that we have assigned this aggType\n     *\n     * @property name\n     * @type {string}\n     */\n    this.name = config.name;\n\n    /**\n     * the name of the elasticsearch aggregation that this aggType represents. Usually just this.name\n     *\n     * @property name\n     * @type {string}\n     */\n    this.dslName = config.dslName || config.name;\n\n    /**\n     * the user friendly name that will be shown in the ui for this aggType\n     *\n     * @property title\n     * @type {string}\n     */\n    this.title = config.title;\n\n    /**\n     * a function that will be called when this aggType is assigned to\n     * an aggConfig, and that aggConfig is being rendered (in a form, chart, etc.).\n     *\n     * @method makeLabel\n     * @param {AggConfig} aggConfig - an agg config of this type\n     * @returns {string} - label that can be used in the ui to descripe the aggConfig\n     */\n    this.makeLabel = config.makeLabel || _lodash2.default.constant(this.name);\n\n    /**\n     * Describes if this aggType creates data that is ordered, and if that ordered data\n     * is some sort of time series.\n     *\n     * If the aggType does not create ordered data, set this to something \"falsey\".\n     *\n     * If this does create orderedData, then the value should be an object.\n     *\n     * If the orderdata is some sort of time series, `this.ordered` should be an object\n     * with the property `date: true`\n     *\n     * @property ordered\n     * @type {object|undefined}\n     */\n    this.ordered = config.ordered;\n\n    /**\n     * Flag that prevents this aggregation from being included in the dsl. This is only\n     * used by the count aggregation (currently) since it doesn't really exist and it's output\n     * is available on every bucket.\n     *\n     * @type {Boolean}\n     */\n    this.hasNoDsl = !!config.hasNoDsl;\n\n    /**\n     * The method to create a filter representation of the bucket\n     * @param {object} aggConfig The instance of the aggConfig\n     * @param {mixed} key The key for the bucket\n     * @returns {object} The filter\n     */\n    this.createFilter = config.createFilter;\n\n    /**\n     * An instance of {{#crossLink \"AggParams\"}}{{/crossLink}}.\n     *\n     * @property params\n     * @type {AggParams}\n     */\n    this.params = config.params || [];\n    if (!(this.params instanceof AggParams)) {\n      // always append the raw JSON param\n      this.params.push({\n        name: 'json',\n        type: 'json',\n        advanced: true\n      });\n      // always append custom label\n\n      if (config.customLabels !== false) {\n        this.params.push({\n          name: 'customLabel',\n          type: 'string',\n          write: _lodash2.default.noop\n        });\n      }\n\n      this.params = new AggParams(this.params);\n    }\n\n    /**\n     * Designed for multi-value metric aggs, this method can return a\n     * set of AggConfigs that should replace this aggConfig in requests\n     *\n     * @method getRequestAggs\n     * @returns {array[AggConfig]|undefined} - an array of aggConfig objects\n     *                                         that should replace this one,\n     *                                         or undefined\n     */\n    this.getRequestAggs = config.getRequestAggs || _lodash2.default.noop;\n\n    /**\n     * Designed for multi-value metric aggs, this method can return a\n     * set of AggConfigs that should replace this aggConfig in result sets\n     * that walk the AggConfig set.\n     *\n     * @method getResponseAggs\n     * @returns {array[AggConfig]|undefined} - an array of aggConfig objects\n     *                                         that should replace this one,\n     *                                         or undefined\n     */\n    this.getResponseAggs = config.getResponseAggs || _lodash2.default.noop;\n\n    /**\n     * A function that will be called each time an aggConfig of this type\n     * is created, giving the agg type a chance to modify the agg config\n     */\n    this.decorateAggConfig = config.decorateAggConfig || null;\n\n    if (config.getFormat) {\n      this.getFormat = config.getFormat;\n    }\n  }\n\n  /**\n   * Pick a format for the values produced by this agg type,\n   * overriden by several metrics that always output a simple\n   * number\n   *\n   * @param  {agg} agg - the agg to pick a format for\n   * @return {FieldFromat}\n   */\n  AggType.prototype.getFormat = function (agg) {\n    var field = agg.getField();\n    return field ? field.format : fieldFormats.getDefaultInstance('string');\n  };\n\n  return AggType;\n}",null]}