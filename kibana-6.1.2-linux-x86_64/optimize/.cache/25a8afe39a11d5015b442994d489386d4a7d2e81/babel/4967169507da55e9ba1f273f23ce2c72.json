{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/tabify/_get_columns.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/tabify/_get_columns.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggResponseGetColumnsProvider = AggResponseGetColumnsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_config = require('ui/vis/agg_config');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggResponseGetColumnsProvider(Private) {\n  var AggConfig = Private(_agg_config.VisAggConfigProvider);\n\n  return function getColumns(vis, minimal) {\n    var aggs = vis.getAggConfig().getResponseAggs();\n\n    if (minimal == null) minimal = !vis.isHierarchical();\n\n    if (!vis.getAggConfig().bySchemaGroup.metrics) {\n      aggs.push(new AggConfig(vis, {\n        type: 'count',\n        schema: vis.type.schemas.metrics[0].name\n      }));\n    }\n\n    // pick the columns\n    if (minimal) {\n      return aggs.map(function (agg) {\n        return { aggConfig: agg };\n      });\n    }\n\n    // supposed to be bucket,...metrics,bucket,...metrics\n    var columns = [];\n\n    // seperate the metrics\n    var grouped = _lodash2.default.groupBy(aggs, function (agg) {\n      return agg.schema.group;\n    });\n\n    if (!grouped.buckets) {\n      // return just the metrics, in column format\n      return grouped.metrics.map(function (agg) {\n        return { aggConfig: agg };\n      });\n    }\n\n    // return the buckets, and after each place all of the metrics\n    grouped.buckets.forEach(function (agg) {\n      columns.push({ aggConfig: agg });\n      grouped.metrics.forEach(function (metric) {\n        columns.push({ aggConfig: metric });\n      });\n    });\n\n    return columns;\n  };\n}",null]}