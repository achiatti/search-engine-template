{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/notify/lib/_format_msg.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/notify/lib/_format_msg.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatMsg = formatMsg;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _format_es_msg = require('ui/notify/lib/_format_es_msg');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar has = _lodash2.default.has;\n\n/**\n * Formats the error message from an error object, extended elasticsearch\n * object or simple string; prepends optional second parameter to the message\n * @param  {Error|String} err\n * @param  {String} from - Prefix for message indicating source (optional)\n * @returns {string}\n */\nfunction formatMsg(err, from) {\n  var rtn = '';\n  if (from) {\n    rtn += from + ': ';\n  }\n\n  var esMsg = (0, _format_es_msg.formatESMsg)(err);\n\n  if (typeof err === 'string') {\n    rtn += err;\n  } else if (esMsg) {\n    rtn += esMsg;\n  } else if (err instanceof Error) {\n    rtn += formatMsg.describeError(err);\n  } else if (has(err, 'status') && has(err, 'data')) {\n    // is an Angular $http \"error object\"\n    if (err.status === -1) {\n      // status = -1 indicates that the request was failed to reach the server\n      rtn += 'An HTTP request has failed to connect. ' + 'Please check if the Kibana server is running and that your browser has a working connection, ' + 'or contact your system administrator.';\n    } else {\n      rtn += 'Error ' + err.status + ' ' + err.statusText + ': ' + err.data.message;\n    }\n  }\n\n  return rtn;\n}\n\nformatMsg.describeError = function (err) {\n  if (!err) return undefined;\n  if (err.body && err.body.message) return err.body.message;\n  if (err.message) return err.message;\n  return '' + err;\n};",null]}