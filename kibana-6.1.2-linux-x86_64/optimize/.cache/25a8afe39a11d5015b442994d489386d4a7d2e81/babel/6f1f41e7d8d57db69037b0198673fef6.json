{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/fancy_forms/kbn_form_controller.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/fancy_forms/kbn_form_controller.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.decorateFormController = decorateFormController;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction decorateFormController($delegate, $injector) {\n  var _$delegate = _slicedToArray($delegate, 1),\n      directive = _$delegate[0];\n\n  var FormController = directive.controller;\n\n  var KbnFormController = function (_FormController) {\n    _inherits(KbnFormController, _FormController);\n\n    function KbnFormController($scope, $element) {\n      var _ref;\n\n      _classCallCheck(this, KbnFormController);\n\n      for (var _len = arguments.length, superArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        superArgs[_key - 2] = arguments[_key];\n      }\n\n      var _this = _possibleConstructorReturn(this, (_ref = KbnFormController.__proto__ || Object.getPrototypeOf(KbnFormController)).call.apply(_ref, [this].concat(superArgs)));\n\n      var onSubmit = function onSubmit(event) {\n        _this._markInvalidTouched(event);\n      };\n\n      $element.on('submit', onSubmit);\n      $scope.$on('$destroy', function () {\n        $element.off('submit', onSubmit);\n      });\n      return _this;\n    }\n    // prevent inheriting FormController's static $inject property\n    // which is angular's cache of the DI arguments for a function\n\n\n    _createClass(KbnFormController, [{\n      key: 'errorCount',\n      value: function errorCount() {\n        return this._getInvalidModels().length;\n      }\n\n      // same as error count, but filters out untouched and pristine models\n\n    }, {\n      key: 'softErrorCount',\n      value: function softErrorCount() {\n        return this._getInvalidModels().filter(function (model) {\n          return model.$touched || model.$dirty;\n        }).length;\n      }\n    }, {\n      key: 'describeErrors',\n      value: function describeErrors() {\n        var count = this.softErrorCount();\n        return count + ' Error' + (count === 1 ? '' : 's');\n      }\n    }, {\n      key: '$setTouched',\n      value: function $setTouched() {\n        this._getInvalidModels().forEach(function (model) {\n          return model.$setTouched();\n        });\n      }\n    }, {\n      key: '_markInvalidTouched',\n      value: function _markInvalidTouched(event) {\n        if (this.errorCount()) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          this.$setTouched();\n        }\n      }\n    }, {\n      key: '_getInvalidModels',\n      value: function _getInvalidModels() {\n        return this.$$controls.reduce(function (acc, control) {\n          // recurse into sub-form\n          if (typeof control._getInvalidModels === 'function') {\n            return [].concat(_toConsumableArray(acc), _toConsumableArray(control._getInvalidModels()));\n          }\n\n          if (control.$invalid) {\n            return [].concat(_toConsumableArray(acc), [control]);\n          }\n\n          return acc;\n        }, []);\n      }\n    }]);\n\n    return KbnFormController;\n  }(FormController);\n\n  // replace controller with our wrapper\n\n\n  KbnFormController.$inject = ['$scope', '$element'];\n  directive.controller = [].concat(_toConsumableArray($injector.annotate(KbnFormController)), _toConsumableArray($injector.annotate(FormController)), [function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return new (Function.prototype.bind.apply(KbnFormController, [null].concat(args)))();\n  }]);\n\n  return $delegate;\n}",null]}