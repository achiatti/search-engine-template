{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/accessibility/kbn_accessible_click.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/accessibility/kbn_accessible_click.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _services = require('ui_framework/services');\n\nvar _modules = require('ui/modules');\n\n/**\n * Interactive elements must be able to receive focus.\n *\n * Ideally, this means using elements that are natively keyboard accessible (<a href=\"\">,\n * <input type=\"button\">, or <button>). Note that links should be used when navigating and buttons\n * should be used when performing an action on the page.\n *\n * If you need to use a <div>, <p>, or <a> without the href attribute, then you need to allow\n * them to receive focus and to respond to keyboard input. The workaround is to:\n *\n *   - Give the element tabindex=\"0\" so that it can receive keyboard focus.\n *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key\n *     is pressed while the element is focused. This is necessary because some browsers do not trigger\n *    onclick events for such elements when activated via the keyboard.\n *   - If the item is meant to function as a button, the onkeyup event handler should also detect the\n *     Spacebar in addition to the Enter key, and the element should be given role=\"button\".\n *\n * Apply this directive to any of these elements to automatically do the above.\n */\n\n_modules.uiModules.get('kibana').directive('kbnAccessibleClick', function () {\n  return {\n    restrict: 'A',\n    controller: function controller($element) {\n      $element.on('keydown', function (e) {\n        // Prevent a scroll from occurring if the user has hit space.\n        if (e.keyCode === _services.keyCodes.SPACE) {\n          e.preventDefault();\n        }\n      });\n    },\n    link: function link(scope, element, attrs) {\n      // The whole point of this directive is to hack in functionality that native buttons provide\n      // by default.\n      var elementType = element.prop('tagName');\n\n      if (elementType === 'BUTTON') {\n        throw new Error('kbnAccessibleClick doesn\\'t need to be used on a button.');\n      }\n\n      if (elementType === 'A' && attrs.href !== undefined) {\n        throw new Error('kbnAccessibleClick doesn\\'t need to be used on a link if it has a href attribute.');\n      }\n\n      // We're emulating a click action, so we should already have a regular click handler defined.\n      if (!attrs.ngClick) {\n        throw new Error('kbnAccessibleClick requires ng-click to be defined on its element.');\n      }\n\n      // If the developer hasn't already specified attributes required for accessibility, add them.\n      if (attrs.tabindex === undefined) {\n        element.attr('tabindex', '0');\n      }\n\n      if (attrs.role === undefined) {\n        element.attr('role', 'button');\n      }\n\n      element.on('keyup', function (e) {\n        // Support keyboard accessibility by emulating mouse click on ENTER or SPACE keypress.\n        if (_services.accessibleClickKeys[e.keyCode]) {\n          // Delegate to the click handler on the element (assumed to be ng-click).\n          element.click();\n        }\n      });\n    }\n  };\n});",null]}