{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_bar/lib/map_filter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_bar/lib/map_filter.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterBarLibMapFilterProvider = FilterBarLibMapFilterProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _generate_mapping_chain = require('./generate_mapping_chain');\n\nvar _map_match_all = require('./map_match_all');\n\nvar _map_phrase = require('./map_phrase');\n\nvar _map_phrases = require('./map_phrases');\n\nvar _map_range = require('./map_range');\n\nvar _map_exists = require('./map_exists');\n\nvar _map_missing = require('./map_missing');\n\nvar _map_query_string = require('./map_query_string');\n\nvar _map_geo_bounding_box = require('./map_geo_bounding_box');\n\nvar _map_geo_polygon = require('./map_geo_polygon');\n\nvar _map_default = require('./map_default');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction FilterBarLibMapFilterProvider(Promise, Private) {\n\n  var generateMappingChain = Private(_generate_mapping_chain.FilterBarLibGenerateMappingChainProvider);\n\n  /** Mappers **/\n\n  // Each mapper is a simple promise function that test if the mapper can\n  // handle the mapping or not. If it handles it then it will resolve with\n  // and object that has the key and value for the filter. Otherwise it will\n  // reject it with the original filter. We had to go down the promise interface\n  // because mapTerms and mapRange need access to the indexPatterns to format\n  // the values and that's only available through the field formatters.\n\n  // The mappers to apply. Each mapper will either return\n  // a result object with a key and value attribute or\n  // undefined. If undefined is return then the next\n  // mapper will get the opportunity to map the filter.\n  // To create a new mapper you just need to create a function\n  // that either handles the mapping operation or not\n  // and add it here. ProTip: These are executed in order listed\n  var mappers = [Private(_map_match_all.FilterBarLibMapMatchAllProvider), Private(_map_range.FilterBarLibMapRangeProvider), Private(_map_phrase.FilterBarLibMapPhraseProvider), Private(_map_phrases.FilterBarLibMapPhrasesProvider), Private(_map_exists.FilterBarLibMapExistsProvider), Private(_map_missing.FilterBarLibMapMissingProvider), Private(_map_query_string.FilterBarLibMapQueryStringProvider), Private(_map_geo_bounding_box.FilterBarLibMapGeoBoundingBoxProvider), Private(_map_geo_polygon.FilterBarLibMapGeoPolygonProvider), Private(_map_default.FilterBarLibMapDefaultProvider)];\n\n  var noop = function noop() {\n    return Promise.reject(new Error('No mappings have been found for filter.'));\n  };\n\n  // Create a chain of responsibility by reducing all the\n  // mappers down into one function.\n  var mapFn = _lodash2.default.reduceRight(mappers, function (memo, map) {\n    var filterChainFn = generateMappingChain(map);\n    return filterChainFn(memo);\n  }, noop);\n\n  /**\n   * Map the filter into an object with the key and value exposed so it's\n   * easier to work with in the template\n   * @param {object} filter The filter the map\n   * @returns {Promise}\n   */\n  return function (filter) {\n    // Apply the mapping function\n    return mapFn(filter).then(function (result) {\n      filter.meta = filter.meta || {};\n      filter.meta.type = result.type;\n      filter.meta.key = result.key;\n      filter.meta.value = result.value;\n      filter.meta.params = result.params;\n      filter.meta.disabled = !!filter.meta.disabled;\n      filter.meta.negate = !!filter.meta.negate;\n      filter.meta.alias = filter.meta.alias || null;\n      return filter;\n    });\n  };\n}",null]}