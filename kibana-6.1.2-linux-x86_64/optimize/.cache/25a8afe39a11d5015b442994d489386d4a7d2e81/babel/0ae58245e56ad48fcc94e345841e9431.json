{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/directives/kbn_chrome.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/directives/kbn_chrome.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.kbnChromeProvider = kbnChromeProvider;\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nrequire('./kbn_chrome.less');\n\nvar _modules = require('ui/modules');\n\nvar _system_api = require('ui/system_api');\n\nvar _state_hashing = require('ui/state_management/state_hashing');\n\nvar _notify = require('ui/notify');\n\nvar _sub_url_route_filter = require('./sub_url_route_filter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction kbnChromeProvider(chrome, internals) {\n\n  _modules.uiModules.get('kibana').directive('kbnChrome', function () {\n    return {\n      template: function template() {\n        var $content = (0, _jquery2.default)(require('./kbn_chrome.html'));\n        var $app = $content.find('.application');\n\n        if (internals.rootController) {\n          $app.attr('ng-controller', internals.rootController);\n        }\n\n        if (internals.rootTemplate) {\n          $app.removeAttr('ng-view');\n          $app.html(internals.rootTemplate);\n        }\n\n        return $content;\n      },\n\n\n      controllerAs: 'chrome',\n      controller: function controller($scope, $rootScope, $location, $http, Private) {\n        var getUnhashableStates = Private(_state_hashing.getUnhashableStatesProvider);\n\n        // are we showing the embedded version of the chrome?\n        if (Boolean($location.search().embed)) {\n          internals.permanentlyHideChrome();\n        }\n\n        var subUrlRouteFilter = Private(_sub_url_route_filter.SubUrlRouteFilterProvider);\n\n        function updateSubUrls() {\n          var urlWithHashes = window.location.href;\n          var urlWithStates = (0, _state_hashing.unhashUrl)(urlWithHashes, getUnhashableStates());\n          internals.trackPossibleSubUrl(urlWithStates);\n        }\n\n        function onRouteChange($event) {\n          if (subUrlRouteFilter($event)) {\n            updateSubUrls();\n          }\n        }\n\n        $rootScope.$on('$routeChangeSuccess', onRouteChange);\n        $rootScope.$on('$routeUpdate', onRouteChange);\n        updateSubUrls(); // initialize sub urls\n\n        var allPendingHttpRequests = function allPendingHttpRequests() {\n          return $http.pendingRequests;\n        };\n        var removeSystemApiRequests = function removeSystemApiRequests() {\n          var pendingHttpRequests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          return (0, _lodash.remove)(pendingHttpRequests, _system_api.isSystemApiRequest);\n        };\n        $scope.$watchCollection(allPendingHttpRequests, removeSystemApiRequests);\n\n        // and some local values\n        chrome.httpActive = $http.pendingRequests;\n        $scope.notifList = _notify.notify._notifs;\n\n        return chrome;\n      }\n    };\n  });\n}",null]}