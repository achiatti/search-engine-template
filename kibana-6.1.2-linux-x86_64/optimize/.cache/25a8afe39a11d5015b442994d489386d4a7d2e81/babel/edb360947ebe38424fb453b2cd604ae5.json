{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/step_index_pattern/append_wildcard.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/step_index_pattern/append_wildcard.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _append_wildcard = require('./lib/append_wildcard');\n\nvar _module = _modules.uiModules.get('apps/management');\n\n/**\n * This directive automatically appends a wildcard to the input field\n * after the user starts typing. It lets the user delete the wildcard\n * if necessary. If the value of the input field is set back to an empty\n * string, the wildcard is immediately re-appended after the user starts\n * typing. This is intended to be a UX improvement for the index pattern\n * creation page. See https://github.com/elastic/kibana/pull/13454\n */\n_module.directive('appendWildcard', function () {\n  return {\n    require: 'ngModel',\n    link: function link($scope, $elem, $attrs, $ctrl) {\n      $elem.on('keydown', function (e) {\n        var newIndexPattern = (0, _append_wildcard.appendWildcard)(e, $elem.val());\n        if (newIndexPattern) {\n          e.preventDefault();\n          $elem.val(newIndexPattern);\n          $elem[0].setSelectionRange(1, 1);\n          $ctrl.$setViewValue(newIndexPattern);\n        }\n      });\n    }\n  };\n});",null]}