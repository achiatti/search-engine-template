{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/grid/dashboard_grid.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/grid/dashboard_grid.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DashboardGrid = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _reactGridLayout = require('react-grid-layout');\n\nvar _reactGridLayout2 = _interopRequireDefault(_reactGridLayout);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _panel_utils = require('../panel/panel_utils');\n\nvar _dashboard_view_mode = require('../dashboard_view_mode');\n\nvar _panel = require('../panel');\n\nvar _dashboard_constants = require('../dashboard_constants');\n\nvar _reactSizeme = require('react-sizeme');\n\nvar _reactSizeme2 = _interopRequireDefault(_reactSizeme);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar config = { monitorWidth: true };\nvar lastValidGridSize = 0;\n\n/**\n * This is a fix for a bug that stopped the browser window from automatically scrolling down when panels were made\n * taller than the current grid.\n * see https://github.com/elastic/kibana/issues/14710.\n */\nfunction ensureWindowScrollsToBottom(layout, oldResizeItem, l, placeholder, event) {\n  // The buffer is to handle the case where the browser is maximized and it's impossible for the mouse to move below\n  // the screen, out of the window.  see https://github.com/elastic/kibana/issues/14737\n  var WINDOW_BUFFER = 10;\n  if (event.clientY > window.innerHeight - WINDOW_BUFFER) {\n    window.scrollTo(0, event.pageY + WINDOW_BUFFER - window.innerHeight);\n  }\n}\n\nfunction ResponsiveGrid(_ref) {\n  var size = _ref.size,\n      isViewMode = _ref.isViewMode,\n      layout = _ref.layout,\n      onLayoutChange = _ref.onLayoutChange,\n      children = _ref.children,\n      maximizedPanelId = _ref.maximizedPanelId,\n      useMargins = _ref.useMargins;\n\n  // This is to prevent a bug where view mode changes when the panel is expanded.  View mode changes will trigger\n  // the grid to re-render, but when a panel is expanded, the size will be 0. Minimizing the panel won't cause the\n  // grid to re-render so it'll show a grid with a width of 0.\n  lastValidGridSize = size.width > 0 ? size.width : lastValidGridSize;\n  var classes = (0, _classnames2.default)({\n    'layout-view': isViewMode,\n    'layout-edit': !isViewMode,\n    'layout-maximized-panel': maximizedPanelId !== undefined,\n    'layout-with-margins': useMargins\n  });\n\n  var MARGINS = useMargins ? 8 : 0;\n  // We can't take advantage of isDraggable or isResizable due to performance concerns:\n  // https://github.com/STRML/react-grid-layout/issues/240\n  return _react2.default.createElement(\n    _reactGridLayout2.default,\n    {\n      width: lastValidGridSize,\n      className: classes,\n      isDraggable: true,\n      isResizable: true,\n      margin: [MARGINS, MARGINS],\n      cols: _dashboard_constants.DASHBOARD_GRID_COLUMN_COUNT,\n      rowHeight: 100,\n      draggableHandle: isViewMode ? '.doesnt-exist' : '.panel-title',\n      layout: layout,\n      onLayoutChange: onLayoutChange,\n      measureBeforeMount: false,\n      onResize: ensureWindowScrollsToBottom\n    },\n    children\n  );\n}\n\n// Using sizeMe sets up the grid to be re-rendered automatically not only when the window size changes, but also\n// when the container size changes, so it works for Full Screen mode switches.\nvar ResponsiveSizedGrid = (0, _reactSizeme2.default)(config)(ResponsiveGrid);\n\nvar DashboardGrid = exports.DashboardGrid = function (_React$Component) {\n  _inherits(DashboardGrid, _React$Component);\n\n  function DashboardGrid(props) {\n    _classCallCheck(this, DashboardGrid);\n\n    // A mapping of panelIndexes to grid items so we can set the zIndex appropriately on the last focused\n    // item.\n    var _this = _possibleConstructorReturn(this, (DashboardGrid.__proto__ || Object.getPrototypeOf(DashboardGrid)).call(this, props));\n\n    _this.onLayoutChange = function (layout) {\n      var onPanelsUpdated = _this.props.onPanelsUpdated;\n\n      var updatedPanels = [];\n      layout.forEach(function (panelLayout) {\n        var updatedPanel = {\n          panelIndex: panelLayout.i,\n          gridData: {\n            x: panelLayout.x,\n            y: panelLayout.y,\n            w: panelLayout.w,\n            h: panelLayout.h,\n            i: panelLayout.i\n          }\n        };\n        updatedPanels.push(updatedPanel);\n      });\n      onPanelsUpdated(updatedPanels);\n    };\n\n    _this.onPanelFocused = function (panelIndex) {\n      var gridItem = _this.gridItems[panelIndex];\n      if (gridItem) {\n        gridItem.style.zIndex = '1';\n      }\n    };\n\n    _this.onPanelBlurred = function (panelIndex) {\n      var gridItem = _this.gridItems[panelIndex];\n      if (gridItem) {\n        gridItem.style.zIndex = 'auto';\n      }\n    };\n\n    _this.gridItems = {};\n    _this.state = {\n      layout: _this.buildLayoutFromPanels()\n    };\n    // A mapping of panel type to embeddable handlers. Because this function reaches out of react and into angular,\n    // if done in the render method, it appears to be triggering a scope.apply, which appears to be trigging a setState\n    // call inside TSVB visualizations.  Moving the function out of render appears to fix the issue.  See\n    // https://github.com/elastic/kibana/issues/14802 for more info.\n    // This is probably a better implementation anyway so the handlers are cached.\n    // @type {Object.<string, EmbeddableFactory>}\n    _this.embeddableFactoryMap = {};\n    return _this;\n  }\n\n  _createClass(DashboardGrid, [{\n    key: 'buildLayoutFromPanels',\n    value: function buildLayoutFromPanels() {\n      return _lodash2.default.map(this.props.panels, function (panel) {\n        if (!panel.version) {\n          _panel_utils.PanelUtils.convertOldPanelData(panel);\n        }\n        return panel.gridData;\n      });\n    }\n  }, {\n    key: 'createEmbeddableFactoriesMap',\n    value: function createEmbeddableFactoriesMap(panels) {\n      var _this2 = this;\n\n      Object.values(panels).map(function (panel) {\n        if (!_this2.embeddableFactoryMap[panel.type]) {\n          _this2.embeddableFactoryMap[panel.type] = _this2.props.getEmbeddableFactory(panel.type);\n        }\n      });\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.createEmbeddableFactoriesMap(this.props.panels);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.createEmbeddableFactoriesMap(nextProps.panels);\n    }\n  }, {\n    key: 'renderDOM',\n    value: function renderDOM() {\n      var _this3 = this;\n\n      var _props = this.props,\n          panels = _props.panels,\n          getContainerApi = _props.getContainerApi,\n          maximizedPanelId = _props.maximizedPanelId;\n\n      // Part of our unofficial API - need to render in a consistent order for plugins.\n\n      var panelsInOrder = Object.keys(panels).map(function (key) {\n        return panels[key];\n      });\n      panelsInOrder.sort(function (panelA, panelB) {\n        if (panelA.gridData.y === panelB.gridData.y) {\n          return panelA.gridData.x - panelB.gridData.x;\n        } else {\n          return panelA.gridData.y - panelB.gridData.y;\n        }\n      });\n\n      return _lodash2.default.map(panelsInOrder, function (panel) {\n        var expandPanel = maximizedPanelId !== undefined && maximizedPanelId === panel.panelIndex;\n        var hidePanel = maximizedPanelId !== undefined && maximizedPanelId !== panel.panelIndex;\n        var classes = (0, _classnames2.default)({\n          'grid-item--expanded': expandPanel,\n          'grid-item--hidden': hidePanel\n        });\n        return _react2.default.createElement(\n          'div',\n          {\n            className: classes,\n            key: panel.panelIndex,\n            ref: function ref(reactGridItem) {\n              _this3.gridItems[panel.panelIndex] = reactGridItem;\n            }\n          },\n          _react2.default.createElement(_panel.DashboardPanel, {\n            panelId: panel.panelIndex,\n            getContainerApi: getContainerApi,\n            embeddableFactory: _this3.embeddableFactoryMap[panel.type],\n            onPanelFocused: _this3.onPanelFocused,\n            onPanelBlurred: _this3.onPanelBlurred\n          })\n        );\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          dashboardViewMode = _props2.dashboardViewMode,\n          maximizedPanelId = _props2.maximizedPanelId,\n          useMargins = _props2.useMargins;\n\n      var isViewMode = dashboardViewMode === _dashboard_view_mode.DashboardViewMode.VIEW;\n      return _react2.default.createElement(\n        ResponsiveSizedGrid,\n        {\n          isViewMode: isViewMode,\n          layout: this.buildLayoutFromPanels(),\n          onLayoutChange: this.onLayoutChange,\n          maximizedPanelId: maximizedPanelId,\n          useMargins: useMargins\n        },\n        this.renderDOM()\n      );\n    }\n  }]);\n\n  return DashboardGrid;\n}(_react2.default.Component);\n\nDashboardGrid.propTypes = {\n  panels: _propTypes2.default.object.isRequired,\n  getContainerApi: _propTypes2.default.func.isRequired,\n  getEmbeddableFactory: _propTypes2.default.func.isRequired,\n  dashboardViewMode: _propTypes2.default.oneOf([_dashboard_view_mode.DashboardViewMode.EDIT, _dashboard_view_mode.DashboardViewMode.VIEW]).isRequired,\n  onPanelsUpdated: _propTypes2.default.func.isRequired,\n  maximizedPanelId: _propTypes2.default.string,\n  useMargins: _propTypes2.default.bool.isRequired\n};",null]}