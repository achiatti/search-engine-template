{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/agg_params.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/agg_params.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesAggParamsProvider = AggTypesAggParamsProvider;\n\nrequire('ui/filters/label');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _indexed_array = require('ui/indexed_array');\n\nvar _field = require('./param_types/field');\n\nvar _optioned = require('./param_types/optioned');\n\nvar _regex = require('./param_types/regex');\n\nvar _string = require('./param_types/string');\n\nvar _json = require('./param_types/json');\n\nvar _base = require('./param_types/base');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesAggParamsProvider(Private) {\n  var paramTypeMap = {\n    field: Private(_field.FieldParamTypeProvider),\n    optioned: Private(_optioned.OptionedParamTypeProvider),\n    regex: Private(_regex.RegexParamTypeProvider),\n    string: Private(_string.StringParamTypeProvider),\n    json: Private(_json.JsonParamTypeProvider),\n    _default: Private(_base.BaseParamTypeProvider)\n  };\n\n  /**\n   * Wraps a list of {{#crossLink \"AggParam\"}}{{/crossLink}} objects; owned by an {{#crossLink \"AggType\"}}{{/crossLink}}\n   *\n   * used to create:\n   *   - `FieldAggParam` – When the config has `name: \"field\"`\n   *   - `*AggParam` – When the type matches something in the map above\n   *   - `BaseAggParam` – All other params\n   *\n   * @class AggParams\n   * @constructor\n   * @extends IndexedArray\n   * @param {object[]} params - array of params that get new-ed up as AggParam objects as descibed above\n   */\n  _lodash2.default.class(AggParams).inherits(_indexed_array.IndexedArray);\n  function AggParams(params) {\n    AggParams.Super.call(this, {\n      index: ['name'],\n      initialSet: params.map(function (config) {\n        var type = config.name === 'field' ? config.name : config.type;\n        var Class = paramTypeMap[type] || paramTypeMap._default;\n        return new Class(config);\n      })\n    });\n  }\n\n  /**\n   * Reads an aggConfigs\n   *\n   * @method write\n   * @param  {AggConfig} aggConfig\n   *         the AggConfig object who's type owns these aggParams and contains the param values for our param defs\n   * @param  {object} [locals]\n   *         an array of locals that will be available to the write function (can be used to enhance\n   *         the quality of things like date_histogram's \"auto\" interval)\n   * @return {object} output\n   *         output of the write calls, reduced into a single object. A `params: {}` property is exposed on the\n   *         output object which is used to create the agg dsl for the search request. All other properties\n   *         are dependent on the AggParam#write methods which should be studied for each AggType.\n   */\n  AggParams.prototype.write = function (aggConfig, locals) {\n    var output = { params: {} };\n    locals = locals || {};\n\n    this.forEach(function (param) {\n      if (param.write) {\n        param.write(aggConfig, output, locals);\n      } else {\n        output.params[param.name] = aggConfig.params[param.name];\n      }\n    });\n\n    return output;\n  };\n\n  return AggParams;\n}",null]}