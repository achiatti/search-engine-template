{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/kb.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/kb.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUnmatchedEndpointComponents = getUnmatchedEndpointComponents;\nexports.getEndpointDescriptionByEndpoint = getEndpointDescriptionByEndpoint;\nexports.getEndpointBodyCompleteComponents = getEndpointBodyCompleteComponents;\nexports.getTopLevelUrlCompleteComponents = getTopLevelUrlCompleteComponents;\nexports.getGlobalAutocompleteComponents = getGlobalAutocompleteComponents;\nexports.setActiveApi = setActiveApi;\nvar $ = require('jquery');\nvar _ = require('lodash');\nvar mappings = require('./mappings');\nvar Api = require('./kb/api');\nvar autocomplete_engine = require('./autocomplete/engine');\n\nvar ACTIVE_API = new Api();\n\nfunction nonValidIndexType(token) {\n  return !(token === \"_all\" || token[0] !== \"_\");\n}\n\nfunction IndexAutocompleteComponent(name, parent, multi_valued) {\n  autocomplete_engine.ListComponent.call(this, name, mappings.getIndices, parent, multi_valued);\n}\n\nIndexAutocompleteComponent.prototype = _.create(autocomplete_engine.ListComponent.prototype, { 'constructor': IndexAutocompleteComponent });\n\n(function (cls) {\n  cls.validateTokens = function (tokens) {\n    if (!this.multi_valued && tokens.length > 1) {\n      return false;\n    }\n    return !_.find(tokens, nonValidIndexType);\n  };\n\n  cls.getDefaultTermMeta = function () {\n    return \"index\";\n  };\n\n  cls.getContextKey = function () {\n    return \"indices\";\n  };\n})(IndexAutocompleteComponent.prototype);\n\nfunction TypeGenerator(context) {\n  return mappings.getTypes(context.indices);\n}\n\nfunction TypeAutocompleteComponent(name, parent, multi_valued) {\n  autocomplete_engine.ListComponent.call(this, name, TypeGenerator, parent, multi_valued);\n}\n\nTypeAutocompleteComponent.prototype = _.create(autocomplete_engine.ListComponent.prototype, { 'constructor': TypeAutocompleteComponent });\n\n(function (cls) {\n  cls.validateTokens = function (tokens) {\n    if (!this.multi_valued && tokens.length > 1) {\n      return false;\n    }\n\n    return !_.find(tokens, nonValidIndexType);\n  };\n\n  cls.getDefaultTermMeta = function () {\n    return \"type\";\n  };\n\n  cls.getContextKey = function () {\n    return \"types\";\n  };\n})(TypeAutocompleteComponent.prototype);\n\nfunction FieldGenerator(context) {\n  return _.map(mappings.getFields(context.indices, context.types), function (field) {\n    return { name: field.name, meta: field.type };\n  });\n}\n\nfunction FieldAutocompleteComponent(name, parent, multi_valued) {\n  autocomplete_engine.ListComponent.call(this, name, FieldGenerator, parent, multi_valued);\n}\n\nFieldAutocompleteComponent.prototype = _.create(autocomplete_engine.ListComponent.prototype, { 'constructor': FieldAutocompleteComponent });\n\n(function (cls) {\n  cls.validateTokens = function (tokens) {\n    if (!this.multi_valued && tokens.length > 1) {\n      return false;\n    }\n\n    return !_.find(tokens, function (token) {\n      return token.match(/[^\\w.?*]/);\n    });\n  };\n\n  cls.getDefaultTermMeta = function () {\n    return \"field\";\n  };\n\n  cls.getContextKey = function () {\n    return \"fields\";\n  };\n})(FieldAutocompleteComponent.prototype);\n\nfunction IdAutocompleteComponent(name, parent, multi) {\n  autocomplete_engine.SharedComponent.call(this, name, parent);\n  this.multi_match = multi;\n}\n\nIdAutocompleteComponent.prototype = _.create(autocomplete_engine.SharedComponent.prototype, { 'constructor': IdAutocompleteComponent });\n\n(function (cls) {\n  cls.match = function (token, context, editor) {\n    if (!token) {\n      return null;\n    }\n    if (!this.multi_match && Array.isArray(token)) {\n      return null;\n    }\n    token = Array.isArray(token) ? token : [token];\n    if (_.find(token, function (t) {\n      return t.match(/[\\/,]/);\n    })) {\n      return null;\n    }\n    var r = Object.getPrototypeOf(cls).match.call(this, token, context, editor);\n    r.context_values = r.context_values || {};\n    r.context_values['id'] = token;\n    return r;\n  };\n})(IdAutocompleteComponent.prototype);\n\nvar parametrizedComponentFactories = {\n\n  'index': function index(name, parent) {\n    return new IndexAutocompleteComponent(name, parent, false);\n  },\n  'indices': function indices(name, parent) {\n    return new IndexAutocompleteComponent(name, parent, true);\n  },\n  'type': function type(name, parent) {\n    return new TypeAutocompleteComponent(name, parent, false);\n  },\n  'types': function types(name, parent) {\n    return new TypeAutocompleteComponent(name, parent, true);\n  },\n  'id': function id(name, parent) {\n    return new IdAutocompleteComponent(name, parent);\n  },\n  'ids': function ids(name, parent) {\n    return new IdAutocompleteComponent(name, parent, true);\n  },\n  'fields': function fields(name, parent) {\n    return new FieldAutocompleteComponent(name, parent, true);\n  },\n  'field': function field(name, parent) {\n    return new FieldAutocompleteComponent(name, parent, false);\n  },\n  'nodes': function nodes(name, parent) {\n    return new autocomplete_engine.ListComponent(name, [\"_local\", \"_master\", \"data:true\", \"data:false\", \"master:true\", \"master:false\"], parent);\n  },\n  'node': function node(name, parent) {\n    return new autocomplete_engine.ListComponent(name, [], parent, false);\n  }\n};\n\nfunction getUnmatchedEndpointComponents() {\n  return ACTIVE_API.getUnmatchedEndpointComponents();\n}\n\nfunction getEndpointDescriptionByEndpoint(endpoint) {\n  return ACTIVE_API.getEndpointDescriptionByEndpoint(endpoint);\n}\n\nfunction getEndpointBodyCompleteComponents(endpoint) {\n  var desc = getEndpointDescriptionByEndpoint(endpoint);\n  if (!desc) {\n    throw new Error(\"failed to resolve endpoint ['\" + endpoint + \"']\");\n  }\n  return desc.bodyAutocompleteRootComponents;\n}\n\nfunction getTopLevelUrlCompleteComponents() {\n  return ACTIVE_API.getTopLevelUrlCompleteComponents();\n}\n\nfunction getGlobalAutocompleteComponents(term, throwOnMissing) {\n  return ACTIVE_API.getGlobalAutocompleteComponents(term, throwOnMissing);\n}\n\nfunction loadApisFromJson(json, urlParametrizedComponentFactories, bodyParametrizedComponentFactories) {\n  urlParametrizedComponentFactories = urlParametrizedComponentFactories || parametrizedComponentFactories;\n  bodyParametrizedComponentFactories = bodyParametrizedComponentFactories || urlParametrizedComponentFactories;\n  var api = new Api(urlParametrizedComponentFactories, bodyParametrizedComponentFactories);\n  var names = [];\n  _.each(json, function (apiJson, name) {\n    names.unshift(name);\n    _.each(apiJson.globals || {}, function (globalJson, globalName) {\n      api.addGlobalAutocompleteRules(globalName, globalJson);\n    });\n    _.each(apiJson.endpoints || {}, function (endpointJson, endpointName) {\n      api.addEndpointDescription(endpointName, endpointJson);\n    });\n  });\n  api.name = names.join(\",\");\n  return api;\n}\n\nfunction setActiveApi(api) {\n  if (_.isString(api)) {\n    $.ajax({\n      url: '../api/console/api_server?sense_version=' + encodeURIComponent('@@SENSE_VERSION') + \"&apis=\" + encodeURIComponent(api),\n      dataType: \"json\" // disable automatic guessing\n    }).then(function (data) {\n      setActiveApi(loadApisFromJson(data));\n    }, function (jqXHR) {\n      console.log(\"failed to load API '\" + api + \"': \" + jqXHR.responseText);\n    });\n    return;\n  }\n  console.log(\"setting active api to [\" + api.name + \"]\");\n\n  ACTIVE_API = api;\n}\n\nsetActiveApi('es_5_0');\n\nvar _test = exports._test = {\n  loadApisFromJson: loadApisFromJson\n};",null]}