{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/saved_visualizations/_saved_vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/saved_visualizations/_saved_vis.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * @name SavedVis\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @extends SavedObject.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * NOTE: It's a type of SavedObject, but specific to visualizations.\n                                                                                                                                                                                                                                                                               */\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _vis = require('ui/vis');\n\nvar _modules = require('ui/modules');\n\nvar _vis_update_state = require('ui/vis/vis_update_state');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/visualize').factory('SavedVis', function (config, $injector, courier, Promise, savedSearches, Private) {\n  var Vis = Private(_vis.VisProvider);\n\n  _lodash2.default.class(SavedVis).inherits(courier.SavedObject);\n  function SavedVis(opts) {\n    var self = this;\n    opts = opts || {};\n    if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') opts = { id: opts };\n\n    SavedVis.Super.call(self, {\n      type: SavedVis.type,\n      mapping: SavedVis.mapping,\n      searchSource: SavedVis.searchSource,\n\n      id: opts.id,\n      indexPattern: opts.indexPattern,\n      defaults: {\n        title: 'New Visualization',\n        visState: function () {\n          if (!opts.type) return null;\n          var def = {};\n          def.type = opts.type;\n          return def;\n        }(),\n        uiStateJSON: '{}',\n        description: '',\n        savedSearchId: opts.savedSearchId,\n        version: 1\n      },\n\n      afterESResp: this._afterEsResp\n    });\n  }\n\n  SavedVis.type = 'visualization';\n\n  SavedVis.mapping = {\n    title: 'text',\n    visState: 'json',\n    uiStateJSON: 'text',\n    description: 'text',\n    savedSearchId: 'keyword',\n    version: 'integer'\n  };\n\n  // Order these fields to the top, the rest are alphabetical\n  SavedVis.fieldOrder = ['title', 'description'];\n\n  SavedVis.searchSource = true;\n\n  SavedVis.prototype._afterEsResp = function () {\n    var self = this;\n\n    return self._getLinkedSavedSearch().then(function () {\n      self.searchSource.size(0);\n\n      return self.vis ? self._updateVis() : self._createVis();\n    }).then(function () {\n      self.searchSource.onRequestStart(function (searchSource, searchRequest) {\n        return self.vis.onSearchRequestStart(searchSource, searchRequest);\n      });\n\n      self.searchSource.aggs(function () {\n        return self.vis.aggs.toDsl();\n      });\n\n      return self;\n    });\n  };\n\n  SavedVis.prototype._getLinkedSavedSearch = Promise.method(function () {\n    var self = this;\n    var linkedSearch = !!self.savedSearchId;\n    var current = self.savedSearch;\n\n    if (linkedSearch && current && current.id === self.savedSearchId) {\n      return;\n    }\n\n    if (self.savedSearch) {\n      self.searchSource.inherits(self.savedSearch.searchSource.getParent());\n      self.savedSearch.destroy();\n      self.savedSearch = null;\n    }\n\n    if (linkedSearch) {\n      return savedSearches.get(self.savedSearchId).then(function (savedSearch) {\n        self.savedSearch = savedSearch;\n        self.searchSource.inherits(self.savedSearch.searchSource);\n      });\n    }\n  });\n\n  SavedVis.prototype._createVis = function () {\n    var self = this;\n\n    self.visState = (0, _vis_update_state.updateOldState)(self.visState);\n\n    // visState doesn't yet exist when importing a visualization, so we can't\n    // assume that exists at this point. If it does exist, then we're not\n    // importing a visualization, so we want to sync the title.\n    if (self.visState) {\n      self.visState.title = self.title;\n    }\n    self.vis = new Vis(self.searchSource.get('index'), self.visState);\n\n    return self.vis;\n  };\n\n  SavedVis.prototype._updateVis = function () {\n    var self = this;\n\n    self.vis.indexPattern = self.searchSource.get('index');\n    self.visState.title = self.title;\n    self.vis.setState(self.visState);\n  };\n\n  return SavedVis;\n});",null]}