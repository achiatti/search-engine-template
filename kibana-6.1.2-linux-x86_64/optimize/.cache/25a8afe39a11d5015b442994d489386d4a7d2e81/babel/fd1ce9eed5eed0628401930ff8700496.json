{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/components/field_chooser/lib/field_calculator.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/components/field_chooser/lib/field_calculator.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldCalculator = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getFieldValues(hits, field) {\n  var name = field.name;\n  var flattenHit = field.indexPattern.flattenHit;\n  return _lodash2.default.map(hits, function (hit) {\n    return flattenHit(hit)[name];\n  });\n}\n\nfunction getFieldValueCounts(params) {\n  params = _lodash2.default.defaults(params, {\n    count: 5,\n    grouped: false\n  });\n\n  if (params.field.type === 'geo_point' || params.field.type === 'geo_shape' || params.field.type === 'attachment') {\n    return { error: 'Analysis is not available for geo fields.' };\n  }\n\n  var allValues = getFieldValues(params.hits, params.field);\n  var counts = void 0;\n  var missing = _countMissing(allValues);\n\n  try {\n    var groups = _groupValues(allValues, params);\n    counts = _lodash2.default.map(_lodash2.default.sortBy(groups, 'count').reverse().slice(0, params.count), function (bucket) {\n      return {\n        value: bucket.value,\n        count: bucket.count,\n        percent: (bucket.count / (params.hits.length - missing) * 100).toFixed(1)\n      };\n    });\n\n    if (params.hits.length - missing === 0) {\n      return {\n        error: 'This field is present in your elasticsearch mapping' + ' but not in any documents in the search results.' + ' You may still be able to visualize or search on it.'\n      };\n    }\n\n    return {\n      total: params.hits.length,\n      exists: params.hits.length - missing,\n      missing: missing,\n      buckets: counts\n    };\n  } catch (e) {\n    return { error: e.message };\n  }\n}\n\n// returns a count of fields in the array that are undefined or null\nfunction _countMissing(array) {\n  return array.length - _lodash2.default.without(array, undefined, null).length;\n}\n\nfunction _groupValues(allValues, params) {\n  var groups = {};\n  var k = void 0;\n\n  allValues.forEach(function (value) {\n    if (_lodash2.default.isObject(value) && !Array.isArray(value)) {\n      throw new Error('Analysis is not available for object fields');\n    }\n\n    if (Array.isArray(value) && !params.grouped) {\n      k = value;\n    } else {\n      k = value == null ? undefined : [value];\n    }\n\n    _lodash2.default.each(k, function (key) {\n      if (groups.hasOwnProperty(key)) {\n        groups[key].count++;\n      } else {\n        groups[key] = {\n          value: params.grouped ? value : key,\n          count: 1\n        };\n      }\n    });\n  });\n\n  return groups;\n}\n\nvar fieldCalculator = exports.fieldCalculator = {\n  _groupValues: _groupValues,\n  _countMissing: _countMissing,\n  getFieldValues: getFieldValues,\n  getFieldValueCounts: getFieldValueCounts\n};",null]}