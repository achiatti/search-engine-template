{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/vis_types/timeseries/vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/vis_types/timeseries/vis.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _tick_formatter = require('../../lib/tick_formatter');\n\nvar _tick_formatter2 = _interopRequireDefault(_tick_formatter);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _timeseries = require('plugins/metrics/visualizations/components/timeseries');\n\nvar _timeseries2 = _interopRequireDefault(_timeseries);\n\nvar _color = require('color');\n\nvar _color2 = _interopRequireDefault(_color);\n\nvar _replace_vars = require('../../lib/replace_vars');\n\nvar _replace_vars2 = _interopRequireDefault(_replace_vars);\n\nvar _get_axis_label_string = require('../../lib/get_axis_label_string');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction hasSeperateAxis(row) {\n  return row.seperate_axis;\n}\n\nfunction TimeseriesVisualization(props) {\n  var backgroundColor = props.backgroundColor,\n      model = props.model,\n      visData = props.visData;\n\n  var series = _lodash2.default.get(visData, model.id + '.series', []);\n  var annotations = void 0;\n  if (model.annotations && Array.isArray(model.annotations)) {\n    annotations = model.annotations.map(function (annotation) {\n      var data = _lodash2.default.get(visData, model.id + '.annotations.' + annotation.id, []).map(function (item) {\n        return [item.key, item.docs];\n      });\n      return {\n        id: annotation.id,\n        color: annotation.color,\n        icon: annotation.icon,\n        series: data.map(function (s) {\n          return [s[0], s[1].map(function (doc) {\n            return (0, _replace_vars2.default)(annotation.template, null, doc);\n          })];\n        })\n      };\n    });\n  }\n  var seriesModel = model.series.map(function (s) {\n    return _lodash2.default.cloneDeep(s);\n  });\n  var firstSeries = seriesModel.find(function (s) {\n    return s.formatter && !s.seperate_axis;\n  });\n  var formatter = (0, _tick_formatter2.default)(_lodash2.default.get(firstSeries, 'formatter'), _lodash2.default.get(firstSeries, 'value_template'));\n\n  var mainAxis = {\n    position: model.axis_position,\n    tickFormatter: formatter,\n    axisFormatter: _lodash2.default.get(firstSeries, 'formatter', 'number'),\n    axisFormatterTemplate: _lodash2.default.get(firstSeries, 'value_template')\n  };\n\n  if (model.axis_min) mainAxis.min = model.axis_min;\n  if (model.axis_max) mainAxis.max = model.axis_max;\n\n  var yaxes = [mainAxis];\n\n  seriesModel.forEach(function (s) {\n    series.filter(function (r) {\n      return _lodash2.default.startsWith(r.id, s.id);\n    }).forEach(function (r) {\n      return r.tickFormatter = (0, _tick_formatter2.default)(s.formatter, s.value_template);\n    });\n\n    if (s.hide_in_legend) {\n      series.filter(function (r) {\n        return _lodash2.default.startsWith(r.id, s.id);\n      }).forEach(function (r) {\n        return delete r.label;\n      });\n    }\n    if (s.stacked === 'percent') {\n      s.seperate_axis = true;\n      s.axisFormatter = 'percent';\n      s.axis_min = 0;\n      s.axis_max = 1;\n      s.axis_position = model.axis_position;\n      var seriesData = series.filter(function (r) {\n        return _lodash2.default.startsWith(r.id, s.id);\n      });\n      var first = seriesData[0];\n      if (first) {\n        first.data.forEach(function (row, index) {\n          var rowSum = seriesData.reduce(function (acc, item) {\n            return item.data[index][1] + acc;\n          }, 0);\n          seriesData.forEach(function (item) {\n            item.data[index][1] = rowSum && item.data[index][1] / rowSum || 0;\n          });\n        });\n      }\n    }\n  });\n\n  var interval = series.reduce(function (currentInterval, item) {\n    if (item.data.length > 1) {\n      var seriesInterval = item.data[1][0] - item.data[0][0];\n      if (!currentInterval || seriesInterval < currentInterval) return seriesInterval;\n    }\n    return currentInterval;\n  }, 0);\n\n  var axisCount = 1;\n  if (seriesModel.some(hasSeperateAxis)) {\n    seriesModel.forEach(function (row) {\n      if (row.seperate_axis) {\n        axisCount++;\n\n        var _formatter = (0, _tick_formatter2.default)(row.formatter, row.value_template);\n\n        var yaxis = {\n          alignTicksWithAxis: 1,\n          position: row.axis_position,\n          tickFormatter: _formatter,\n          axisFormatter: row.axis_formatter,\n          axisFormatterTemplate: row.value_template\n        };\n\n        if (row.axis_min != null) yaxis.min = row.axis_min;\n        if (row.axis_max != null) yaxis.max = row.axis_max;\n\n        yaxes.push(yaxis);\n\n        // Assign axis and formatter to each series\n        series.filter(function (r) {\n          return _lodash2.default.startsWith(r.id, row.id);\n        }).forEach(function (r) {\n          r.yaxis = axisCount;\n        });\n      }\n    });\n  }\n\n  var params = {\n    dateFormat: props.dateFormat,\n    crosshair: true,\n    tickFormatter: formatter,\n    legendPosition: model.legend_position || 'right',\n    series: series,\n    annotations: annotations,\n    yaxes: yaxes,\n    reversed: props.reversed,\n    showGrid: Boolean(model.show_grid),\n    legend: Boolean(model.show_legend),\n    onBrush: function onBrush(ranges) {\n      if (props.onBrush) props.onBrush(ranges);\n    }\n  };\n  if (interval) {\n    params.xaxisLabel = (0, _get_axis_label_string.getAxisLabelString)(interval);\n  }\n  var style = {};\n  var panelBackgroundColor = model.background_color || backgroundColor;\n  if (panelBackgroundColor) {\n    style.backgroundColor = panelBackgroundColor;\n    params.reversed = (0, _color2.default)(panelBackgroundColor || backgroundColor).luminosity() < 0.45;\n  }\n  return _react2.default.createElement(\n    'div',\n    { className: 'dashboard__visualization', style: style },\n    _react2.default.createElement(_timeseries2.default, params)\n  );\n}\n\nTimeseriesVisualization.propTypes = {\n  backgroundColor: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  model: _propTypes2.default.object,\n  onBrush: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  reversed: _propTypes2.default.bool,\n  visData: _propTypes2.default.object,\n  dateFormat: _propTypes2.default.string\n};\n\nexports.default = TimeseriesVisualization;\nmodule.exports = exports['default'];",null]}