{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/chart_grid.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/chart_grid.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibGridProvider = VislibGridProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VislibGridProvider() {\n\n  var defaults = {\n    style: {\n      color: '#eee'\n    },\n    categoryLines: false,\n    valueAxis: undefined\n  };\n\n  var ChartGrid = function () {\n    function ChartGrid(handler, gridConfig) {\n      _classCallCheck(this, ChartGrid);\n\n      if (!gridConfig) return;\n      this._handler = handler;\n      this._values = _lodash2.default.defaultsDeep({}, gridConfig, defaults);\n    }\n\n    _createClass(ChartGrid, [{\n      key: 'drawLine',\n      value: function drawLine(svg, tick, axis, width, height) {\n        var isHorizontal = axis.axisConfig.isHorizontal();\n        var scale = axis.getScale();\n        svg.append('path').attr('d', function () {\n          var x0 = isHorizontal ? tick : 0;\n          var x1 = isHorizontal ? tick : width;\n          var y0 = !isHorizontal ? tick : 0;\n          var y1 = !isHorizontal ? tick : height;\n          var d3Line = _d2.default.svg.line().x(function (d) {\n            return isHorizontal ? scale(d[0]) : d[0];\n          }).y(function (d) {\n            return !isHorizontal ? scale(d[1]) : d[1];\n          });\n          return d3Line([[x0, y0], [x1, y1]]);\n        }).attr('fill', 'none').attr('stroke', this.get('style.color')).attr('stroke-width', 1);\n      }\n    }, {\n      key: 'drawCategoryLines',\n      value: function drawCategoryLines(svg, width, height) {\n        var _this = this;\n\n        var axis = this._handler.categoryAxes[0];\n        if (!axis) return;\n        var ticks = axis.getScale().ticks;\n        if (!ticks) return;\n        ticks().forEach(function (tick) {\n          _this.drawLine(svg, tick, axis, width, height);\n        });\n      }\n    }, {\n      key: 'drawValueLines',\n      value: function drawValueLines(svg, width, height) {\n        var _this2 = this;\n\n        var axis = this._handler.valueAxes.find(function (axis) {\n          return axis.axisConfig.get('id') === _this2.get('valueAxis');\n        });\n        if (!axis) return;\n        var ticks = axis.getScale().ticks;\n        if (!ticks) return;\n        ticks().forEach(function (tick) {\n          _this2.drawLine(svg, tick, axis, width, height);\n        });\n      }\n    }, {\n      key: 'draw',\n      value: function draw(width, height) {\n        var self = this;\n        return function (selection) {\n          if (!self._values) return;\n          selection.each(function () {\n            if (self.get('categoryLines')) self.drawCategoryLines(_d2.default.select(this), width, height);\n            if (self.get('valueAxis', false)) self.drawValueLines(_d2.default.select(this), width, height);\n          });\n        };\n      }\n    }, {\n      key: 'get',\n      value: function get(property, defaults) {\n        if (_lodash2.default.has(this._values, property) || typeof defaults !== 'undefined') {\n          return _lodash2.default.get(this._values, property, defaults);\n        } else {\n          throw new Error('Accessing invalid config property: ' + property);\n          return defaults;\n        }\n      }\n    }, {\n      key: 'set',\n      value: function set(property, value) {\n        return _lodash2.default.set(this._values, property, value);\n      }\n    }]);\n\n    return ChartGrid;\n  }();\n\n  return ChartGrid;\n}",null]}