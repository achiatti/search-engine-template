{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/merge_duplicate_requests.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/merge_duplicate_requests.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergeDuplicatesRequestProvider = MergeDuplicatesRequestProvider;\n\nvar _is_request = require('./is_request');\n\nvar _req_status = require('./req_status');\n\nfunction MergeDuplicatesRequestProvider(Private) {\n  var isRequest = Private(_is_request.IsRequestProvider);\n  var DUPLICATE = _req_status.RequestStatus.DUPLICATE;\n\n  function mergeDuplicateRequests(requests) {\n    // dedupe requests\n    var index = {};\n    return requests.map(function (req) {\n      if (!isRequest(req)) return req;\n\n      var iid = req.source._instanceid;\n      if (!index[iid]) {\n        // this request is unique so far\n        index[iid] = req;\n        // keep the request\n        return req;\n      }\n\n      // the source was requested at least twice\n      req._uniq = index[iid];\n      return DUPLICATE;\n    });\n  }\n\n  return mergeDuplicateRequests;\n}",null]}