{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/range_control_factory.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/range_control_factory.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rangeControlFactory = undefined;\n\nvar rangeControlFactory = exports.rangeControlFactory = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(controlParams, kbnApi) {\n    var indexPattern, searchSource, resp, min, max, emptyValue;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return kbnApi.indexPatterns.get(controlParams.indexPattern);\n\n          case 2:\n            indexPattern = _context.sent;\n            searchSource = new kbnApi.SearchSource();\n\n            searchSource.inherits(false); //Do not filter by time so can not inherit from rootSearchSource\n            searchSource.size(0);\n            searchSource.index(indexPattern);\n            searchSource.aggs(minMaxAgg(indexPattern.fields.byName[controlParams.fieldName]));\n\n            _context.next = 10;\n            return searchSource.fetch();\n\n          case 10:\n            resp = _context.sent;\n            min = _lodash2.default.get(resp, 'aggregations.minAgg.value');\n            max = _lodash2.default.get(resp, 'aggregations.maxAgg.value');\n            emptyValue = { min: min, max: min };\n            return _context.abrupt('return', new RangeControl(controlParams, new _range_filter_manager.RangeFilterManager(controlParams.id, controlParams.fieldName, indexPattern, kbnApi.queryFilter, emptyValue), min, max));\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function rangeControlFactory(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _control = require('./control');\n\nvar _range_filter_manager = require('./filter_manager/range_filter_manager');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar minMaxAgg = function minMaxAgg(field) {\n  var aggBody = {};\n  if (field.scripted) {\n    aggBody.script = {\n      inline: field.script,\n      lang: field.lang\n    };\n  } else {\n    aggBody.field = field.name;\n  }\n  return {\n    maxAgg: {\n      max: aggBody\n    },\n    minAgg: {\n      min: aggBody\n    }\n  };\n};\n\nvar RangeControl = function (_Control) {\n  _inherits(RangeControl, _Control);\n\n  function RangeControl(controlParams, filterManager, min, max) {\n    _classCallCheck(this, RangeControl);\n\n    var _this = _possibleConstructorReturn(this, (RangeControl.__proto__ || Object.getPrototypeOf(RangeControl)).call(this, controlParams, filterManager));\n\n    _this.min = min;\n    _this.max = max;\n    return _this;\n  }\n\n  return RangeControl;\n}(_control.Control);",null]}