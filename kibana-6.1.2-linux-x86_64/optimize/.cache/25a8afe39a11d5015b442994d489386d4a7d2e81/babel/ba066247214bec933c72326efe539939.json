{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/base.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/base.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseParamTypeProvider = BaseParamTypeProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction BaseParamTypeProvider() {\n\n  function BaseParamType(config) {\n    _lodash2.default.assign(this, config);\n  }\n\n  /**\n   *  A function that will be called before an aggConfig is serialized and sent to ES.\n   *  Allows aggConfig to retrieve values needed for serialization by creating a {SearchRequest}\n   *  Example usage: an aggregation needs to know the min/max of a field to determine an appropriate interval\n   *\n   *  @param {AggConfig} aggconfig\n   *  @param {Courier.SearchSource} searchSource\n   *  @param {Courier.SearchRequest} searchRequest\n   *  @returns {Promise<undefined>|undefined}\n   */\n  // eslint-disable-next-line no-unused-vars\n  BaseParamType.prototype.modifyAggConfigOnSearchRequestStart = function (aggconfig, searchSource, searchRequest) {};\n\n  return BaseParamType;\n}",null]}