{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/bound_to_config_obj.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/bound_to_config_obj.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoundToConfigObjProvider = BoundToConfigObjProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction BoundToConfigObjProvider(config) {\n\n  /**\n   * Create an object with properties that may be bound to config values.\n   * The input object is basically cloned unless one of it's own properties\n   * resolved to a string value that starts with an equal sign. When that is\n   * found, that property is forever bound to the corresponding config key.\n   *\n   * example:\n   *\n   * // name is cloned, height is bound to the defaultHeight config key\n   * { name: 'john', height: '=defaultHeight' };\n   *\n   * @param  {Object} input\n   * @return {Object}\n   */\n  function BoundToConfigObj(input) {\n    var self = this;\n\n    _lodash2.default.forOwn(input, function (value, prop) {\n      if (!_lodash2.default.isString(value) || value.charAt(0) !== '=') {\n        self[prop] = value;\n        return;\n      }\n\n      var configKey = value.substr(1);\n\n      config.watch(configKey, function update(value) {\n        self[prop] = value;\n      });\n    });\n  }\n\n  return BoundToConfigObj;\n}",null]}