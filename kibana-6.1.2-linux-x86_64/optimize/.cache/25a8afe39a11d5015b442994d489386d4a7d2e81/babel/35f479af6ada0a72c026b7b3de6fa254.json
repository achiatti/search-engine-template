{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/angular-bootstrap/collapse/collapse.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/angular-bootstrap/collapse/collapse.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nangular.module('ui.bootstrap.collapse', ['ui.bootstrap.transition']).directive('collapse', ['$transition', function ($transition) {\n\n  return {\n    link: function link(scope, element, attrs) {\n\n      var initialAnimSkip = true;\n      var currentTransition;\n\n      function doTransition(change) {\n        var newTransition = $transition(element, change);\n        if (currentTransition) {\n          currentTransition.cancel();\n        }\n        currentTransition = newTransition;\n        newTransition.then(newTransitionDone, newTransitionDone);\n        return newTransition;\n\n        function newTransitionDone() {\n          // Make sure it's this transition, otherwise, leave it alone.\n          if (currentTransition === newTransition) {\n            currentTransition = undefined;\n          }\n        }\n      }\n\n      function expand() {\n        if (initialAnimSkip) {\n          initialAnimSkip = false;\n          expandDone();\n        } else {\n          element.removeClass('collapse').addClass('collapsing');\n          doTransition({ height: element[0].scrollHeight + 'px' }).then(expandDone);\n        }\n      }\n\n      function expandDone() {\n        element.removeClass('collapsing');\n        element.addClass('collapse in');\n        element.css({ height: 'auto' });\n      }\n\n      function collapse() {\n        if (initialAnimSkip) {\n          initialAnimSkip = false;\n          collapseDone();\n          element.css({ height: 0 });\n        } else {\n          // CSS transitions don't work with height: auto, so we have to manually change the height to a specific value\n          element.css({ height: element[0].scrollHeight + 'px' });\n          //trigger reflow so a browser realizes that height was updated from auto to a specific value\n          var x = element[0].offsetWidth;\n\n          element.removeClass('collapse in').addClass('collapsing');\n\n          doTransition({ height: 0 }).then(collapseDone);\n        }\n      }\n\n      function collapseDone() {\n        element.removeClass('collapsing');\n        element.addClass('collapse');\n      }\n\n      scope.$watch(attrs.collapse, function (shouldCollapse) {\n        if (shouldCollapse) {\n          collapse();\n        } else {\n          expand();\n        }\n      });\n    }\n  };\n}]);",null]}