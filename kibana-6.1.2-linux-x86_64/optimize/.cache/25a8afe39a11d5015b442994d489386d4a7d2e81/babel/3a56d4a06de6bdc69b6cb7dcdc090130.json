{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/fetch_soon.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/fetch_soon.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchSoonProvider = FetchSoonProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _request_queue = require('../_request_queue');\n\nvar _fetch_now = require('./fetch_now');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This is usually the right fetch provider to use, rather than FetchNowProvider, as this class introduces\n * a slight delay in the request process to allow multiple requests to queue up (e.g. when a dashboard\n * is loading).\n *\n * @param Private\n * @param Promise\n * @constructor\n */\nfunction FetchSoonProvider(Private, Promise) {\n  var _this = this;\n\n  var fetchNow = Private(_fetch_now.FetchNowProvider);\n\n  var debouncedFetchNow = _lodash2.default.debounce(function () {\n    var requests = _request_queue.requestQueue.filter(function (req) {\n      return req.isFetchRequestedAndPending();\n    });\n    fetchNow(requests);\n  }, {\n    wait: 10,\n    maxWait: 50\n  });\n\n  /**\n   * Fetch a list of requests\n   * @param {array} requests - the requests to fetch\n   * @async\n   */\n  this.these = function (requests) {\n    requests.forEach(function (req) {\n      return req._setFetchRequested();\n    });\n    debouncedFetchNow();\n    return Promise.all(requests.map(function (req) {\n      return req.getCompletePromise();\n    }));\n  };\n\n  this.fetchQueued = function () {\n    return _this.these(_request_queue.requestQueue.getStartable());\n  };\n}",null]}