{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/common/field_formats/types/_numeral.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/common/field_formats/types/_numeral.js","mtime":1515552206388},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumeralFormat = createNumeralFormat;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _numeral = require('@elastic/numeral');\n\nvar _numeral2 = _interopRequireDefault(_numeral);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar numeralInst = (0, _numeral2.default)();\n\nfunction createNumeralFormat(FieldFormat, opts) {\n  var NumeralFormat = function (_FieldFormat) {\n    _inherits(NumeralFormat, _FieldFormat);\n\n    function NumeralFormat(params, getConfig) {\n      _classCallCheck(this, NumeralFormat);\n\n      var _this = _possibleConstructorReturn(this, (NumeralFormat.__proto__ || Object.getPrototypeOf(NumeralFormat)).call(this, params));\n\n      _this.getConfig = getConfig;\n      return _this;\n    }\n\n    _createClass(NumeralFormat, [{\n      key: 'getParamDefaults',\n      value: function getParamDefaults() {\n        if (_lodash2.default.has(opts, 'getParamDefaults')) {\n          return opts.getParamDefaults(this.getConfig);\n        }\n\n        return {\n          pattern: this.getConfig('format:' + opts.id + ':defaultPattern')\n        };\n      }\n    }, {\n      key: '_convert',\n      value: function _convert(val) {\n        if (val === -Infinity) return '-∞';\n        if (val === +Infinity) return '+∞';\n        if (typeof val !== 'number') {\n          val = parseFloat(val);\n        }\n\n        if (isNaN(val)) return '';\n\n        var formatted = numeralInst.set(val).format(this.param('pattern'));\n\n        return opts.afterConvert ? opts.afterConvert.call(this, formatted) : formatted;\n      }\n    }]);\n\n    return NumeralFormat;\n  }(FieldFormat);\n\n  NumeralFormat.id = opts.id;\n  NumeralFormat.title = opts.title;\n  NumeralFormat.fieldType = 'number';\n  if (opts.prototype) {\n    _lodash2.default.assign(NumeralFormat.prototype, opts.prototype);\n  }\n\n  return NumeralFormat;\n}",null]}