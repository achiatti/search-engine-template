{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/lodash-mixins/object.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/lodash-mixins/object.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lodashObjectMixin = lodashObjectMixin;\nfunction lodashObjectMixin(_) {\n  return _.mixin(_, {\n\n    /**\n     * Flatten an object into a single-level object.\n     * NOTE: The flatten behavior here works if you don't need to keep a reference to the original value\n     *\n     * set flattenArrays to traverse into arrays and create properties like:\n     *  {\n     *    'users.0.name': 'username1',\n     *    'users.1.name': 'username2',\n     *    'users.2.name': 'username3',\n     *  }\n     *\n     * @param  {string} dot - the seperator for keys, '.' is generally preferred\n     * @param  {object} nestedObj - the object to flatten\n     * @param  {Boolean} flattenArrays - should arrays be travered or left alone?\n     * @return {object}\n     */\n    flattenWith: function flattenWith(dot, nestedObj, flattenArrays) {\n      var stack = []; // track key stack\n      var flatObj = {};\n\n      (function flattenObj(obj) {\n        _.keys(obj).forEach(function (key) {\n          stack.push(key);\n          if (!flattenArrays && Array.isArray(obj[key])) flatObj[stack.join(dot)] = obj[key];else if (_.isObject(obj[key])) flattenObj(obj[key]);else flatObj[stack.join(dot)] = obj[key];\n          stack.pop();\n        });\n      })(nestedObj);\n\n      return flatObj;\n    }\n\n  });\n}",null]}