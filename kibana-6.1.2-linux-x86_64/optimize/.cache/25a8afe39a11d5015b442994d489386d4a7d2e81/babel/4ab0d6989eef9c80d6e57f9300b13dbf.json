{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/objects/_view.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/objects/_view.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _saved_object_registry = require('plugins/kibana/management/saved_object_registry');\n\nvar _view = require('plugins/kibana/management/sections/objects/_view.html');\n\nvar _view2 = _interopRequireDefault(_view);\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _modules = require('ui/modules');\n\nrequire('ui/accessibility/kbn_ui_ace_keyboard_mode');\n\nvar _utils = require('../../../../../../utils');\n\nvar _saved_objects = require('ui/saved_objects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/management/kibana/objects/:service/:id', {\n  template: _view2.default\n});\n\n_modules.uiModules.get('apps/management').directive('kbnManagementObjectsView', function (kbnIndex, Notifier, confirmModal) {\n  return {\n    restrict: 'E',\n    controller: function controller($scope, $injector, $routeParams, $location, $window, $rootScope, Private) {\n      var notify = new Notifier({ location: 'SavedObject view' });\n      var serviceObj = _saved_object_registry.savedObjectManagementRegistry.get($routeParams.service);\n      var service = $injector.get(serviceObj.service);\n      var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n\n      /**\n      * Creates a field definition and pushes it to the memo stack. This function\n      * is designed to be used in conjunction with _.reduce(). If the\n      * values is plain object it will recurse through all the keys till it hits\n      * a string, number or an array.\n      *\n      * @param {array} memo The stack of fields\n      * @param {mixed} value The value of the field\n      * @param {string} key The key of the field\n      * @param {object} collection This is a reference the collection being reduced\n      * @param {array} parents The parent keys to the field\n      * @returns {array}\n      */\n      var createField = function createField(memo, val, key, collection, parents) {\n        if (Array.isArray(parents)) {\n          parents.push(key);\n        } else {\n          parents = [key];\n        }\n\n        var field = { type: 'text', name: parents.join('.'), value: val };\n\n        if (_lodash2.default.isString(field.value)) {\n          try {\n            field.value = _angular2.default.toJson(JSON.parse(field.value), true);\n            field.type = 'json';\n          } catch (err) {\n            field.value = field.value;\n          }\n        } else if (_lodash2.default.isNumeric(field.value)) {\n          field.type = 'number';\n        } else if (Array.isArray(field.value)) {\n          field.type = 'array';\n          field.value = _angular2.default.toJson(field.value, true);\n        } else if (_lodash2.default.isBoolean(field.value)) {\n          field.type = 'boolean';\n          field.value = field.value;\n        } else if (_lodash2.default.isPlainObject(field.value)) {\n          // do something recursive\n          return _lodash2.default.reduce(field.value, _lodash2.default.partialRight(createField, parents), memo);\n        }\n\n        memo.push(field);\n\n        // once the field is added to the object you need to pop the parents\n        // to remove it since we've hit the end of the branch.\n        parents.pop();\n        return memo;\n      };\n\n      var readObjectClass = function readObjectClass(fields, Class) {\n        var fieldMap = _lodash2.default.indexBy(fields, 'name');\n\n        _lodash2.default.forOwn(Class.mapping, function (esType, name) {\n          if (fieldMap[name]) return;\n\n          fields.push({\n            name: name,\n            type: function () {\n              switch ((0, _utils.castEsToKbnFieldTypeName)(esType)) {\n                case 'string':\n                  return 'text';\n                case 'number':\n                  return 'number';\n                case 'boolean':\n                  return 'boolean';\n                default:\n                  return 'json';\n              }\n            }()\n          });\n        });\n\n        if (Class.searchSource && !fieldMap['kibanaSavedObjectMeta.searchSourceJSON']) {\n          fields.push({\n            name: 'kibanaSavedObjectMeta.searchSourceJSON',\n            type: 'json',\n            value: '{}'\n          });\n        }\n      };\n\n      $scope.notFound = $routeParams.notFound;\n\n      $scope.title = service.type;\n\n      savedObjectsClient.get(service.type, $routeParams.id).then(function (obj) {\n        $scope.obj = obj;\n        $scope.link = service.urlFor(obj.id);\n\n        var fields = _lodash2.default.reduce(obj.attributes, createField, []);\n        if (service.Class) readObjectClass(fields, service.Class);\n\n        // sorts twice since we want numerical sort to prioritize over name,\n        // and sortBy will do string comparison if trying to match against strings\n        var nameSortedFields = _lodash2.default.sortBy(fields, 'name');\n        $scope.fields = _lodash2.default.sortBy(nameSortedFields, function (field) {\n          var orderIndex = service.Class.fieldOrder ? service.Class.fieldOrder.indexOf(field.name) : -1;\n          return orderIndex > -1 ? orderIndex : Infinity;\n        });\n      }).catch(notify.fatal);\n\n      // This handles the validation of the Ace Editor. Since we don't have any\n      // other hooks into the editors to tell us if the content is valid or not\n      // we need to use the annotations to see if they have any errors. If they\n      // do then we push the field.name to aceInvalidEditor variable.\n      // Otherwise we remove it.\n      var loadedEditors = [];\n      $scope.aceInvalidEditors = [];\n\n      $scope.aceLoaded = function (editor) {\n        if (_lodash2.default.contains(loadedEditors, editor)) return;\n        loadedEditors.push(editor);\n\n        editor.$blockScrolling = Infinity;\n\n        var session = editor.getSession();\n        var fieldName = editor.container.id;\n\n        session.setTabSize(2);\n        session.setUseSoftTabs(true);\n        session.on('changeAnnotation', function () {\n          var annotations = session.getAnnotations();\n          if (_lodash2.default.some(annotations, { type: 'error' })) {\n            if (!_lodash2.default.contains($scope.aceInvalidEditors, fieldName)) {\n              $scope.aceInvalidEditors.push(fieldName);\n            }\n          } else {\n            $scope.aceInvalidEditors = _lodash2.default.without($scope.aceInvalidEditors, fieldName);\n          }\n\n          if (!$rootScope.$$phase) $scope.$apply();\n        });\n      };\n\n      $scope.cancel = function () {\n        $window.history.back();\n        return false;\n      };\n\n      /**\n      * Deletes an object and sets the notification\n      * @param {type} name description\n      * @returns {type} description\n      */\n      $scope.delete = function () {\n        function doDelete() {\n          savedObjectsClient.delete(service.type, $routeParams.id).then(function () {\n            return redirectHandler('deleted');\n          }).catch(notify.fatal);\n        }\n        var confirmModalOptions = {\n          onConfirm: doDelete,\n          confirmButtonText: 'Delete object'\n        };\n        confirmModal('Are you sure want to delete this object? This action is irreversible!', confirmModalOptions);\n      };\n\n      $scope.submit = function () {\n        var source = _lodash2.default.cloneDeep($scope.obj.attributes);\n\n        _lodash2.default.each($scope.fields, function (field) {\n          var value = field.value;\n\n          if (field.type === 'number') {\n            value = Number(field.value);\n          }\n\n          if (field.type === 'array') {\n            value = JSON.parse(field.value);\n          }\n\n          _lodash2.default.set(source, field.name, value);\n        });\n\n        savedObjectsClient.update(service.type, $routeParams.id, source).then(function () {\n          return redirectHandler('updated');\n        }).catch(notify.fatal);\n      };\n\n      function redirectHandler(action) {\n        var msg = 'You successfully ' + action + ' the \"' + $scope.obj.attributes.title + '\" ' + $scope.title.toLowerCase() + ' object';\n\n        $location.path('/management/kibana/objects').search({\n          _a: _risonNode2.default.encode({\n            tab: serviceObj.title\n          })\n        });\n        notify.info(msg);\n      }\n    }\n  };\n});",null]}