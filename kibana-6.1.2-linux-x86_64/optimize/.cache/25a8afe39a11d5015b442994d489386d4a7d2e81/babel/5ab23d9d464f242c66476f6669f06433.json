{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/kibana_parsed_url.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/kibana_parsed_url.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KibanaParsedUrl = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _url = require('url');\n\nvar _prepend_path = require('./prepend_path');\n\nvar _utils = require('../../../utils');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Represents the pieces that make up a url in Kibana, offering some helpful functionality for\n * translating those pieces into absolute or relative urls. A Kibana url with a basePath looks like this:\n * http://localhost:5601/basePath/app/appId#/an/appPath?with=query&params\n * basePath is \"/basePath\"\n * appId is \"appId\"\n * appPath is \"/an/appPath?with=query&params\"\n *\n * Almost all urls in Kibana should have this structure, including the \"/app\" portion in front of the appId\n * (one exception is the login link).\n */\nvar KibanaParsedUrl = exports.KibanaParsedUrl = function () {\n  /**\n   * @param {Object} options\n   * @property {string} options.basePath - An optional base path for kibana. If supplied, should start with a \"/\".\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id the basePath is\n   * \"/gra\".\n   * @property {string} options.appId - the app id.\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id the app id is \"kibana\".\n   * @property {string} options.appPath - the path for a page in the the app. Should start with a \"/\". Don't include the hash sign. Can\n   * include all query parameters.\n   * e.g. in https://localhost:5601/gra/app/kibana#/visualize/edit/viz_id?g=state the appPath is\n   * \"/visualize/edit/viz_id?g=state\"\n   * @property {string} options.hostname - Optional hostname. Uses current window location's hostname if no host or\n   * protocol information is supplied.\n   * @property {string} options.port - Optional port. Uses current window location's port if no host or protocol\n   * information is supplied.\n   * @property {string} options.protocol - Optional protocol. Uses current window location's protocol if no host or\n   * protocol information is supplied.\n   */\n  function KibanaParsedUrl(options) {\n    _classCallCheck(this, KibanaParsedUrl);\n\n    var appId = options.appId,\n        _options$basePath = options.basePath,\n        basePath = _options$basePath === undefined ? '' : _options$basePath,\n        _options$appPath = options.appPath,\n        appPath = _options$appPath === undefined ? '' : _options$appPath,\n        hostname = options.hostname,\n        protocol = options.protocol,\n        port = options.port;\n\n    // We'll use window defaults\n\n    var hostOrProtocolSpecified = hostname || protocol || port;\n\n    this.basePath = basePath;\n    this.appId = appId;\n    this.appPath = appPath;\n    this.hostname = hostOrProtocolSpecified ? hostname : window.location.hostname;\n    this.port = hostOrProtocolSpecified ? port : window.location.port;\n    this.protocol = hostOrProtocolSpecified ? protocol : window.location.protocol;\n  }\n\n  _createClass(KibanaParsedUrl, [{\n    key: 'getGlobalState',\n    value: function getGlobalState() {\n      if (!this.appPath) {\n        return '';\n      }\n      var parsedUrl = (0, _url.parse)(this.appPath, true);\n      var query = parsedUrl.query || {};\n      return query._g || '';\n    }\n  }, {\n    key: 'setGlobalState',\n    value: function setGlobalState(newGlobalState) {\n      if (!this.appPath) {\n        return;\n      }\n\n      this.appPath = (0, _utils.modifyUrl)(this.appPath, function (parsed) {\n        parsed.query._g = newGlobalState;\n      });\n    }\n  }, {\n    key: 'addQueryParameter',\n    value: function addQueryParameter(name, val) {\n      this.appPath = (0, _utils.modifyUrl)(this.appPath, function (parsed) {\n        parsed.query[name] = val;\n      });\n    }\n  }, {\n    key: 'getHashedAppPath',\n    value: function getHashedAppPath() {\n      return '#' + this.appPath;\n    }\n  }, {\n    key: 'getAppBasePath',\n    value: function getAppBasePath() {\n      return '/' + this.appId;\n    }\n  }, {\n    key: 'getAppRootPath',\n    value: function getAppRootPath() {\n      return '/app' + this.getAppBasePath() + this.getHashedAppPath();\n    }\n  }, {\n    key: 'getRootRelativePath',\n    value: function getRootRelativePath() {\n      return (0, _prepend_path.prependPath)(this.getAppRootPath(), this.basePath);\n    }\n  }, {\n    key: 'getAbsoluteUrl',\n    value: function getAbsoluteUrl() {\n      var _this = this;\n\n      return (0, _utils.modifyUrl)(this.getRootRelativePath(), function (parsed) {\n        parsed.protocol = _this.protocol;\n        parsed.port = _this.port;\n        parsed.hostname = _this.hostname;\n      });\n    }\n  }]);\n\n  return KibanaParsedUrl;\n}();",null]}