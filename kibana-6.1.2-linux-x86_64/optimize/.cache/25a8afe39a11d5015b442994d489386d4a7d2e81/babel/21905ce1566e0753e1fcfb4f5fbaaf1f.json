{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/field_formats/content_types.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/field_formats/content_types.js","mtime":1515552211774},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.contentTypesSetup = contentTypesSetup;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _as_pretty_string = require('../../core_plugins/kibana/common/utils/as_pretty_string');\n\nvar _highlight_html = require('../../core_plugins/kibana/common/highlight/highlight_html');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar types = {\n  html: function html(format, convert) {\n    function recurse(value, field, hit, meta) {\n      if (value == null) {\n        return (0, _as_pretty_string.asPrettyString)(value);\n      }\n\n      if (!value || typeof value.map !== 'function') {\n        return convert.call(format, value, field, hit, meta);\n      }\n\n      var subVals = value.map(function (v) {\n        return recurse(v, field, hit, meta);\n      });\n      var useMultiLine = subVals.some(function (sub) {\n        return sub.indexOf('\\n') > -1;\n      });\n\n      return subVals.join(',' + (useMultiLine ? '\\n' : ' '));\n    }\n\n    return function () {\n      return '<span ng-non-bindable>' + recurse.apply(undefined, arguments) + '</span>';\n    };\n  },\n\n  text: function text(format, convert) {\n    return function recurse(value) {\n      if (!value || typeof value.map !== 'function') {\n        return convert.call(format, value);\n      }\n\n      // format a list of values. In text contexts we just use JSON encoding\n      return JSON.stringify(value.map(recurse));\n    };\n  }\n};\n\nfunction fallbackText(value) {\n  return (0, _as_pretty_string.asPrettyString)(value);\n}\n\nfunction fallbackHtml(value, field, hit) {\n  var formatted = _lodash2.default.escape(this.convert(value, 'text'));\n\n  if (!hit || !hit.highlight || !hit.highlight[field.name]) {\n    return formatted;\n  } else {\n    return (0, _highlight_html.getHighlightHtml)(formatted, hit.highlight[field.name]);\n  }\n}\n\nfunction contentTypesSetup(format) {\n  var src = format._convert || {};\n  var converters = format._convert = {};\n\n  converters.text = types.text(format, src.text || fallbackText);\n  converters.html = types.html(format, src.html || fallbackHtml);\n\n  return format._convert;\n}",null]}