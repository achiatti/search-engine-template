{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/json.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/json.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonParamTypeProvider = JsonParamTypeProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _raw_json = require('../controls/raw_json.html');\n\nvar _raw_json2 = _interopRequireDefault(_raw_json);\n\nvar _base = require('./base');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction JsonParamTypeProvider(Private) {\n\n  var BaseParamType = Private(_base.BaseParamTypeProvider);\n\n  _lodash2.default.class(JsonParamType).inherits(BaseParamType);\n  function JsonParamType(config) {\n    // force name override\n    config = _lodash2.default.defaults(config, { name: 'json' });\n    JsonParamType.Super.call(this, config);\n  }\n\n  JsonParamType.prototype.editor = _raw_json2.default;\n\n  /**\n   * Write the aggregation parameter.\n   *\n   * @param  {AggConfig} aggConfig - the entire configuration for this agg\n   * @param  {object} output - the result of calling write on all of the aggregations\n   *                         parameters.\n   * @param  {object} output.params - the final object that will be included as the params\n   *                               for the agg\n   * @return {undefined}\n   */\n  JsonParamType.prototype.write = function (aggConfig, output) {\n    var paramJson = void 0;\n    var param = aggConfig.params[this.name];\n\n    if (!param) {\n      return;\n    }\n\n    // handle invalid Json input\n    try {\n      paramJson = JSON.parse(param);\n    } catch (err) {\n      return;\n    }\n\n    function filteredCombine(srcA, srcB) {\n      function mergeObjs(a, b) {\n        return (0, _lodash2.default)(a).keys().union(_lodash2.default.keys(b)).transform(function (dest, key) {\n          var val = compare(a[key], b[key]);\n          if (val !== undefined) dest[key] = val;\n        }, {}).value();\n      }\n\n      function mergeArrays(a, b) {\n        // attempt to merge each value\n        return _lodash2.default.times(Math.max(a.length, b.length), function (i) {\n          return compare(a[i], b[i]);\n        });\n      }\n\n      function compare(a, b) {\n        if (_lodash2.default.isPlainObject(a) && _lodash2.default.isPlainObject(b)) return mergeObjs(a, b);\n        if (Array.isArray(a) && Array.isArray(b)) return mergeArrays(a, b);\n        if (b === null) return undefined;\n        if (b !== undefined) return b;\n        return a;\n      }\n\n      return compare(srcA, srcB);\n    }\n\n    output.params = filteredCombine(output.params, paramJson);\n    return;\n  };\n\n  return JsonParamType;\n}",null]}