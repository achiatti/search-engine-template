{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/heatmap.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/heatmap.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HeatmapMarkers = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _events = require('events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Map overlay: canvas layer with leaflet.heat plugin\n *\n * @param map {Leaflet Object}\n * @param geoJson {geoJson Object}\n * @param params {Object}\n */\nvar HeatmapMarkers = exports.HeatmapMarkers = function (_EventEmitter) {\n  _inherits(HeatmapMarkers, _EventEmitter);\n\n  function HeatmapMarkers(featureCollection, options, zoom) {\n    _classCallCheck(this, HeatmapMarkers);\n\n    var _this = _possibleConstructorReturn(this, (HeatmapMarkers.__proto__ || Object.getPrototypeOf(HeatmapMarkers)).call(this));\n\n    _this._geojsonFeatureCollection = featureCollection;\n    var points = dataToHeatArray(featureCollection);\n    _this._leafletLayer = _leaflet2.default.heatLayer(points, options);\n    _this._tooltipFormatter = options.tooltipFormatter;\n    _this._zoom = zoom;\n    _this._disableTooltips = false;\n    _this._getLatLng = _lodash2.default.memoize(function (feature) {\n      return _leaflet2.default.latLng(feature.geometry.coordinates[1], feature.geometry.coordinates[0]);\n    }, function (feature) {\n      // turn coords into a string for the memoize cache\n      return [feature.geometry.coordinates[1], feature.geometry.coordinates[0]].join(',');\n    });\n    _this._addTooltips();\n    return _this;\n  }\n\n  _createClass(HeatmapMarkers, [{\n    key: 'getBounds',\n    value: function getBounds() {\n      return this._leafletLayer.getBounds();\n    }\n  }, {\n    key: 'getLeafletLayer',\n    value: function getLeafletLayer() {\n      return this._leafletLayer;\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents() {}\n  }, {\n    key: 'movePointer',\n    value: function movePointer(type, event) {\n      if (type === 'mousemove') {\n        this._deboundsMoveMoveLocation(event);\n      } else if (type === 'mouseout') {\n        this.emit('hideTooltip');\n      } else if (type === 'mousedown') {\n        this._disableTooltips = true;\n        this.emit('hideTooltip');\n      } else if (type === 'mouseup') {\n        this._disableTooltips = false;\n      }\n    }\n  }, {\n    key: '_addTooltips',\n    value: function _addTooltips() {\n      var _this2 = this;\n\n      var mouseMoveLocation = function mouseMoveLocation(e) {\n\n        if (!_this2._geojsonFeatureCollection.features.length || _this2._disableTooltips) {\n          _this2.emit('hideTooltip');\n          return;\n        }\n\n        var feature = _this2._nearestFeature(e.latlng);\n        if (_this2._tooltipProximity(e.latlng, feature)) {\n          var content = _this2._tooltipFormatter(feature);\n          if (!content) {\n            return;\n          }\n          _this2.emit('showTooltip', {\n            content: content,\n            position: e.latlng\n          });\n        } else {\n          _this2.emit('hideTooltip');\n        }\n      };\n\n      this._deboundsMoveMoveLocation = _lodash2.default.debounce(mouseMoveLocation.bind(this), 15, {\n        'leading': true,\n        'trailing': false\n      });\n    }\n\n    /**\n     * Finds nearest feature in mapData to event latlng\n     *\n     * @method _nearestFeature\n     * @param latLng {Leaflet latLng}\n     * @return nearestPoint {Leaflet latLng}\n     */\n\n  }, {\n    key: '_nearestFeature',\n    value: function _nearestFeature(latLng) {\n      var self = this;\n      var nearest = void 0;\n\n      if (latLng.lng < -180 || latLng.lng > 180) {\n        return;\n      }\n\n      _lodash2.default.reduce(this._geojsonFeatureCollection.features, function (distance, feature) {\n        var featureLatLng = self._getLatLng(feature);\n        var dist = latLng.distanceTo(featureLatLng);\n\n        if (dist < distance) {\n          nearest = feature;\n          return dist;\n        }\n\n        return distance;\n      }, Infinity);\n\n      return nearest;\n    }\n\n    /**\n     * display tooltip if feature is close enough to event latlng\n     *\n     * @method _tooltipProximity\n     * @param latlng {Leaflet latLng  Object}\n     * @param feature {geoJson Object}\n     * @return {Boolean}\n     */\n\n  }, {\n    key: '_tooltipProximity',\n    value: function _tooltipProximity(latlng, feature) {\n      if (!feature) return;\n\n      var showTip = false;\n      var featureLatLng = this._getLatLng(feature);\n\n      // zoomScale takes map zoom and returns proximity value for tooltip display\n      // domain (input values) is map zoom (min 1 and max 18)\n      // range (output values) is distance in meters\n      // used to compare proximity of event latlng to feature latlng\n      var zoomScale = _d2.default.scale.linear().domain([1, 4, 7, 10, 13, 16, 18]).range([1000000, 300000, 100000, 15000, 2000, 150, 50]);\n\n      var proximity = zoomScale(this._zoom);\n      var distance = latlng.distanceTo(featureLatLng);\n\n      // maxLngDif is max difference in longitudes\n      // to prevent feature tooltip from appearing 360Â°\n      // away from event latlng\n      var maxLngDif = 40;\n      var lngDif = Math.abs(latlng.lng - featureLatLng.lng);\n\n      if (distance < proximity && lngDif < maxLngDif) {\n        showTip = true;\n      }\n\n      _d2.default.scale.pow().exponent(0.2).domain([1, 18]).range([1500000, 50]);\n      return showTip;\n    }\n  }]);\n\n  return HeatmapMarkers;\n}(_events.EventEmitter);\n\n/**\n * returns normalized data for heat map intensity\n *\n * @method dataToHeatArray\n * @param featureCollection {Array}\n * @return {Array}\n */\n\n\nfunction dataToHeatArray(featureCollection) {\n  var max = _lodash2.default.get(featureCollection, 'properties.max');\n\n  return featureCollection.features.map(function (feature) {\n    var lat = feature.geometry.coordinates[1];\n    var lng = feature.geometry.coordinates[0];\n    // show bucket value normalized to max value\n    var heatIntensity = feature.properties.value / max;\n\n    return [lat, lng, heatIntensity];\n  });\n}",null]}