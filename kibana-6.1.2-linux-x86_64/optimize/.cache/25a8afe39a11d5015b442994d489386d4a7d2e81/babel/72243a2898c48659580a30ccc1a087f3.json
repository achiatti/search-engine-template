{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/rows.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/rows.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_config_result = require('ui/vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nvar _filter_bar_click_handler = require('ui/filter_bar/filter_bar_click_handler');\n\nvar _modules = require('ui/modules');\n\nvar _table_cell_filter = require('./partials/table_cell_filter.html');\n\nvar _table_cell_filter2 = _interopRequireDefault(_table_cell_filter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('kbnRows', function ($compile, $rootScope, getAppState, Private) {\n  var filterBarClickHandler = Private(_filter_bar_click_handler.FilterBarClickHandlerProvider);\n  return {\n    restrict: 'A',\n    link: function link($scope, $el, attr) {\n      function addCell($tr, contents) {\n        function createCell() {\n          return (0, _jquery2.default)(document.createElement('td'));\n        }\n\n        function createFilterableCell(aggConfigResult) {\n          var $template = (0, _jquery2.default)(_table_cell_filter2.default);\n          $template.addClass('cell-hover');\n\n          var scope = $scope.$new();\n\n          var $state = getAppState();\n          var addFilter = filterBarClickHandler($state);\n          scope.onFilterClick = function (event, negate) {\n            // Don't add filter if a link was clicked.\n            if ((0, _jquery2.default)(event.target).is('a')) {\n              return;\n            }\n\n            addFilter({ point: { aggConfigResult: aggConfigResult }, negate: negate });\n          };\n\n          return $compile($template)(scope);\n        }\n\n        var $cell = void 0;\n        var $cellContent = void 0;\n\n        if (contents instanceof _agg_config_result2.default) {\n          var field = contents.aggConfig.getField();\n          var isCellContentFilterable = contents.aggConfig.isFilterable() && (!field || field.filterable);\n\n          if (isCellContentFilterable) {\n            $cell = createFilterableCell(contents);\n            $cellContent = $cell.find('[data-cell-content]');\n          } else {\n            $cell = $cellContent = createCell();\n          }\n\n          // An AggConfigResult can \"enrich\" cell contents by applying a field formatter,\n          // which we want to do if possible.\n          contents = contents.toString('html');\n        } else {\n          $cell = $cellContent = createCell();\n\n          // TODO: It would be better to actually check the type of the field, but we don't have\n          // access to it here. This may become a problem with the switch to BigNumber\n          if (_lodash2.default.isNumeric(contents)) {\n            $cell.addClass('numeric-value');\n          }\n        }\n\n        if (_lodash2.default.isObject(contents)) {\n          if (contents.attr) {\n            $cellContent.attr(contents.attr);\n          }\n\n          if (contents.class) {\n            $cellContent.addClass(contents.class);\n          }\n\n          if (contents.scope) {\n            $cellContent = $compile($cellContent.prepend(contents.markup))(contents.scope);\n          } else {\n            $cellContent.prepend(contents.markup);\n          }\n\n          if (contents.attr) {\n            $cellContent.attr(contents.attr);\n          }\n        } else {\n          if (contents === '') {\n            $cellContent.prepend('&nbsp;');\n          } else {\n            $cellContent.prepend(contents);\n          }\n        }\n\n        $tr.append($cell);\n      }\n\n      function maxRowSize(max, row) {\n        return Math.max(max, row.length);\n      }\n\n      $scope.$watchMulti([attr.kbnRows, attr.kbnRowsMin], function (vals) {\n        var rows = vals[0];\n        var min = vals[1];\n\n        $el.empty();\n\n        if (!Array.isArray(rows)) rows = [];\n        var width = rows.reduce(maxRowSize, 0);\n\n        if (isFinite(min) && rows.length < min) {\n          // clone the rows so that we can add elements to it without upsetting the original\n          rows = _lodash2.default.clone(rows);\n          // crate the empty row which will be pushed into the row list over and over\n          var emptyRow = new Array(width);\n          // fill the empty row with values\n          _lodash2.default.times(width, function (i) {\n            emptyRow[i] = '';\n          });\n          // push as many empty rows into the row array as needed\n          _lodash2.default.times(min - rows.length, function () {\n            rows.push(emptyRow);\n          });\n        }\n\n        rows.forEach(function (row) {\n          var $tr = (0, _jquery2.default)(document.createElement('tr')).appendTo($el);\n          row.forEach(function (cell) {\n            addCell($tr, cell);\n          });\n        });\n      });\n    }\n  };\n});",null]}