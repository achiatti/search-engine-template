{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/query/actions.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/query/actions.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.QueryActionsProvider = QueryActionsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _anchor = require('../api/anchor');\n\nvar _context = require('../api/context');\n\nvar _query_parameters = require('../query_parameters');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction QueryActionsProvider(courier, Notifier, Private, Promise) {\n  var fetchAnchor = Private(_anchor.fetchAnchorProvider);\n\n  var _Private = Private(_context.fetchContextProvider),\n      fetchPredecessors = _Private.fetchPredecessors,\n      fetchSuccessors = _Private.fetchSuccessors;\n\n  var _Private2 = Private(_query_parameters.QueryParameterActionsProvider),\n      increasePredecessorCount = _Private2.increasePredecessorCount,\n      increaseSuccessorCount = _Private2.increaseSuccessorCount,\n      setPredecessorCount = _Private2.setPredecessorCount,\n      setQueryParameters = _Private2.setQueryParameters,\n      setSuccessorCount = _Private2.setSuccessorCount;\n\n  var notifier = new Notifier({\n    location: 'Context'\n  });\n\n  var setFailedStatus = function setFailedStatus(state) {\n    return function (subject) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return state.loadingStatus[subject] = _extends({\n        status: _constants.LOADING_STATUS.FAILED,\n        reason: _constants.FAILURE_REASONS.UNKNOWN\n      }, details);\n    };\n  };\n\n  var setLoadedStatus = function setLoadedStatus(state) {\n    return function (subject) {\n      return state.loadingStatus[subject] = {\n        status: _constants.LOADING_STATUS.LOADED\n      };\n    };\n  };\n\n  var setLoadingStatus = function setLoadingStatus(state) {\n    return function (subject) {\n      return state.loadingStatus[subject] = {\n        status: _constants.LOADING_STATUS.LOADING\n      };\n    };\n  };\n\n  var fetchAnchorRow = function fetchAnchorRow(state) {\n    return function () {\n      var _state$queryParameter = state.queryParameters,\n          indexPatternId = _state$queryParameter.indexPatternId,\n          anchorUid = _state$queryParameter.anchorUid,\n          sort = _state$queryParameter.sort,\n          tieBreakerField = _state$queryParameter.tieBreakerField;\n\n\n      if (!tieBreakerField) {\n        return Promise.reject(setFailedStatus(state)('anchor', {\n          reason: _constants.FAILURE_REASONS.INVALID_TIEBREAKER\n        }));\n      }\n\n      setLoadingStatus(state)('anchor');\n\n      return Promise.try(function () {\n        return fetchAnchor(indexPatternId, anchorUid, [_lodash2.default.zipObject([sort]), _defineProperty({}, tieBreakerField, 'asc')]);\n      }).then(function (anchorDocument) {\n        setLoadedStatus(state)('anchor');\n        state.rows.anchor = anchorDocument;\n        return anchorDocument;\n      }, function (error) {\n        setFailedStatus(state)('anchor', { error: error });\n        notifier.error(error);\n        throw error;\n      });\n    };\n  };\n\n  var fetchPredecessorRows = function fetchPredecessorRows(state) {\n    return function () {\n      var _state$queryParameter2 = state.queryParameters,\n          indexPatternId = _state$queryParameter2.indexPatternId,\n          filters = _state$queryParameter2.filters,\n          predecessorCount = _state$queryParameter2.predecessorCount,\n          sort = _state$queryParameter2.sort,\n          tieBreakerField = _state$queryParameter2.tieBreakerField,\n          anchor = state.rows.anchor;\n\n\n      if (!tieBreakerField) {\n        return Promise.reject(setFailedStatus(state)('predecessors', {\n          reason: _constants.FAILURE_REASONS.INVALID_TIEBREAKER\n        }));\n      }\n\n      setLoadingStatus(state)('predecessors');\n\n      return Promise.try(function () {\n        return fetchPredecessors(indexPatternId, anchor, [_lodash2.default.zipObject([sort]), _defineProperty({}, tieBreakerField, 'asc')], predecessorCount, filters);\n      }).then(function (predecessorDocuments) {\n        setLoadedStatus(state)('predecessors');\n        state.rows.predecessors = predecessorDocuments;\n        return predecessorDocuments;\n      }, function (error) {\n        setFailedStatus(state)('predecessors', { error: error });\n        notifier.error(error);\n        throw error;\n      });\n    };\n  };\n\n  var fetchSuccessorRows = function fetchSuccessorRows(state) {\n    return function () {\n      var _state$queryParameter3 = state.queryParameters,\n          indexPatternId = _state$queryParameter3.indexPatternId,\n          filters = _state$queryParameter3.filters,\n          sort = _state$queryParameter3.sort,\n          successorCount = _state$queryParameter3.successorCount,\n          tieBreakerField = _state$queryParameter3.tieBreakerField,\n          anchor = state.rows.anchor;\n\n\n      if (!tieBreakerField) {\n        return Promise.reject(setFailedStatus(state)('successors', {\n          reason: _constants.FAILURE_REASONS.INVALID_TIEBREAKER\n        }));\n      }\n\n      setLoadingStatus(state)('successors');\n\n      return Promise.try(function () {\n        return fetchSuccessors(indexPatternId, anchor, [_lodash2.default.zipObject([sort]), _defineProperty({}, tieBreakerField, 'asc')], successorCount, filters);\n      }).then(function (successorDocuments) {\n        setLoadedStatus(state)('successors');\n        state.rows.successors = successorDocuments;\n        return successorDocuments;\n      }, function (error) {\n        setFailedStatus(state)('successors', { error: error });\n        notifier.error(error);\n        throw error;\n      });\n    };\n  };\n\n  var fetchContextRows = function fetchContextRows(state) {\n    return function () {\n      return Promise.all([fetchPredecessorRows(state)(), fetchSuccessorRows(state)()]);\n    };\n  };\n\n  var fetchAllRows = function fetchAllRows(state) {\n    return function () {\n      return Promise.try(fetchAnchorRow(state)).then(fetchContextRows(state));\n    };\n  };\n\n  var fetchContextRowsWithNewQueryParameters = function fetchContextRowsWithNewQueryParameters(state) {\n    return function (queryParameters) {\n      setQueryParameters(state)(queryParameters);\n      return fetchContextRows(state)();\n    };\n  };\n\n  var fetchAllRowsWithNewQueryParameters = function fetchAllRowsWithNewQueryParameters(state) {\n    return function (queryParameters) {\n      setQueryParameters(state)(queryParameters);\n      return fetchAllRows(state)();\n    };\n  };\n\n  var fetchGivenPredecessorRows = function fetchGivenPredecessorRows(state) {\n    return function (count) {\n      setPredecessorCount(state)(count);\n      return fetchPredecessorRows(state)();\n    };\n  };\n\n  var fetchGivenSuccessorRows = function fetchGivenSuccessorRows(state) {\n    return function (count) {\n      setSuccessorCount(state)(count);\n      return fetchSuccessorRows(state)();\n    };\n  };\n\n  var fetchMorePredecessorRows = function fetchMorePredecessorRows(state) {\n    return function () {\n      increasePredecessorCount(state)();\n      return fetchPredecessorRows(state)();\n    };\n  };\n\n  var fetchMoreSuccessorRows = function fetchMoreSuccessorRows(state) {\n    return function () {\n      increaseSuccessorCount(state)();\n      return fetchSuccessorRows(state)();\n    };\n  };\n\n  var setAllRows = function setAllRows(state) {\n    return function (predecessorRows, anchorRow, successorRows) {\n      return state.rows.all = [].concat(_toConsumableArray(predecessorRows || []), _toConsumableArray(anchorRow ? [anchorRow] : []), _toConsumableArray(successorRows || []));\n    };\n  };\n\n  return {\n    fetchAllRows: fetchAllRows,\n    fetchAllRowsWithNewQueryParameters: fetchAllRowsWithNewQueryParameters,\n    fetchAnchorRow: fetchAnchorRow,\n    fetchContextRows: fetchContextRows,\n    fetchContextRowsWithNewQueryParameters: fetchContextRowsWithNewQueryParameters,\n    fetchGivenPredecessorRows: fetchGivenPredecessorRows,\n    fetchGivenSuccessorRows: fetchGivenSuccessorRows,\n    fetchMorePredecessorRows: fetchMorePredecessorRows,\n    fetchMoreSuccessorRows: fetchMoreSuccessorRows,\n    fetchPredecessorRows: fetchPredecessorRows,\n    fetchSuccessorRows: fetchSuccessorRows,\n    setAllRows: setAllRows\n  };\n}",null]}