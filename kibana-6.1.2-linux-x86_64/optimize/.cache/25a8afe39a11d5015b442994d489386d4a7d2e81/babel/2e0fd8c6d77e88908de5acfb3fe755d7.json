{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/angular-bootstrap/dropdown/dropdown.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/angular-bootstrap/dropdown/dropdown.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nangular.module('ui.bootstrap.dropdown', []).constant('dropdownConfig', {\n  openClass: 'open'\n}).service('dropdownService', ['$document', function ($document) {\n  var openScope = null;\n\n  this.open = function (dropdownScope) {\n    if (!openScope) {\n      $document.bind('click', closeDropdown);\n      $document.bind('keydown', escapeKeyBind);\n    }\n\n    if (openScope && openScope !== dropdownScope) {\n      openScope.isOpen = false;\n    }\n\n    openScope = dropdownScope;\n  };\n\n  this.close = function (dropdownScope) {\n    if (openScope === dropdownScope) {\n      openScope = null;\n      $document.unbind('click', closeDropdown);\n      $document.unbind('keydown', escapeKeyBind);\n    }\n  };\n\n  var closeDropdown = function closeDropdown(evt) {\n    // This method may still be called during the same mouse event that\n    // unbound this event handler. So check openScope before proceeding.\n    if (!openScope) {\n      return;\n    }\n\n    var toggleElement = openScope.getToggleElement();\n    if (evt && toggleElement && toggleElement[0].contains(evt.target)) {\n      return;\n    }\n\n    openScope.$apply(function () {\n      openScope.isOpen = false;\n    });\n  };\n\n  var escapeKeyBind = function escapeKeyBind(evt) {\n    if (evt.which === 27) {\n      openScope.focusToggleElement();\n      closeDropdown();\n    }\n  };\n}]).controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', function ($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate) {\n  var self = this,\n      scope = $scope.$new(),\n      // create a child scope so we are not polluting original one\n  openClass = dropdownConfig.openClass,\n      getIsOpen,\n      setIsOpen = angular.noop,\n      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop;\n\n  this.init = function (element) {\n    self.$element = element;\n\n    if ($attrs.isOpen) {\n      getIsOpen = $parse($attrs.isOpen);\n      setIsOpen = getIsOpen.assign;\n\n      $scope.$watch(getIsOpen, function (value) {\n        scope.isOpen = !!value;\n      });\n    }\n  };\n\n  this.toggle = function (open) {\n    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;\n  };\n\n  // Allow other directives to watch status\n  this.isOpen = function () {\n    return scope.isOpen;\n  };\n\n  scope.getToggleElement = function () {\n    return self.toggleElement;\n  };\n\n  scope.focusToggleElement = function () {\n    if (self.toggleElement) {\n      self.toggleElement[0].focus();\n    }\n  };\n\n  scope.$watch('isOpen', function (isOpen, wasOpen) {\n    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);\n\n    if (isOpen) {\n      scope.focusToggleElement();\n      dropdownService.open(scope);\n    } else {\n      dropdownService.close(scope);\n    }\n\n    setIsOpen($scope, isOpen);\n    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {\n      toggleInvoker($scope, { open: !!isOpen });\n    }\n  });\n\n  $scope.$on('$locationChangeSuccess', function () {\n    scope.isOpen = false;\n  });\n\n  $scope.$on('$destroy', function () {\n    scope.$destroy();\n  });\n}]).directive('dropdown', function () {\n  return {\n    controller: 'DropdownController',\n    link: function link(scope, element, attrs, dropdownCtrl) {\n      dropdownCtrl.init(element);\n    }\n  };\n}).directive('dropdownToggle', function () {\n  return {\n    require: '?^dropdown',\n    link: function link(scope, element, attrs, dropdownCtrl) {\n      if (!dropdownCtrl) {\n        return;\n      }\n\n      dropdownCtrl.toggleElement = element;\n\n      var toggleDropdown = function toggleDropdown(event) {\n        event.preventDefault();\n\n        if (!element.hasClass('disabled') && !attrs.disabled) {\n          scope.$apply(function () {\n            dropdownCtrl.toggle();\n          });\n        }\n      };\n\n      element.bind('click', toggleDropdown);\n\n      // WAI-ARIA\n      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });\n      scope.$watch(dropdownCtrl.isOpen, function (isOpen) {\n        element.attr('aria-expanded', !!isOpen);\n      });\n\n      scope.$on('$destroy', function () {\n        element.unbind('click', toggleDropdown);\n      });\n    }\n  };\n});",null]}