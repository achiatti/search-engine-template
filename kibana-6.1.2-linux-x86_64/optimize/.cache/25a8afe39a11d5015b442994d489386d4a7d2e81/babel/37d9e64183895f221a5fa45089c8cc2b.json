{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/range.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/range.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRange = parseRange;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Regexp portion that matches our number\n *\n * supports:\n *   -100\n *   -100.0\n *   0\n *   0.10\n *   Infinity\n *   -Infinity\n *\n * @type {String}\n */\nvar _RE_NUMBER = '(\\\\-?(?:\\\\d+(?:\\\\.\\\\d+)?|Infinity))';\n\n/**\n * Regexp for the interval notation\n *\n * supports:\n *   [num, num]\n *   ( num , num ]\n *   [Infinity,num)\n *\n * @type {RegExp}\n */\nvar RANGE_RE = new RegExp('^\\\\s*([\\\\[|\\\\(])\\\\s*' + _RE_NUMBER + '\\\\s*,\\\\s*' + _RE_NUMBER + '\\\\s*([\\\\]|\\\\)])\\\\s*$');\n\nfunction parseRange(input) {\n\n  var match = String(input).match(RANGE_RE);\n  if (!match) {\n    throw new TypeError('expected input to be in interval notation eg. (100, 200]');\n  }\n\n  return new Range(match[1] === '[', parseFloat(match[2]), parseFloat(match[3]), match[4] === ']');\n}\n\nfunction Range() /* minIncl, min, max, maxIncl */{\n  var args = _lodash2.default.toArray(arguments);\n  if (args[1] > args[2]) args.reverse();\n\n  this.minInclusive = args[0];\n  this.min = args[1];\n  this.max = args[2];\n  this.maxInclusive = args[3];\n}\n\nRange.prototype.within = function (n) {\n  if (this.min === n && !this.minInclusive) return false;\n  if (this.min > n) return false;\n\n  if (this.max === n && !this.maxInclusive) return false;\n  if (this.max < n) return false;\n\n  return true;\n};",null]}