{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/is.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/is.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\nexports.toKueryExpression = toKueryExpression;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _literal = require('../node_types/literal');\n\nvar literal = _interopRequireWildcard(_literal);\n\nvar _phrase = require('ui/filter_manager/lib/phrase');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction buildNodeParams(fieldName, value) {\n  var serializeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'operator';\n\n  if (_lodash2.default.isUndefined(fieldName)) {\n    throw new Error('fieldName is a required argument');\n  }\n  if (_lodash2.default.isUndefined(value)) {\n    throw new Error('value is a required argument');\n  }\n\n  return {\n    arguments: [literal.buildNode(fieldName), literal.buildNode(value)],\n    serializeStyle: serializeStyle\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _node$arguments = _slicedToArray(node.arguments, 2),\n      fieldNameArg = _node$arguments[0],\n      valueArg = _node$arguments[1];\n\n  var fieldName = literal.toElasticsearchQuery(fieldNameArg);\n  var field = indexPattern.fields.byName[fieldName];\n  var value = !_lodash2.default.isUndefined(valueArg) ? literal.toElasticsearchQuery(valueArg) : valueArg;\n\n  if (field && field.scripted) {\n    return {\n      script: _extends({}, (0, _phrase.getPhraseScript)(field, value))\n    };\n  } else if (fieldName === null) {\n    return {\n      multi_match: {\n        query: value,\n        type: 'phrase',\n        lenient: true\n      }\n    };\n  } else if (fieldName === '*' && value === '*') {\n    return { match_all: {} };\n  } else if (fieldName === '*' && value !== '*') {\n    return {\n      multi_match: {\n        query: value,\n        fields: ['*'],\n        type: 'phrase',\n        lenient: true\n      }\n    };\n  } else if (fieldName !== '*' && value === '*') {\n    return {\n      exists: { field: fieldName }\n    };\n  } else {\n    return {\n      match_phrase: _defineProperty({}, fieldName, value)\n    };\n  }\n}\n\nfunction toKueryExpression(node) {\n  if (node.serializeStyle !== 'operator') {\n    throw new Error('Cannot serialize \"is\" function as \"' + node.serializeStyle + '\"');\n  }\n\n  var _node$arguments2 = _slicedToArray(node.arguments, 2),\n      fieldNameArg = _node$arguments2[0],\n      valueArg = _node$arguments2[1];\n\n  var fieldName = literal.toKueryExpression(fieldNameArg);\n  var value = !_lodash2.default.isUndefined(valueArg) ? literal.toKueryExpression(valueArg) : valueArg;\n\n  return fieldName + ':' + value;\n}",null]}