{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/filter_manager/phrase_filter_manager.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/filter_manager/phrase_filter_manager.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhraseFilterManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _filter_manager = require('./filter_manager.js');\n\nvar _phrase = require('ui/filter_manager/lib/phrase');\n\nvar _phrases = require('ui/filter_manager/lib/phrases');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EMPTY_VALUE = '';\n\nvar PhraseFilterManager = exports.PhraseFilterManager = function (_FilterManager) {\n  _inherits(PhraseFilterManager, _FilterManager);\n\n  function PhraseFilterManager(controlId, fieldName, indexPattern, queryFilter, delimiter) {\n    _classCallCheck(this, PhraseFilterManager);\n\n    var _this = _possibleConstructorReturn(this, (PhraseFilterManager.__proto__ || Object.getPrototypeOf(PhraseFilterManager)).call(this, controlId, fieldName, indexPattern, queryFilter, EMPTY_VALUE));\n\n    _this.delimiter = delimiter;\n    return _this;\n  }\n\n  /**\n   * Convert phrases into filter\n   *\n   * @param {string} react-select value (delimiter-separated string of values)\n   * @return {object} query filter\n   *   single phrase: match query\n   *   multiple phrases: bool query with should containing list of match_phrase queries\n   */\n\n\n  _createClass(PhraseFilterManager, [{\n    key: 'createFilter',\n    value: function createFilter(value) {\n      var phrases = value.split(this.delimiter);\n      var newFilter = void 0;\n      if (phrases.length === 1) {\n        newFilter = (0, _phrase.buildPhraseFilter)(this.indexPattern.fields.byName[this.fieldName], phrases[0], this.indexPattern);\n      } else {\n        newFilter = (0, _phrases.buildPhrasesFilter)(this.indexPattern.fields.byName[this.fieldName], phrases, this.indexPattern);\n      }\n      newFilter.meta.controlledBy = this.controlId;\n      return newFilter;\n    }\n  }, {\n    key: 'getValueFromFilterBar',\n    value: function getValueFromFilterBar() {\n      var _this2 = this;\n\n      var kbnFilters = this.findFilters();\n      if (kbnFilters.length === 0) {\n        return this.getUnsetValue();\n      } else {\n        var values = kbnFilters.map(function (kbnFilter) {\n          return _this2._getValueFromFilter(kbnFilter);\n        });\n        return values.join(this.delimiter);\n      }\n    }\n  }, {\n    key: '_getValueFromFilter',\n    value: function _getValueFromFilter(kbnFilter) {\n      var _this3 = this;\n\n      // bool filter - multiple phrase filters\n      if (_lodash2.default.has(kbnFilter, 'query.bool.should')) {\n        return _lodash2.default.get(kbnFilter, 'query.bool.should').map(function (kbnFilter) {\n          return _this3._getValueFromFilter(kbnFilter);\n        }).filter(function (value) {\n          if (value) {\n            return true;\n          }\n          return false;\n        }).join(this.delimiter);\n      }\n\n      // scripted field filter\n      if (_lodash2.default.has(kbnFilter, 'script')) {\n        return _lodash2.default.get(kbnFilter, 'script.script.params.value', this.getUnsetValue());\n      }\n\n      // single phrase filter\n      if (_lodash2.default.has(kbnFilter, ['query', 'match', this.fieldName])) {\n        return _lodash2.default.get(kbnFilter, ['query', 'match', this.fieldName, 'query'], this.getUnsetValue());\n      }\n\n      // single phrase filter from bool filter\n      if (_lodash2.default.has(kbnFilter, ['match_phrase', this.fieldName])) {\n        return _lodash2.default.get(kbnFilter, ['match_phrase', this.fieldName], this.getUnsetValue());\n      }\n\n      return this.getUnsetValue();\n    }\n  }]);\n\n  return PhraseFilterManager;\n}(_filter_manager.FilterManager);",null]}