{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/routes/route_manager.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/routes/route_manager.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = RouteManager;\n\nvar _lodash = require('lodash');\n\nvar _wrap_route_with_prep = require('./wrap_route_with_prep');\n\nvar _route_setup_manager = require('./route_setup_manager');\n\nvar _breadcrumbs = require('./breadcrumbs');\n\n// eslint-disable-next-line @elastic/kibana-custom/no-default-export\nfunction RouteManager() {\n  var _this = this;\n\n  var self = this;\n  var setup = new _route_setup_manager.RouteSetupManager();\n  var when = [];\n  var defaults = [];\n  var otherwise = void 0;\n\n  self.config = function ($routeProvider) {\n    when.forEach(function (args) {\n      var path = args[0];\n      var route = args[1] || {};\n\n      defaults.forEach(function (def) {\n        if (def.regex.test(path)) {\n          (0, _lodash.defaultsDeep)(route, (0, _lodash.cloneDeep)(def.value));\n        }\n      });\n\n      if (route.reloadOnSearch == null) {\n        route.reloadOnSearch = false;\n      }\n\n      if (route.requireDefaultIndex == null) {\n        route.requireDefaultIndex = false;\n      }\n\n      (0, _wrap_route_with_prep.wrapRouteWithPrep)(route, setup);\n      $routeProvider.when(path, route);\n    });\n\n    if (otherwise) {\n      (0, _wrap_route_with_prep.wrapRouteWithPrep)(otherwise, setup);\n      $routeProvider.otherwise(otherwise);\n    }\n  };\n\n  self.run = function ($location, $route, $injector) {\n    self.getBreadcrumbs = function () {\n      var breadcrumbs = (0, _breadcrumbs.parsePathToBreadcrumbs)($location.path());\n      var map = $route.current.mapBreadcrumbs;\n      return map ? $injector.invoke(map, null, { breadcrumbs: breadcrumbs }) : breadcrumbs;\n    };\n  };\n\n  var wrapSetupAndChain = function wrapSetupAndChain(fn) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    fn.apply(setup, args);\n    return _this;\n  };\n\n  this.addSetupWork = (0, _lodash.wrap)(setup.addSetupWork, wrapSetupAndChain);\n  this.afterSetupWork = (0, _lodash.wrap)(setup.afterSetupWork, wrapSetupAndChain);\n  this.afterWork = (0, _lodash.wrap)(setup.afterWork, wrapSetupAndChain);\n\n  self.when = function (path, route) {\n    when.push([path, route]);\n    return self;\n  };\n\n  // before attaching the routes to the routeProvider, test the RE\n  // against the .when() path and add/override the resolves if there is a match\n  self.defaults = function (regex, value) {\n    defaults.push({ regex: regex, value: value });\n    return self;\n  };\n\n  self.otherwise = function (route) {\n    otherwise = route;\n    return self;\n  };\n\n  self.getBreadcrumbs = function () {\n    // overwritten in self.run();\n    return [];\n  };\n\n  self.RouteManager = RouteManager;\n}\nmodule.exports = exports['default'];",null]}