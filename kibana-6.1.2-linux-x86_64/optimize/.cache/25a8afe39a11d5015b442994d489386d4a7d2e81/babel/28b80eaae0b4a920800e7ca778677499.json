{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/saved_visualizations/saved_visualizations.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/saved_visualizations/saved_visualizations.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nrequire('plugins/kibana/visualize/saved_visualizations/_saved_vis');\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _modules = require('ui/modules');\n\nvar _saved_object_loader = require('ui/courier/saved_object/saved_object_loader');\n\nvar _saved_object_registry = require('plugins/kibana/management/saved_object_registry');\n\nvar app = _modules.uiModules.get('app/visualize');\n\n// Register this service with the saved object registry so it can be\n// edited by the object editor.\n_saved_object_registry.savedObjectManagementRegistry.register({\n  service: 'savedVisualizations',\n  title: 'visualizations'\n});\n\napp.service('savedVisualizations', function (Promise, kbnIndex, SavedVis, Private, kbnUrl, $http) {\n  var visTypes = Private(_vis_types.VisTypesRegistryProvider);\n\n  var saveVisualizationLoader = new _saved_object_loader.SavedObjectLoader(SavedVis, kbnIndex, kbnUrl, $http);\n\n  saveVisualizationLoader.mapHitSource = function (source, id) {\n    source.id = id;\n    source.url = this.urlFor(id);\n\n    var typeName = source.typeName;\n    if (source.visState) {\n      try {\n        typeName = JSON.parse(source.visState).type;\n      } catch (e) {} /* missing typename handled below */ // eslint-disable-line no-empty\n    }\n\n    if (!typeName || !visTypes.byName[typeName]) {\n      source.error = 'Unknown visualization type';\n      return source;\n    }\n\n    source.type = visTypes.byName[typeName];\n    source.icon = source.type.icon;\n    return source;\n  };\n\n  saveVisualizationLoader.urlFor = function (id) {\n    return kbnUrl.eval('#/visualize/edit/{{id}}', { id: id });\n  };\n  return saveVisualizationLoader;\n});",null]}