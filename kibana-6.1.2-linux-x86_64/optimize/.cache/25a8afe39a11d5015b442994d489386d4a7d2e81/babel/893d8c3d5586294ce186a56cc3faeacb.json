{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/actions/embeddables.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/actions/embeddables.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.embeddableRenderError = exports.embeddableRenderFinished = exports.destroyEmbeddable = undefined;\nexports.renderEmbeddable = renderEmbeddable;\n\nvar _reduxActions = require('redux-actions');\n\nvar destroyEmbeddable = exports.destroyEmbeddable = (0, _reduxActions.createAction)('DESTROY_EMBEDDABLE',\n/**\n *\n * @param panelId {string}\n * @param embeddableFactory {EmbeddableFactory}\n * @return {string} - the panel id\n */\nfunction (panelId, embeddableFactory) {\n  if (embeddableFactory) {\n    embeddableFactory.destroy(panelId);\n  }\n  return panelId;\n});\n\nvar embeddableRenderFinished = exports.embeddableRenderFinished = (0, _reduxActions.createAction)('EMBEDDABLE_RENDER_FINISHED',\n/**\n * @param panelId {string}\n * @param embeddable {Embeddable}\n */\nfunction (panelId, embeddable) {\n  return { embeddable: embeddable, panelId: panelId };\n});\n\nvar embeddableRenderError = exports.embeddableRenderError = (0, _reduxActions.createAction)('EMBEDDABLE_RENDER_ERROR',\n/**\n *\n * @param panelId {string}\n * @param error {string|object}\n */\nfunction (panelId, error) {\n  return { panelId: panelId, error: error };\n});\n\n/**\n *\n * @param embeddableFactory {EmbeddableFactory}\n * @param panelElement {Node}\n * @param panel {PanelState}\n * @param containerApi {ContainerAPI}\n * @return {function(*, *)}\n */\nfunction renderEmbeddable(embeddableFactory, panelElement, panel, containerApi) {\n  return function (dispatch) {\n    if (!embeddableFactory) {\n      dispatch(embeddableRenderError(panel.panelIndex, new Error('Invalid embeddable type \"' + panel.type + '\"')));\n      return;\n    }\n\n    return embeddableFactory.render(panelElement, panel, containerApi).then(function (embeddable) {\n      return dispatch(embeddableRenderFinished(panel.panelIndex, embeddable));\n    }).catch(function (error) {\n      dispatch(embeddableRenderError(panel.panelIndex, error.message));\n    });\n  };\n}",null]}