{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/template.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/template.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (chrome, internals) {\n\n  /**\n   * ui/chrome Template API\n   *\n   *   Root Template\n   *     The root template is rendered within the primary chrome ui and should\n   *     be used when building an app that is more of a page, or to override the\n   *     placement of ng-view. When including a root template, the mark-up will\n   *     look something like this:\n   *\n   *     body\n   *       notifs\n   *       div.content\n   *         nav\n   *         config\n   *         div.application\n   *           <-- your template here -->\n   *\n   *   Root Controller\n   *     To attach a controller to the root of ui/chrome's content area, outside of\n   *     where it attaches the ng-view directive (assuming no rootTemplate is used)\n   *     which will allow cause the controller to persist across views or make for\n   *     a simple place to define some quick global functionality for a very simple\n   *     app (like the status page).\n   */\n\n  /**\n   * @param {string} template\n   * @return {chrome}\n   */\n  chrome.setRootTemplate = function (template) {\n    internals.rootTemplate = template;\n    return chrome;\n  };\n\n  /**\n   * @param {string} as - the name that the controller should bind to\n   * @param {Function} controller - the controller initializer function\n   * @return {chrome}\n   */\n  chrome.setRootController = function (as, controllerName) {\n    if (controllerName === undefined) {\n      controllerName = as;\n      as = null;\n    }\n\n    if (typeof controllerName === 'function') {\n      chrome.$$rootControllerConstruct = controllerName;\n      controllerName = 'chrome.$$rootControllerConstruct';\n    }\n\n    internals.rootController = controllerName + (as ? ' as ' + as : '');\n    return chrome;\n  };\n};\n\nmodule.exports = exports['default']; // eslint-disable-next-line @elastic/kibana-custom/no-default-export",null]}