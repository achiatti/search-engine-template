{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/components/color/mapped_colors.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/components/color/mapped_colors.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VisColorMappedColorsProvider = VisColorMappedColorsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _color_palette = require('./color_palette');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VisColorMappedColorsProvider(config, $rootScope) {\n  var standardizeColor = function standardizeColor(color) {\n    return _d2.default.rgb(color).toString();\n  };\n  function getConfigColorMapping() {\n    return _lodash2.default.mapValues(config.get('visualization:colorMapping'), standardizeColor);\n  }\n\n  /*\n   * Maintains a lookup table that associates the value (key) with a hex color (value)\n   * across the visualizations.\n   * Provides functions to interact with the lookup table\n   */\n\n  var MappedColors = function () {\n    function MappedColors() {\n      var _this = this;\n\n      _classCallCheck(this, MappedColors);\n\n      $rootScope.$on('$routeChangeStart', function () {\n        return _this.purge();\n      });\n      this.oldMap = {};\n      this.mapping = {};\n    }\n\n    _createClass(MappedColors, [{\n      key: 'get',\n      value: function get(key) {\n        return getConfigColorMapping()[key] || this.mapping[key];\n      }\n    }, {\n      key: 'flush',\n      value: function flush() {\n        this.oldMap = _lodash2.default.clone(this.mapping);\n        this.mapping = {};\n      }\n    }, {\n      key: 'purge',\n      value: function purge() {\n        this.oldMap = {};\n        this.mapping = {};\n      }\n    }, {\n      key: 'mapKeys',\n      value: function mapKeys(keys) {\n        var _this2 = this;\n\n        var configMapping = getConfigColorMapping();\n        var configColors = _lodash2.default.values(configMapping);\n        var oldColors = _lodash2.default.values(this.oldMap);\n\n        var keysToMap = [];\n        _lodash2.default.each(keys, function (key) {\n          // If this key is mapped in the config, it's unnecessary to have it mapped here\n          if (configMapping[key]) delete _this2.mapping[key];\n\n          // If this key is mapped to a color used by the config color mapping, we need to remap it\n          if (_lodash2.default.contains(configColors, _this2.mapping[key])) keysToMap.push(key);\n\n          // if key exist in oldMap, move it to mapping\n          if (_this2.oldMap[key]) _this2.mapping[key] = _this2.oldMap[key];\n\n          // If this key isn't mapped, we need to map it\n          if (_this2.get(key) == null) keysToMap.push(key);\n        });\n\n        // Generate a color palette big enough that all new keys can have unique color values\n        var allColors = (0, _lodash2.default)(this.mapping).values().union(configColors).union(oldColors).value();\n        var colorPalette = (0, _color_palette.createColorPalette)(allColors.length + keysToMap.length);\n        var newColors = _lodash2.default.difference(colorPalette, allColors);\n\n        while (keysToMap.length > newColors.length) {\n          newColors = newColors.concat(_lodash2.default.sample(allColors, keysToMap.length - newColors.length));\n        }\n\n        _lodash2.default.merge(this.mapping, _lodash2.default.zipObject(keysToMap, newColors));\n      }\n    }]);\n\n    return MappedColors;\n  }();\n\n  return new MappedColors();\n}",null]}