{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/sense_editor/mode/input_highlight_rules.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/sense_editor/mode/input_highlight_rules.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.InputHighlightRules = InputHighlightRules;\nvar ace = require('ace');\nvar x_json = require('./x_json_highlight_rules');\n\nvar oop = ace.require(\"ace/lib/oop\");\nvar TextHighlightRules = ace.require(\"ace/mode/text_highlight_rules\").TextHighlightRules;\n\nfunction InputHighlightRules() {\n  function mergeTokens() /* ... */{\n    return [].concat.apply([], arguments);\n  }\n\n  function addEOL(tokens, reg, nextIfEOL, normalNext) {\n    if ((typeof reg === 'undefined' ? 'undefined' : _typeof(reg)) == \"object\") {\n      reg = reg.source;\n    }\n    return [{ token: tokens.concat([\"whitespace\"]), regex: reg + \"(\\\\s*)$\", next: nextIfEOL }, { token: tokens, regex: reg, next: normalNext }];\n  }\n\n  // regexp must not have capturing parentheses. Use (?:) instead.\n  // regexps are ordered -> the first match is used\n  /*jshint -W015 */\n  this.$rules = {\n    \"start\": mergeTokens([{ \"token\": \"warning\", \"regex\": \"#!.*$\" }, { token: \"comment\", regex: /^#.*$/ }, { token: \"paren.lparen\", regex: \"{\", next: \"json\", push: true }], addEOL([\"method\"], /([a-zA-Z]+)/, \"start\", \"method_sep\"), [{\n      token: \"whitespace\",\n      regex: \"\\\\s+\"\n    }, {\n      token: \"text\",\n      regex: \".+?\"\n    }]),\n    \"method_sep\": mergeTokens(addEOL([\"whitespace\", \"url.protocol_host\", \"url.slash\"], /(\\s+)(https?:\\/\\/[^?\\/,]+)(\\/)/, \"start\", \"url\"), addEOL([\"whitespace\", \"url.protocol_host\"], /(\\s+)(https?:\\/\\/[^?\\/,]+)/, \"start\", \"url\"), addEOL([\"whitespace\", \"url.slash\"], /(\\s+)(\\/)/, \"start\", \"url\"), addEOL([\"whitespace\"], /(\\s+)/, \"start\", \"url\")),\n    \"url\": mergeTokens(addEOL([\"url.part\"], /([^?\\/,\\s]+)/, \"start\"), addEOL([\"url.comma\"], /(,)/, \"start\"), addEOL([\"url.slash\"], /(\\/)/, \"start\"), addEOL([\"url.questionmark\"], /(\\?)/, \"start\", \"urlParams\")),\n    \"urlParams\": mergeTokens(addEOL([\"url.param\", \"url.equal\", \"url.value\"], /([^&=]+)(=)([^&]*)/, \"start\"), addEOL([\"url.param\"], /([^&=]+)/, \"start\"), addEOL([\"url.amp\"], /(&)/, \"start\"))\n  };\n\n  x_json.addToRules(this);\n\n  if (this.constructor === InputHighlightRules) {\n    this.normalizeRules();\n  }\n}\n\noop.inherits(InputHighlightRules, TextHighlightRules);",null]}