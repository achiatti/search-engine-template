{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/hierarchical/build_hierarchical_data.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/hierarchical/build_hierarchical_data.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BuildHierarchicalDataProvider = BuildHierarchicalDataProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _extract_buckets = require('ui/agg_response/hierarchical/_extract_buckets');\n\nvar _create_raw_data = require('ui/agg_response/hierarchical/_create_raw_data');\n\nvar _array_to_linked_list = require('ui/agg_response/hierarchical/_array_to_linked_list');\n\nvar _agg_config_result = require('ui/vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nvar _build_split = require('ui/agg_response/hierarchical/_build_split');\n\nvar _hierarchical_tooltip_formatter = require('ui/agg_response/hierarchical/_hierarchical_tooltip_formatter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction BuildHierarchicalDataProvider(Private, Notifier) {\n  var buildSplit = Private(_build_split.AggResponseHierarchicalBuildSplitProvider);\n  var tooltipFormatter = Private(_hierarchical_tooltip_formatter.HierarchicalTooltipFormatterProvider);\n\n  var notify = new Notifier({\n    location: 'Pie chart response converter'\n  });\n\n  return function (vis, resp) {\n    // Create a refrenece to the buckets\n    var buckets = vis.getAggConfig().bySchemaGroup.buckets;\n\n    // Find the metric so it's easier to reference.\n    // TODO: Change this to support multiple metrics.\n    var metric = vis.getAggConfig().bySchemaGroup.metrics[0];\n\n    // Link each agg to the next agg. This will be\n    // to identify the next bucket aggregation\n    buckets = (0, _array_to_linked_list.arrayToLinkedList)(buckets);\n\n    // Create the raw data to be used in the spy panel\n    var raw = (0, _create_raw_data.createRawData)(vis, resp);\n\n    // If buckets is falsy then we should just return the aggs\n    if (!buckets) {\n      var label = 'Count';\n      var value = resp.aggregations && resp.aggregations[metric.id] && resp.aggregations[metric.id].value || resp.hits.total;\n      return {\n        hits: resp.hits.total,\n        raw: raw,\n        names: [label],\n        tooltipFormatter: tooltipFormatter(raw.columns),\n        slices: {\n          children: [{ name: label, size: value }]\n        }\n      };\n    }\n\n    var firstAgg = buckets[0];\n    var aggData = resp.aggregations ? resp.aggregations[firstAgg.id] : null;\n\n    if (!firstAgg._next && firstAgg.schema.name === 'split') {\n      notify.error('Splitting charts without splitting slices is not supported. Pretending that we are just splitting slices.');\n    }\n\n    // start with splitting slices\n    if (!firstAgg._next || firstAgg.schema.name === 'segment') {\n      var split = buildSplit(firstAgg, metric, aggData);\n      split.hits = resp.hits.total;\n      split.raw = raw;\n      split.tooltipFormatter = tooltipFormatter(raw.columns);\n      return split;\n    }\n\n    // map the split aggregations into rows.\n    var rows = _lodash2.default.map((0, _extract_buckets.extractBuckets)(aggData, firstAgg), function (bucket) {\n      var agg = firstAgg._next;\n      var split = buildSplit(agg, metric, bucket[agg.id]);\n      // Since splits display labels we need to set it.\n      split.label = firstAgg.fieldFormatter()(agg.getKey(bucket));\n\n      var displayName = firstAgg.getFieldDisplayName();\n      if (!_lodash2.default.isEmpty(displayName)) split.label += ': ' + displayName;\n\n      split.tooltipFormatter = tooltipFormatter(raw.columns);\n      var aggConfigResult = new _agg_config_result2.default(firstAgg, null, null, firstAgg.getKey(bucket));\n      split.split = { aggConfig: firstAgg, aggConfigResult: aggConfigResult, key: bucket.key };\n      _lodash2.default.each(split.slices.children, function (child) {\n        child.aggConfigResult.$parent = aggConfigResult;\n      });\n      return split;\n    });\n\n    var result = { hits: resp.hits.total, raw: raw };\n    if (firstAgg.params.row) {\n      result.rows = rows;\n    } else {\n      result.columns = rows;\n    }\n\n    return result;\n  };\n}",null]}