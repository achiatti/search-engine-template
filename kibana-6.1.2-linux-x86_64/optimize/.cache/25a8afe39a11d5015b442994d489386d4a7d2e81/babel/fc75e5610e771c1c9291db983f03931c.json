{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/paginate.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/paginate.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _paginate_controls = require('ui/partials/paginate_controls.html');\n\nvar _paginate_controls2 = _interopRequireDefault(_paginate_controls);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').directive('paginate', function ($parse, $compile) {\n  return {\n    restrict: 'E',\n    scope: true,\n    link: {\n      pre: function pre($scope, $el, attrs) {\n        if (_lodash2.default.isUndefined(attrs.bottomControls)) attrs.bottomControls = true;\n        if ($el.find('paginate-controls.paginate-bottom').size() === 0 && attrs.bottomControls) {\n          $el.append($compile('<paginate-controls class=\"paginate-bottom\">')($scope));\n        }\n      },\n      post: function post($scope, $el, attrs) {\n        if (_lodash2.default.isUndefined(attrs.topControls)) attrs.topControls = false;\n        if ($el.find('paginate-controls.paginate-top').size() === 0 && attrs.topControls) {\n          $el.prepend($compile('<paginate-controls class=\"paginate-top\">')($scope));\n        }\n\n        var paginate = $scope.paginate;\n\n        // add some getters to the controller powered by attributes\n        paginate.getList = $parse(attrs.list);\n        paginate.perPageProp = attrs.perPageProp;\n\n        if (attrs.perPage) {\n          paginate.perPage = attrs.perPage;\n          $scope.showSelector = false;\n        } else {\n          $scope.showSelector = true;\n        }\n\n        paginate.otherWidthGetter = $parse(attrs.otherWidth);\n\n        paginate.init();\n      }\n    },\n    controllerAs: 'paginate',\n    controller: function controller($scope, $document) {\n      var self = this;\n      var ALL = 0;\n\n      self.sizeOptions = [{ title: '10', value: 10 }, { title: '25', value: 25 }, { title: '100', value: 100 }, { title: 'All', value: ALL }];\n\n      // setup the watchers, called in the post-link function\n      self.init = function () {\n\n        self.perPage = _lodash2.default.parseInt(self.perPage) || $scope[self.perPageProp];\n\n        $scope.$watchMulti(['paginate.perPage', self.perPageProp, self.otherWidthGetter], function (vals, oldVals) {\n          var intChanges = vals[0] !== oldVals[0];\n\n          if (intChanges) {\n            if (!setPerPage(self.perPage)) {\n              // if we are not able to set the external value,\n              // render now, otherwise wait for the external value\n              // to trigger the watcher again\n              self.renderList();\n            }\n            return;\n          }\n\n          self.perPage = _lodash2.default.parseInt(self.perPage) || $scope[self.perPageProp];\n          if (self.perPage == null) {\n            self.perPage = ALL;\n            return;\n          }\n\n          self.renderList();\n        });\n\n        $scope.$watch('page', self.changePage);\n        $scope.$watchCollection(self.getList, function (list) {\n          $scope.list = list;\n          self.renderList();\n        });\n      };\n\n      self.goToPage = function (number) {\n        if (number) {\n          if (number.hasOwnProperty('number')) number = number.number;\n          $scope.page = $scope.pages[number - 1] || $scope.pages[0];\n        }\n      };\n\n      self.goToTop = function goToTop() {\n        $document.scrollTop(0);\n      };\n\n      self.renderList = function () {\n        $scope.pages = [];\n        if (!$scope.list) return;\n\n        var perPage = _lodash2.default.parseInt(self.perPage);\n        var count = perPage ? Math.ceil($scope.list.length / perPage) : 1;\n\n        _lodash2.default.times(count, function (i) {\n          var page = void 0;\n\n          if (perPage) {\n            var start = perPage * i;\n            page = $scope.list.slice(start, start + perPage);\n          } else {\n            page = $scope.list.slice(0);\n          }\n\n          page.number = i + 1;\n          page.i = i;\n\n          page.count = count;\n          page.first = page.number === 1;\n          page.last = page.number === count;\n          page.firstItem = (page.number - 1) * perPage + 1;\n          page.lastItem = Math.min(page.number * perPage, $scope.list.length);\n\n          page.prev = $scope.pages[i - 1];\n          if (page.prev) page.prev.next = page;\n\n          $scope.pages.push(page);\n        });\n\n        // set the new page, or restore the previous page number\n        if ($scope.page && $scope.page.i < $scope.pages.length) {\n          $scope.page = $scope.pages[$scope.page.i];\n        } else {\n          $scope.page = $scope.pages[0];\n        }\n\n        if ($scope.page && $scope.onPageChanged) {\n          $scope.onPageChanged($scope.page);\n        }\n      };\n\n      self.changePage = function (page) {\n        if (!page) {\n          $scope.otherPages = null;\n          return;\n        }\n\n        // setup the list of the other pages to link to\n        $scope.otherPages = [];\n        var width = +self.otherWidthGetter($scope) || 5;\n        var left = page.i - Math.round((width - 1) / 2);\n        var right = left + width - 1;\n\n        // shift neg count from left to right\n        if (left < 0) {\n          right += 0 - left;\n          left = 0;\n        }\n\n        // shift extra right nums to left\n        var lastI = page.count - 1;\n        if (right > lastI) {\n          right = lastI;\n          left = right - width + 1;\n        }\n\n        for (var i = left; i <= right; i++) {\n          var other = $scope.pages[i];\n\n          if (!other) continue;\n\n          $scope.otherPages.push(other);\n          if (other.last) $scope.otherPages.containsLast = true;\n          if (other.first) $scope.otherPages.containsFirst = true;\n        }\n\n        if ($scope.onPageChanged) {\n          $scope.onPageChanged($scope.page);\n        }\n      };\n\n      function setPerPage(val) {\n        var $ppParent = $scope;\n\n        while ($ppParent && !_lodash2.default.has($ppParent, self.perPageProp)) {\n          $ppParent = $ppParent.$parent;\n        }\n\n        if ($ppParent) {\n          $ppParent[self.perPageProp] = val;\n          return true;\n        }\n      }\n    }\n  };\n}).directive('paginateControls', function () {\n  // this directive is automatically added by paginate if not found within it's $el\n  return {\n    restrict: 'E',\n    template: _paginate_controls2.default\n  };\n});",null]}