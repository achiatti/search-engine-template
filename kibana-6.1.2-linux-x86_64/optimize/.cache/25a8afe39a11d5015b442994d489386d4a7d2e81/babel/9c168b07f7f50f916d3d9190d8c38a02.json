{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/geohash_layer.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/geohash_layer.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GeohashLayer = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _kibana_map_layer = require('./kibana_map_layer');\n\nvar _heatmap = require('./markers/heatmap');\n\nvar _scaled_circles = require('./markers/scaled_circles');\n\nvar _shaded_circles = require('./markers/shaded_circles');\n\nvar _geohash_grid = require('./markers/geohash_grid');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar GeohashLayer = exports.GeohashLayer = function (_KibanaMapLayer) {\n  _inherits(GeohashLayer, _KibanaMapLayer);\n\n  function GeohashLayer(featureCollection, options, zoom, kibanaMap) {\n    _classCallCheck(this, GeohashLayer);\n\n    var _this = _possibleConstructorReturn(this, (GeohashLayer.__proto__ || Object.getPrototypeOf(GeohashLayer)).call(this));\n\n    _this._geohashGeoJson = featureCollection;\n    _this._geohashOptions = options;\n    _this._zoom = zoom;\n    _this._kibanaMap = kibanaMap;\n    var geojson = _leaflet2.default.geoJson(_this._geohashGeoJson);\n    _this._bounds = geojson.getBounds();\n    _this._createGeohashMarkers();\n    _this._lastBounds = null;\n    return _this;\n  }\n\n  _createClass(GeohashLayer, [{\n    key: '_createGeohashMarkers',\n    value: function _createGeohashMarkers() {\n      var _this2 = this;\n\n      var markerOptions = {\n        isFilteredByCollar: this._geohashOptions.isFilteredByCollar,\n        valueFormatter: this._geohashOptions.valueFormatter,\n        tooltipFormatter: this._geohashOptions.tooltipFormatter\n      };\n      switch (this._geohashOptions.mapType) {\n        case 'Scaled Circle Markers':\n          this._geohashMarkers = new _scaled_circles.ScaledCirclesMarkers(this._geohashGeoJson, markerOptions, this._zoom, this._kibanaMap);\n          break;\n        case 'Shaded Circle Markers':\n          this._geohashMarkers = new _shaded_circles.ShadedCirclesMarkers(this._geohashGeoJson, markerOptions, this._zoom, this._kibanaMap);\n          break;\n        case 'Shaded Geohash Grid':\n          this._geohashMarkers = new _geohash_grid.GeohashGridMarkers(this._geohashGeoJson, markerOptions, this._zoom, this._kibanaMap);\n          break;\n        case 'Heatmap':\n          var radius = 15;\n          if (this._geohashGeoJson.properties.geohashGridDimensionsAtEquator) {\n            var minGridLength = _lodash2.default.min(this._geohashGeoJson.properties.geohashGridDimensionsAtEquator);\n            var metersPerPixel = this._kibanaMap.getMetersPerPixel();\n            radius = minGridLength / metersPerPixel / 2;\n          }\n          radius = radius * parseFloat(this._geohashOptions.heatmap.heatClusterSize);\n          this._geohashMarkers = new _heatmap.HeatmapMarkers(this._geohashGeoJson, {\n            radius: radius,\n            blur: radius,\n            maxZoom: this._kibanaMap.getZoomLevel(),\n            minOpacity: 0.1,\n            tooltipFormatter: this._geohashOptions.tooltipFormatter\n          }, this._zoom, this._kibanaMap);\n          break;\n        default:\n          throw new Error(this._geohashOptions.mapType + ' mapType not recognized');\n\n      }\n\n      this._geohashMarkers.on('showTooltip', function (event) {\n        return _this2.emit('showTooltip', event);\n      });\n      this._geohashMarkers.on('hideTooltip', function (event) {\n        return _this2.emit('hideTooltip', event);\n      });\n      this._leafletLayer = this._geohashMarkers.getLeafletLayer();\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents(jqueryDiv) {\n      return this._geohashMarkers.appendLegendContents(jqueryDiv);\n    }\n  }, {\n    key: 'movePointer',\n    value: function movePointer() {\n      var _geohashMarkers;\n\n      (_geohashMarkers = this._geohashMarkers).movePointer.apply(_geohashMarkers, arguments);\n    }\n  }, {\n    key: 'getBounds',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var geoHashBounds, northEast, southWest, leaftetBounds;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._geohashOptions.fetchBounds) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 3;\n                return this._geohashOptions.fetchBounds();\n\n              case 3:\n                geoHashBounds = _context.sent;\n\n                if (!geoHashBounds) {\n                  _context.next = 9;\n                  break;\n                }\n\n                northEast = _leaflet2.default.latLng(geoHashBounds.top_left.lat, geoHashBounds.bottom_right.lon);\n                southWest = _leaflet2.default.latLng(geoHashBounds.bottom_right.lat, geoHashBounds.top_left.lon);\n                leaftetBounds = _leaflet2.default.latLngBounds(southWest, northEast);\n                return _context.abrupt('return', leaftetBounds);\n\n              case 9:\n                return _context.abrupt('return', this._bounds);\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBounds() {\n        return _ref.apply(this, arguments);\n      }\n\n      return getBounds;\n    }()\n  }, {\n    key: 'updateExtent',\n    value: function updateExtent() {\n      // Client-side filtering is only enabled when server-side filter is not used\n      if (!this._geohashOptions.isFilteredByCollar) {\n        var bounds = this._kibanaMap.getLeafletBounds();\n        if (!this._lastBounds || !this._lastBounds.equals(bounds)) {\n          //this removal is required to trigger the bounds filter again\n          this._kibanaMap.removeLayer(this);\n          this._createGeohashMarkers();\n          this._kibanaMap.addLayer(this);\n        }\n        this._lastBounds = bounds;\n      }\n    }\n  }, {\n    key: 'isReusable',\n    value: function isReusable(options) {\n\n      if (_lodash2.default.isEqual(this._geohashOptions, options)) {\n        return true;\n      }\n\n      if (this._geohashOptions.mapType !== options.mapType) {\n        return false;\n      } else if (this._geohashOptions.mapType === 'Heatmap' && !_lodash2.default.isEqual(this._geohashOptions.heatmap, options)) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }]);\n\n  return GeohashLayer;\n}(_kibana_map_layer.KibanaMapLayer);",null]}