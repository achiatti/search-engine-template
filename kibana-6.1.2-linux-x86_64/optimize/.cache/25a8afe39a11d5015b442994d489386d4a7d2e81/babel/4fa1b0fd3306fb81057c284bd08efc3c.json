{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/timelion/public/app.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/timelion/public/app.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nvar _doc_title = require('ui/doc_title');\n\nvar _saved_object_registry = require('ui/saved_objects/saved_object_registry');\n\nvar _notify = require('ui/notify');\n\nvar _timezone = require('ui/vis/lib/timezone');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nrequire('plugins/timelion/directives/cells/cells');\nrequire('plugins/timelion/directives/fixed_element');\nrequire('plugins/timelion/directives/fullscreen/fullscreen');\nrequire('plugins/timelion/directives/timelion_expression_input');\nrequire('plugins/timelion/directives/timelion_help/timelion_help');\nrequire('plugins/timelion/directives/timelion_interval/timelion_interval');\n\nrequire('plugins/timelion/app.less');\n\ndocument.title = 'Timelion - Kibana';\n\nrequire('ui/chrome');\n\nvar app = require('ui/modules').get('apps/timelion', []);\n\nrequire('plugins/timelion/services/saved_sheets');\nrequire('plugins/timelion/services/_saved_sheet');\n\nrequire('./vis');\n\n_saved_object_registry.SavedObjectRegistryProvider.register(require('plugins/timelion/services/saved_sheet_register'));\n\nvar unsafeNotifications = _notify.notify._notifs;\n\nrequire('ui/routes').enable();\n\nrequire('ui/routes').when('/:id?', {\n  template: require('plugins/timelion/index.html'),\n  reloadOnSearch: false,\n  resolve: {\n    savedSheet: function savedSheet(courier, savedSheets, $route) {\n      return savedSheets.get($route.current.params.id).catch(courier.redirectWhenMissing({\n        'search': '/'\n      }));\n    }\n  }\n});\n\napp.controller('timelion', function ($http, $route, $routeParams, $scope, $timeout, AppState, config, confirmModal, courier, kbnUrl, Notifier, Private, timefilter) {\n\n  // Keeping this at app scope allows us to keep the current page when the user\n  // switches to say, the timepicker.\n  $scope.page = config.get('timelion:showTutorial', true) ? 1 : 0;\n  $scope.setPage = function (page) {\n    return $scope.page = page;\n  };\n\n  // TODO: For some reason the Kibana core doesn't correctly do this for all apps.\n  _momentTimezone2.default.tz.setDefault(config.get('dateFormat:tz'));\n\n  timefilter.enabled = true;\n  var notify = new Notifier({\n    location: 'Timelion'\n  });\n\n  var savedVisualizations = Private(_saved_object_registry.SavedObjectRegistryProvider).byLoaderPropertiesName.visualizations;\n  var timezone = Private(_timezone.timezoneProvider)();\n  var docTitle = Private(_doc_title.DocTitleProvider);\n\n  var defaultExpression = '.es(*)';\n  var savedSheet = $route.current.locals.savedSheet;\n\n  $scope.topNavMenu = [{\n    key: 'new',\n    description: 'New Sheet',\n    run: function run() {\n      kbnUrl.change('/');\n    },\n    testId: 'timelionNewButton'\n  }, {\n    key: 'add',\n    description: 'Add a chart',\n    run: function run() {\n      $scope.newCell();\n    },\n    testId: 'timelionAddChartButton'\n  }, {\n    key: 'save',\n    description: 'Save Sheet',\n    template: require('plugins/timelion/partials/save_sheet.html'),\n    testId: 'timelionSaveButton'\n  }, {\n    key: 'delete',\n    description: 'Delete current sheet',\n    disableButton: function disableButton() {\n      return !savedSheet.id;\n    },\n    run: function run() {\n      var title = savedSheet.title;\n      function doDelete() {\n        savedSheet.delete().then(function () {\n          notify.info('Deleted ' + title);\n          kbnUrl.change('/');\n        }).catch(notify.fatal);\n      }\n\n      var confirmModalOptions = {\n        onConfirm: doDelete,\n        confirmButtonText: 'Delete sheet'\n      };\n      confirmModal('Are you sure you want to delete the sheet ' + title + '?', confirmModalOptions);\n    },\n    testId: 'timelionDeleteButton'\n  }, {\n    key: 'open',\n    description: 'Open Sheet',\n    template: require('plugins/timelion/partials/load_sheet.html'),\n    testId: 'timelionOpenButton'\n  }, {\n    key: 'options',\n    description: 'Options',\n    template: require('plugins/timelion/partials/sheet_options.html'),\n    testId: 'timelionOptionsButton'\n  }, {\n    key: 'help',\n    description: 'Help',\n    template: '<timelion-help></timelion-help>',\n    testId: 'timelionDocsButton'\n  }];\n\n  $timeout(function () {\n    if (config.get('timelion:showTutorial', true)) {\n      $scope.kbnTopNav.open('help');\n    }\n  }, 0);\n\n  $scope.transient = {};\n  $scope.state = new AppState(getStateDefaults());\n  function getStateDefaults() {\n    return {\n      sheet: savedSheet.timelion_sheet,\n      selected: 0,\n      columns: savedSheet.timelion_columns,\n      rows: savedSheet.timelion_rows,\n      interval: savedSheet.timelion_interval\n    };\n  }\n\n  var init = function init() {\n    $scope.running = false;\n    $scope.search();\n\n    $scope.$listen($scope.state, 'fetch_with_changes', $scope.search);\n    $scope.$listen(timefilter, 'fetch', $scope.search);\n\n    $scope.opts = {\n      saveExpression: saveExpression,\n      saveSheet: saveSheet,\n      savedSheet: savedSheet,\n      state: $scope.state,\n      search: $scope.search,\n      dontShowHelp: function dontShowHelp() {\n        config.set('timelion:showTutorial', false);\n        $scope.setPage(0);\n        $scope.kbnTopNav.close('help');\n      }\n    };\n  };\n\n  var refresher = void 0;\n  $scope.$watchCollection('timefilter.refreshInterval', function (interval) {\n    if (refresher) $timeout.cancel(refresher);\n    if (interval.value > 0 && !interval.pause) {\n      var startRefresh = function startRefresh() {\n        refresher = $timeout(function () {\n          if (!$scope.running) $scope.search();\n          startRefresh();\n        }, interval.value);\n      };\n\n      startRefresh();\n    }\n  });\n\n  $scope.$watch(function () {\n    return savedSheet.lastSavedTitle;\n  }, function (newTitle) {\n    docTitle.change(savedSheet.id ? newTitle : undefined);\n  });\n\n  $scope.toggle = function (property) {\n    $scope[property] = !$scope[property];\n  };\n\n  $scope.newSheet = function () {\n    kbnUrl.change('/', {});\n  };\n\n  $scope.newCell = function () {\n    $scope.state.sheet.push(defaultExpression);\n    $scope.state.selected = $scope.state.sheet.length - 1;\n    $scope.safeSearch();\n  };\n\n  $scope.setActiveCell = function (cell) {\n    $scope.state.selected = cell;\n  };\n\n  $scope.search = function () {\n    $scope.state.save();\n    $scope.running = true;\n\n    var httpResult = $http.post('../api/timelion/run', {\n      sheet: $scope.state.sheet,\n      time: _lodash2.default.extend(timefilter.time, {\n        interval: $scope.state.interval,\n        timezone: timezone\n      })\n    }).then(function (resp) {\n      return resp.data;\n    }).catch(function (resp) {\n      throw resp.data;\n    });\n\n    httpResult.then(function (resp) {\n      dismissNotifications();\n      $scope.stats = resp.stats;\n      $scope.sheet = resp.sheet;\n      _lodash2.default.each(resp.sheet, function (cell) {\n        if (cell.exception) {\n          $scope.state.selected = cell.plot;\n        }\n      });\n      $scope.running = false;\n    }).catch(function (resp) {\n      $scope.sheet = [];\n      $scope.running = false;\n\n      var err = new Error(resp.message);\n      err.stack = resp.stack;\n      notify.error(err);\n    });\n  };\n\n  $scope.safeSearch = _lodash2.default.debounce($scope.search, 500);\n\n  function saveSheet() {\n    savedSheet.timelion_sheet = $scope.state.sheet;\n    savedSheet.timelion_interval = $scope.state.interval;\n    savedSheet.timelion_columns = $scope.state.columns;\n    savedSheet.timelion_rows = $scope.state.rows;\n    savedSheet.save().then(function (id) {\n      if (id) {\n        notify.info('Saved sheet as \"' + savedSheet.title + '\"');\n        if (savedSheet.id !== $routeParams.id) {\n          kbnUrl.change('/{{id}}', { id: savedSheet.id });\n        }\n      }\n    });\n  }\n\n  function saveExpression(title) {\n    savedVisualizations.get({ type: 'timelion' }).then(function (savedExpression) {\n      savedExpression.visState.params = {\n        expression: $scope.state.sheet[$scope.state.selected],\n        interval: $scope.state.interval\n      };\n      savedExpression.title = title;\n      savedExpression.visState.title = title;\n      savedExpression.save().then(function (id) {\n        if (id) notify.info('Saved expression as \"' + savedExpression.title + '\"');\n      });\n    });\n  }\n\n  function dismissNotifications() {\n    unsafeNotifications.splice(0, unsafeNotifications.length);\n  }\n\n  init();\n});",null]}