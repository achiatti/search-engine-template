{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/metrics/metric_agg_type.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/metrics/metric_agg_type.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesMetricsMetricAggTypeProvider = AggTypesMetricsMetricAggTypeProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _agg_type = require('ui/agg_types/agg_type');\n\nvar _field_formats = require('ui/registry/field_formats');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesMetricsMetricAggTypeProvider(Private) {\n  var AggType = Private(_agg_type.AggTypesAggTypeProvider);\n  var fieldFormats = Private(_field_formats.RegistryFieldFormatsProvider);\n\n  _lodash2.default.class(MetricAggType).inherits(AggType);\n  function MetricAggType(config) {\n    MetricAggType.Super.call(this, config);\n\n    // allow overriding any value on the prototype\n    _lodash2.default.forOwn(config, function (val, key) {\n      if (_lodash2.default.has(MetricAggType.prototype, key)) {\n        this[key] = val;\n      }\n    }, this);\n  }\n\n  MetricAggType.prototype.subtype = 'Metric Aggregations';\n  /**\n   * Read the values for this metric from the\n   * @param  {[type]} bucket [description]\n   * @return {*}        [description]\n   */\n  MetricAggType.prototype.getValue = function (agg, bucket) {\n    // Metric types where an empty set equals `zero`\n    var isSettableToZero = ['cardinality', 'sum'].indexOf(agg.__type.name) !== -1;\n\n    // Return proper values when no buckets are present\n    // `Count` handles empty sets properly\n    if (!bucket[agg.id] && isSettableToZero) return 0;\n\n    return bucket[agg.id] && bucket[agg.id].value;\n  };\n\n  /**\n   * Pick a format for the values produced by this agg type,\n   * overriden by several metrics that always output a simple\n   * number\n   *\n   * @param  {agg} agg - the agg to pick a format for\n   * @return {FieldFromat}\n   */\n  MetricAggType.prototype.getFormat = function (agg) {\n    var field = agg.getField();\n    return field ? field.format : fieldFormats.getDefaultInstance('number');\n  };\n\n  /**\n   * Determines if this metric can be scaled\n   */\n  MetricAggType.prototype.isScalable = function () {\n    return false;\n  };\n\n  return MetricAggType;\n}",null]}