{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/vis.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibVisProvider = VislibVisProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _errors = require('ui/errors');\n\nvar _events = require('ui/events');\n\nrequire('./styles/main.less');\n\nvar _vis_config = require('./lib/vis_config');\n\nvar _handler = require('./lib/handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibVisProvider(Private) {\n  var Events = Private(_events.EventsProvider);\n  var VisConfig = Private(_vis_config.VislibVisConfigProvider);\n  var Handler = Private(_handler.VisHandlerProvider);\n\n  /**\n   * Creates the visualizations.\n   *\n   * @class Vis\n   * @constructor\n   * @param $el {HTMLElement} jQuery selected HTML element\n   * @param config {Object} Parameters that define the chart type and chart options\n   */\n\n  var Vis = function (_Events) {\n    _inherits(Vis, _Events);\n\n    function Vis($el, visConfigArgs) {\n      _classCallCheck(this, Vis);\n\n      var _this = _possibleConstructorReturn(this, (Vis.__proto__ || Object.getPrototypeOf(Vis)).call(this, arguments));\n\n      _this.el = $el.get ? $el.get(0) : $el;\n      _this.visConfigArgs = _lodash2.default.cloneDeep(visConfigArgs);\n      return _this;\n    }\n\n    _createClass(Vis, [{\n      key: 'hasLegend',\n      value: function hasLegend() {\n        return this.visConfigArgs.addLegend;\n      }\n      /**\n       * Renders the visualization\n       *\n       * @method render\n       * @param data {Object} Elasticsearch query results\n       */\n\n    }, {\n      key: 'render',\n      value: function render(data, uiState) {\n        var _this2 = this;\n\n        if (!data) {\n          throw new Error('No valid data!');\n        }\n\n        if (this.handler) {\n          this.data = null;\n          this._runOnHandler('destroy');\n        }\n\n        this.data = data;\n\n        if (!this.uiState) {\n          this.uiState = uiState;\n          this._uiStateChangeHandler = function () {\n            if (document.body.contains(_this2.el)) {\n              _this2.render(_this2.data, _this2.uiState);\n            }\n          };\n          uiState.on('change', this._uiStateChangeHandler);\n        }\n\n        this.visConfig = new VisConfig(this.visConfigArgs, this.data, this.uiState, this.el);\n\n        this.handler = new Handler(this, this.visConfig);\n        this._runOnHandler('render');\n      }\n    }, {\n      key: 'getLegendLabels',\n      value: function getLegendLabels() {\n        return this.visConfig ? this.visConfig.get('legend.labels', null) : null;\n      }\n    }, {\n      key: 'getLegendColors',\n      value: function getLegendColors() {\n        return this.visConfig ? this.visConfig.get('legend.colors', null) : null;\n      }\n    }, {\n      key: '_runOnHandler',\n      value: function _runOnHandler(method) {\n        try {\n          this.handler[method]();\n        } catch (error) {\n\n          if (error instanceof _errors.KbnError) {\n            error.displayToScreen(this.handler);\n          } else {\n            throw error;\n          }\n        }\n      }\n\n      /**\n       * Destroys the visualization\n       * Removes chart and all elements associated with it.\n       * Removes chart and all elements associated with it.\n       * Remove event listeners and pass destroy call down to owned objects.\n       *\n       * @method destroy\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var selection = _d2.default.select(this.el).select('.vis-wrapper');\n\n        if (this.uiState) this.uiState.off('change', this._uiStateChangeHandler);\n        if (this.handler) this._runOnHandler('destroy');\n\n        selection.remove();\n      }\n\n      /**\n       * Sets attributes on the visualization\n       *\n       * @method set\n       * @param name {String} An attribute name\n       * @param val {*} Value to which the attribute name is set\n       */\n\n    }, {\n      key: 'set',\n      value: function set(name, val) {\n        this.visConfigArgs[name] = val;\n        this.render(this.data, this.uiState);\n      }\n\n      /**\n       * Gets attributes from the visualization\n       *\n       * @method get\n       * @param name {String} An attribute name\n       * @returns {*} The value of the attribute name\n       */\n\n    }, {\n      key: 'get',\n      value: function get(name) {\n        return this.visConfig.get(name);\n      }\n\n      /**\n       * Turns on event listeners.\n       *\n       * @param event {String}\n       * @param listener{Function}\n       * @returns {*}\n       */\n\n    }, {\n      key: 'on',\n      value: function on(event, listener) {\n        var first = this.listenerCount(event) === 0;\n        var ret = Events.prototype.on.call(this, event, listener);\n        var added = this.listenerCount(event) > 0;\n\n        // if this is the first listener added for the event\n        // enable the event in the handler\n        if (first && added && this.handler) this.handler.enable(event);\n\n        return ret;\n      }\n\n      /**\n       * Turns off event listeners.\n       *\n       * @param event {String}\n       * @param listener{Function}\n       * @returns {*}\n       */\n\n    }, {\n      key: 'off',\n      value: function off(event, listener) {\n        var last = this.listenerCount(event) === 1;\n        var ret = Events.prototype.off.call(this, event, listener);\n        var removed = this.listenerCount(event) === 0;\n\n        // Once all listeners are removed, disable the events in the handler\n        if (last && removed && this.handler) this.handler.disable(event);\n        return ret;\n      }\n    }]);\n\n    return Vis;\n  }(Events);\n\n  return Vis;\n}",null]}