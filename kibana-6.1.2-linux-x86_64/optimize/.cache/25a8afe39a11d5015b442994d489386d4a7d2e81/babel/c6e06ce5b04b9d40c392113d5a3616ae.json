{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/region_map/public/choropleth_layer.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/region_map/public/choropleth_layer.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _kibana_map_layer = require('../../tile_map/public/kibana_map_layer');\n\nvar _truncated_colormaps = require('ui/vislib/components/color/truncated_colormaps');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ChoroplethLayer = function (_KibanaMapLayer) {\n  _inherits(ChoroplethLayer, _KibanaMapLayer);\n\n  function ChoroplethLayer(geojsonUrl, attribution) {\n    var _this2 = this;\n\n    _classCallCheck(this, ChoroplethLayer);\n\n    var _this = _possibleConstructorReturn(this, (ChoroplethLayer.__proto__ || Object.getPrototypeOf(ChoroplethLayer)).call(this));\n\n    _this._metrics = null;\n    _this._joinField = null;\n    _this._colorRamp = _truncated_colormaps.truncatedColorMaps[Object.keys(_truncated_colormaps.truncatedColorMaps)[0]];\n    _this._tooltipFormatter = function () {\n      return '';\n    };\n    _this._attribution = attribution;\n    _this._boundsOfData = null;\n\n    _this._geojsonUrl = geojsonUrl;\n    _this._leafletLayer = _leaflet2.default.geoJson(null, {\n      onEachFeature: function onEachFeature(feature, layer) {\n        layer.on('click', function () {\n          _this.emit('select', feature.properties[_this._joinField]);\n        });\n        var location = null;\n        layer.on({\n          mouseover: function mouseover() {\n            var tooltipContents = _this._tooltipFormatter(feature);\n            if (!location) {\n              var leafletGeojon = _leaflet2.default.geoJson(feature);\n              location = leafletGeojon.getBounds().getCenter();\n            }\n\n            _this.emit('showTooltip', {\n              content: tooltipContents,\n              position: location\n            });\n          },\n          mouseout: function mouseout() {\n            _this.emit('hideTooltip');\n          }\n        });\n      },\n      style: emptyStyle\n    });\n\n    _this._loaded = false;\n    _this._error = false;\n    _this._whenDataLoaded = new Promise(function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resolve) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this._makeJsonAjaxCall(geojsonUrl);\n\n              case 3:\n                data = _context.sent;\n\n                _this._leafletLayer.addData(data);\n                _this._loaded = true;\n                _this._setStyle();\n                resolve();\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context['catch'](0);\n\n                _this._loaded = true;\n                _this._error = true;\n                resolve();\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2, [[0, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return _this;\n  }\n\n  //This method is stubbed in the tests to avoid network request during unit tests.\n\n\n  _createClass(ChoroplethLayer, [{\n    key: '_makeJsonAjaxCall',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _jquery2.default.ajax({\n                  dataType: 'json',\n                  url: url\n                });\n\n              case 2:\n                return _context2.abrupt('return', _context2.sent);\n\n              case 3:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _makeJsonAjaxCall(_x2) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _makeJsonAjaxCall;\n    }()\n  }, {\n    key: '_setStyle',\n    value: function _setStyle() {\n      if (this._error || !this._loaded || !this._metrics || !this._joinField) {\n        return;\n      }\n\n      var styler = makeChoroplethStyler(this._metrics, this._colorRamp, this._joinField);\n      this._leafletLayer.setStyle(styler.getLeafletStyleFunction);\n\n      if (this._metrics && this._metrics.length > 0) {\n        var _getMinMax = getMinMax(this._metrics),\n            min = _getMinMax.min,\n            max = _getMinMax.max;\n\n        this._legendColors = getLegendColors(this._colorRamp);\n        var quantizeDomain = min !== max ? [min, max] : _d2.default.scale.quantize().domain();\n        this._legendQuantizer = _d2.default.scale.quantize().domain(quantizeDomain).range(this._legendColors);\n      }\n      this._boundsOfData = styler.getLeafletBounds();\n      this.emit('styleChanged', {\n        mismatches: styler.getMismatches()\n      });\n    }\n  }, {\n    key: 'getMetrics',\n    value: function getMetrics() {\n      return this._metrics;\n    }\n  }, {\n    key: 'getMetricsAgg',\n    value: function getMetricsAgg() {\n      return this._metricsAgg;\n    }\n  }, {\n    key: 'getUrl',\n    value: function getUrl() {\n      return this._geojsonUrl;\n    }\n  }, {\n    key: 'setTooltipFormatter',\n    value: function setTooltipFormatter(tooltipFormatter, metricsAgg, fieldName) {\n      var _this3 = this;\n\n      this._tooltipFormatter = function (geojsonFeature) {\n        if (!_this3._metrics) {\n          return '';\n        }\n        var match = _this3._metrics.find(function (bucket) {\n          return bucket.term === geojsonFeature.properties[_this3._joinField];\n        });\n        return tooltipFormatter(metricsAgg, match, fieldName);\n      };\n    }\n  }, {\n    key: 'setJoinField',\n    value: function setJoinField(joinfield) {\n      if (joinfield === this._joinField) {\n        return;\n      }\n      this._joinField = joinfield;\n      this._setStyle();\n    }\n  }, {\n    key: 'whenDataLoaded',\n    value: function whenDataLoaded() {\n      return this._whenDataLoaded;\n    }\n  }, {\n    key: 'setMetrics',\n    value: function setMetrics(metrics, metricsAgg) {\n      this._metrics = metrics;\n      this._metricsAgg = metricsAgg;\n      this._valueFormatter = this._metricsAgg.fieldFormatter();\n      this._setStyle();\n    }\n  }, {\n    key: 'setColorRamp',\n    value: function setColorRamp(colorRamp) {\n      if (_lodash2.default.isEqual(colorRamp, this._colorRamp)) {\n        return;\n      }\n      this._colorRamp = colorRamp;\n      this._setStyle();\n    }\n  }, {\n    key: 'equalsGeoJsonUrl',\n    value: function equalsGeoJsonUrl(geojsonUrl) {\n      return this._geojsonUrl === geojsonUrl;\n    }\n  }, {\n    key: 'getBounds',\n    value: function getBounds() {\n      var bounds = _get(ChoroplethLayer.prototype.__proto__ || Object.getPrototypeOf(ChoroplethLayer.prototype), 'getBounds', this).call(this);\n      return this._boundsOfData ? this._boundsOfData : bounds;\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents(jqueryDiv) {\n      var _this4 = this;\n\n      if (!this._legendColors || !this._legendQuantizer || !this._metricsAgg) {\n        return;\n      }\n\n      var titleText = this._metricsAgg.makeLabel();\n      var $title = (0, _jquery2.default)('<div>').addClass('tilemap-legend-title').text(titleText);\n      jqueryDiv.append($title);\n\n      this._legendColors.forEach(function (color) {\n\n        var labelText = _this4._legendQuantizer.invertExtent(color).map(_this4._valueFormatter).join(' – ');\n\n        var label = (0, _jquery2.default)('<div>');\n        var icon = (0, _jquery2.default)('<i>').css({\n          background: color,\n          'border-color': makeColorDarker(color)\n        });\n\n        var text = (0, _jquery2.default)('<span>').text(labelText);\n        label.append(icon);\n        label.append(text);\n\n        jqueryDiv.append(label);\n      });\n    }\n  }]);\n\n  return ChoroplethLayer;\n}(_kibana_map_layer.KibanaMapLayer);\n\nexports.default = ChoroplethLayer;\n\n\nfunction makeColorDarker(color) {\n  var amount = 1.3; //magic number, carry over from earlier\n  return _d2.default.hcl(color).darker(amount).toString();\n}\n\nfunction getMinMax(data) {\n  var min = data[0].value;\n  var max = data[0].value;\n  for (var i = 1; i < data.length; i += 1) {\n    min = Math.min(data[i].value, min);\n    max = Math.max(data[i].value, max);\n  }\n  return { min: min, max: max };\n}\n\nfunction makeChoroplethStyler(data, colorramp, joinField) {\n\n  if (data.length === 0) {\n    return {\n      getLeafletStyleFunction: function getLeafletStyleFunction() {\n        return emptyStyle();\n      },\n      getMismatches: function getMismatches() {\n        return [];\n      },\n      getLeafletBounds: function getLeafletBounds() {\n        return null;\n      }\n    };\n  }\n\n  var _getMinMax2 = getMinMax(data),\n      min = _getMinMax2.min,\n      max = _getMinMax2.max;\n\n  var outstandingFeatures = data.slice();\n\n  var boundsOfAllFeatures = new _leaflet2.default.LatLngBounds();\n  return {\n    getLeafletStyleFunction: function getLeafletStyleFunction(geojsonFeature) {\n      var lastIndex = -1;\n      var match = outstandingFeatures.find(function (bucket, index) {\n        lastIndex = index;\n        return bucket.term === geojsonFeature.properties[joinField];\n      });\n\n      if (!match) {\n        return emptyStyle();\n      }\n\n      outstandingFeatures.splice(lastIndex, 1);\n\n      var boundsOfFeature = _leaflet2.default.geoJson(geojsonFeature).getBounds();\n      boundsOfAllFeatures.extend(boundsOfFeature);\n\n      return {\n        fillColor: getChoroplethColor(match.value, min, max, colorramp),\n        weight: 2,\n        opacity: 1,\n        color: 'white',\n        fillOpacity: 0.7\n      };\n    },\n    /**\n     * should not be called until getLeafletStyleFunction has been called\n     * @return {Array}\n     */\n    getMismatches: function getMismatches() {\n      return outstandingFeatures.map(function (bucket) {\n        return bucket.term;\n      });\n    },\n    getLeafletBounds: function getLeafletBounds() {\n      return boundsOfAllFeatures.isValid() ? boundsOfAllFeatures : null;\n    }\n  };\n}\n\nfunction getLegendColors(colorRamp) {\n  var colors = [];\n  colors[0] = getColor(colorRamp, 0);\n  colors[1] = getColor(colorRamp, Math.floor(colorRamp.length * 1 / 4));\n  colors[2] = getColor(colorRamp, Math.floor(colorRamp.length * 2 / 4));\n  colors[3] = getColor(colorRamp, Math.floor(colorRamp.length * 3 / 4));\n  colors[4] = getColor(colorRamp, colorRamp.length - 1);\n  return colors;\n}\n\nfunction getColor(colorRamp, i) {\n\n  if (!colorRamp[i]) {\n    return getColor();\n  }\n\n  var color = colorRamp[i][1];\n  var red = Math.floor(color[0] * 255);\n  var green = Math.floor(color[1] * 255);\n  var blue = Math.floor(color[2] * 255);\n  return 'rgb(' + red + ',' + green + ',' + blue + ')';\n}\n\nfunction getChoroplethColor(value, min, max, colorRamp) {\n  if (min === max) {\n    return getColor(colorRamp, colorRamp.length - 1);\n  }\n  var fraction = (value - min) / (max - min);\n  var index = Math.round(colorRamp.length * fraction) - 1;\n  var i = Math.max(Math.min(colorRamp.length - 1, index), 0);\n\n  return getColor(colorRamp, i);\n}\n\nvar emptyStyleObject = {\n  weight: 1,\n  opacity: 0.6,\n  color: 'rgb(200,200,200)',\n  fillOpacity: 0\n};\nfunction emptyStyle() {\n  return emptyStyleObject;\n}\nmodule.exports = exports['default'];",null]}