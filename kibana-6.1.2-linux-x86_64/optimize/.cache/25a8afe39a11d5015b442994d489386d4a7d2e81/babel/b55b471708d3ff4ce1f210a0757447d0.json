{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_storage/state_hash.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_storage/state_hash.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStateHash = createStateHash;\nexports.isStateHash = isStateHash;\n\nvar _crypto = require('ui/crypto');\n\n// This prefix is used to identify hash strings that have been encoded in the URL.\nvar HASH_PREFIX = 'h@';\n\nfunction createStateHash(json, existingJsonProvider) {\n  if (typeof json !== 'string') {\n    throw new Error('createHash only accepts strings (JSON).');\n  }\n\n  var hash = new _crypto.Sha256().update(json, 'utf8').digest('hex');\n\n  var shortenedHash = void 0;\n\n  // Shorten the hash to at minimum 7 characters. We just need to make sure that it either:\n  // a) hasn't been used yet\n  // b) or has been used already, but with the JSON we're currently hashing.\n  for (var i = 7; i < hash.length; i++) {\n    shortenedHash = hash.slice(0, i);\n    var existingJson = existingJsonProvider(shortenedHash);\n    if (existingJson === null || existingJson === json) break;\n  }\n\n  return '' + HASH_PREFIX + shortenedHash;\n}\n\nfunction isStateHash(str) {\n  return String(str).indexOf(HASH_PREFIX) === 0;\n}",null]}