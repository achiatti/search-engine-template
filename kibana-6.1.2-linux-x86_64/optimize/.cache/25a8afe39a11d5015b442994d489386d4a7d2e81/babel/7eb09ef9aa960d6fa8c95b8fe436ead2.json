{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/field_formats/field_format.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/field_formats/field_format.js","mtime":1515552211790},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldFormat = FieldFormat;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _content_types = require('./content_types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction FieldFormat(params) {\n  // give the constructor a more appropriate name\n  this.type = this.constructor;\n\n  // keep the params and defaults seperate\n  this._params = params || {};\n\n  // one content type, so assume text\n  if (_lodash2.default.isFunction(this._convert)) {\n    this._convert = { text: this._convert };\n  }\n\n  (0, _content_types.contentTypesSetup)(this);\n}\n\nFieldFormat.from = function (converter) {\n  _lodash2.default.class(FieldFormatFromConverter).inherits(FieldFormat);\n  function FieldFormatFromConverter(params) {\n    FieldFormatFromConverter.Super.call(this, params);\n  }\n  FieldFormatFromConverter.prototype._convert = converter;\n  return FieldFormatFromConverter;\n};\n\n/**\n * Convert a raw value to a formated string\n * @param  {any} value\n * @param  {string} [contentType=text] - optional content type, the only two contentTypes\n *                                currently supported are \"html\" and \"text\", which helps\n *                                formatters adjust to different contexts\n * @return {string} - the formatted string, which is assumed to be html, safe for\n *                    injecting into the DOM or a DOM attribute\n */\nFieldFormat.prototype.convert = function (value, contentType) {\n  return this.getConverterFor(contentType)(value);\n};\n\n/**\n * Get a convert function that is bound to a specific contentType\n * @param  {string} [contentType=text]\n * @return {function} - a bound converter function\n */\nFieldFormat.prototype.getConverterFor = function (contentType) {\n  return this._convert[contentType || 'text'];\n};\n\n/**\n * Get parameter defaults\n * @return {object} - parameter defaults\n */\nFieldFormat.prototype.getParamDefaults = function () {\n  return {};\n};\n\n/**\n * Get the value of a param. This value may be a default value.\n *\n * @param  {string} name - the param name to fetch\n * @return {any}\n */\nFieldFormat.prototype.param = function (name) {\n  var val = this._params[name];\n  if (val || val === false || val === 0) {\n    // truthy, false, or 0 are fine\n    // '', NaN, null, undefined, etc are not\n    return val;\n  }\n\n  return this.getParamDefaults()[name];\n};\n\n/**\n * Get all of the params in a single object\n * @return {object}\n */\nFieldFormat.prototype.params = function () {\n  return _lodash2.default.cloneDeep(_lodash2.default.defaults({}, this._params, this.getParamDefaults()));\n};\n\n/**\n * serialize this format to a simple POJO, with only the params\n * that are not default\n *\n * @return {object}\n */\nFieldFormat.prototype.toJSON = function () {\n  var type = this.type;\n  var defaults = this.getParamDefaults();\n\n  var params = _lodash2.default.transform(this._params, function (uniqParams, val, param) {\n    if (val !== defaults[param]) {\n      uniqParams[param] = val;\n    }\n  }, {});\n\n  if (!_lodash2.default.size(params)) {\n    params = undefined;\n  }\n\n  return {\n    id: type.id,\n    params: params\n  };\n};",null]}