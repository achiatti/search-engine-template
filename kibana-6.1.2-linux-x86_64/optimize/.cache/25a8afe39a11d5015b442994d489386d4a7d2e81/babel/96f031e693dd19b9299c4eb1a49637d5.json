{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/pie_chart.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/pie_chart.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibVisualizationsPieChartProvider = VislibVisualizationsPieChartProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _numeral = require('numeral');\n\nvar _numeral2 = _interopRequireDefault(_numeral);\n\nvar _errors = require('ui/errors');\n\nvar _chart = require('./_chart');\n\nvar _truncate_labels = require('../components/labels/truncate_labels');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibVisualizationsPieChartProvider(Private) {\n\n  var Chart = Private(_chart.VislibVisualizationsChartProvider);\n\n  var defaults = {\n    isDonut: false,\n    showTooltip: true,\n    color: undefined,\n    fillColor: undefined\n  };\n  /**\n   * Pie Chart Visualization\n   *\n   * @class PieChart\n   * @constructor\n   * @extends Chart\n   * @param handler {Object} Reference to the Handler Class Constructor\n   * @param el {HTMLElement} HTML element to which the chart will be appended\n   * @param chartData {Object} Elasticsearch query results for this specific chart\n   */\n\n  var PieChart = function (_Chart) {\n    _inherits(PieChart, _Chart);\n\n    function PieChart(handler, chartEl, chartData) {\n      _classCallCheck(this, PieChart);\n\n      var _this = _possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).call(this, handler, chartEl, chartData));\n\n      var charts = _this.handler.data.getVisData();\n      _this._validatePieData(charts);\n\n      _this._attr = _lodash2.default.defaults(handler.visConfig.get('chart', {}), defaults);\n      return _this;\n    }\n\n    /**\n     * Checks whether pie slices have all zero values.\n     * If so, an error is thrown.\n     */\n\n\n    _createClass(PieChart, [{\n      key: '_validatePieData',\n      value: function _validatePieData(charts) {\n        var isAllZeros = charts.every(function (chart) {\n          return chart.slices.children.length === 0;\n        });\n\n        if (isAllZeros) {\n          throw new _errors.PieContainsAllZeros();\n        }\n      }\n\n      /**\n       * Adds Events to SVG paths\n       *\n       * @method addPathEvents\n       * @param element {D3.Selection} Reference to SVG path\n       * @returns {D3.Selection} SVG path with event listeners attached\n       */\n\n    }, {\n      key: 'addPathEvents',\n      value: function addPathEvents(element) {\n        var events = this.events;\n\n        return element.call(events.addHoverEvent()).call(events.addMouseoutEvent()).call(events.addClickEvent());\n      }\n    }, {\n      key: 'convertToPercentage',\n      value: function convertToPercentage(slices) {\n        (function assignPercentages(slices) {\n          if (slices.sumOfChildren != null) return;\n\n          var parent = slices;\n          var children = parent.children;\n          var parentPercent = parent.percentOfParent;\n\n          var sum = parent.sumOfChildren = Math.abs(children.reduce(function (sum, child) {\n            return sum + Math.abs(child.size);\n          }, 0));\n\n          children.forEach(function (child) {\n            child.percentOfGroup = Math.abs(child.size) / sum;\n            child.percentOfParent = child.percentOfGroup;\n\n            if (parentPercent != null) {\n              child.percentOfParent *= parentPercent;\n            }\n\n            if (child.children) {\n              assignPercentages(child);\n            }\n          });\n        })(slices);\n      }\n\n      /**\n       * Adds pie paths to SVG\n       *\n       * @method addPath\n       * @param width {Number} Width of SVG\n       * @param height {Number} Height of SVG\n       * @param svg {HTMLElement} Chart SVG\n       * @param slices {Object} Chart data\n       * @returns {D3.Selection} SVG with paths attached\n       */\n\n    }, {\n      key: 'addPath',\n      value: function addPath(width, height, svg, slices) {\n        var self = this;\n        var marginFactor = 0.95;\n        var isDonut = self._attr.isDonut;\n        var radius = Math.min(width, height) / 2 * marginFactor;\n        var color = self.handler.data.getPieColorFunc();\n        var tooltip = self.tooltip;\n        var isTooltip = self._attr.addTooltip;\n\n        var arcs = svg.append('g').attr('class', 'arcs');\n        var labels = svg.append('g').attr('class', 'labels');\n\n        var showLabels = self._attr.labels.show;\n        var showValues = self._attr.labels.values;\n        var truncateLabelLength = self._attr.labels.truncate;\n        var showOnlyOnLastLevel = self._attr.labels.last_level;\n\n        var partition = _d2.default.layout.partition().sort(null).value(function (d) {\n          return d.percentOfParent * 100;\n        });\n\n        var x = _d2.default.scale.linear().range([0, 2 * Math.PI]);\n        var y = _d2.default.scale.sqrt().range([0, radius * 0.7]);\n\n        var startAngle = function startAngle(d) {\n          return Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        };\n\n        var endAngle = function endAngle(d) {\n          if (d.dx < 1e-8) return x(d.x);\n          return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        };\n\n        var arc = _d2.default.svg.arc().startAngle(startAngle).endAngle(endAngle).innerRadius(function (d) {\n          // option for a single layer, i.e pie chart\n          if (d.depth === 1 && !isDonut) {\n            // return no inner radius\n            return 0;\n          }\n\n          return Math.max(0, y(d.y));\n        }).outerRadius(function (d) {\n          return Math.max(0, y(d.y + d.dy));\n        });\n\n        var outerArc = _d2.default.svg.arc().startAngle(startAngle).endAngle(endAngle).innerRadius(radius * 0.8).outerRadius(radius * 0.8);\n\n        var maxDepth = 0;\n        var path = arcs.datum(slices).selectAll('path').data(partition.nodes).enter().append('path').attr('d', arc).attr('class', function (d) {\n          if (d.depth === 0) {\n            return;\n          }\n          if (d.depth > maxDepth) maxDepth = d.depth;\n          return 'slice';\n        }).call(self._addIdentifier, 'name').style('fill', function (d) {\n          if (d.depth === 0) {\n            return 'none';\n          }\n          return color(d.name);\n        });\n\n        // add labels\n        if (showLabels) {\n          var labelGroups = labels.datum(slices).selectAll('.label').data(partition.nodes);\n\n          // create an empty quadtree to hold label positions\n          var svgParentNode = svg.node().parentNode.parentNode;\n          var svgBBox = {\n            width: svgParentNode.clientWidth,\n            height: svgParentNode.clientHeight\n          };\n\n          var labelLayout = _d2.default.geom.quadtree().extent([[-svgBBox.width, -svgBBox.height], [svgBBox.width, svgBBox.height]]).x(function (d) {\n            return d.position.x;\n          }).y(function (d) {\n            return d.position.y;\n          })([]);\n\n          labelGroups.enter().append('g').attr('class', 'label').append('text').text(function (d) {\n            if (d.depth === 0) {\n              _d2.default.select(this.parentNode).remove();\n              return;\n            }\n            if (showValues) {\n              var value = (0, _numeral2.default)(d.value / 100).format('0.[00]%');\n              return d.name + ' (' + value + ')';\n            }\n            return d.name;\n          }).text(function () {\n            return (0, _truncate_labels.truncateLabel)(this, truncateLabelLength);\n          }).attr('text-anchor', function (d) {\n            var midAngle = startAngle(d) + (endAngle(d) - startAngle(d)) / 2;\n            return midAngle < Math.PI ? 'start' : 'end';\n          }).attr('class', 'label-text').each(function resolveConflicts(d) {\n            if (d.depth === 0) return;\n\n            var parentNode = this.parentNode;\n            if (showOnlyOnLastLevel && maxDepth !== d.depth) {\n              _d2.default.select(parentNode).remove();\n              return;\n            }\n\n            var bbox = this.getBBox();\n            var pos = outerArc.centroid(d);\n            var midAngle = startAngle(d) + (endAngle(d) - startAngle(d)) / 2;\n            pos[1] += 4;\n            pos[0] = (0.7 + d.depth / 10) * radius * (midAngle < Math.PI ? 1 : -1);\n            d.position = {\n              x: pos[0],\n              y: pos[1],\n              left: midAngle < Math.PI ? pos[0] : pos[0] - bbox.width,\n              right: midAngle > Math.PI ? pos[0] + bbox.width : pos[0],\n              bottom: pos[1] + 5,\n              top: pos[1] - bbox.height - 5\n            };\n\n            var conflicts = [];\n            labelLayout.visit(function (node) {\n              if (!node.point) return;\n              if (conflicts.length) return true;\n\n              var point = node.point.position;\n              var current = d.position;\n              if (point) {\n                var horizontalConflict = point.left < 0 && current.left < 0 || point.left > 0 && current.left > 0;\n                var verticalConflict = point.top >= current.top && point.top <= current.bottom || point.top <= current.top && point.bottom >= current.top;\n\n                if (horizontalConflict && verticalConflict) {\n                  point.point = node.point;\n                  conflicts.push(point);\n                }\n\n                return true;\n              }\n            });\n\n            if (conflicts.length) {\n              _d2.default.select(parentNode).remove();\n              return;\n            }\n\n            labelLayout.add(d);\n          }).attr('x', function (d) {\n            if (d.depth === 0 || !d.position) {\n              return;\n            }\n            return d.position.x;\n          }).attr('y', function (d) {\n            if (d.depth === 0 || !d.position) {\n              return;\n            }\n            return d.position.y;\n          });\n\n          labelGroups.append('polyline').attr('points', function (d) {\n            if (d.depth === 0 || !d.position) {\n              return;\n            }\n            var pos1 = outerArc.centroid(d);\n            var x2 = d.position.x > 0 ? d.position.x - 10 : d.position.x + 10;\n            var pos2 = [x2, d.position.y - 4];\n            pos1[1] = pos2[1];\n            return [arc.centroid(d), pos1, pos2];\n          }).attr('class', 'label-line');\n        }\n\n        if (isTooltip) {\n          path.call(tooltip.render());\n        }\n\n        return path;\n      }\n    }, {\n      key: '_validateContainerSize',\n      value: function _validateContainerSize(width, height) {\n        var minWidth = 20;\n        var minHeight = 20;\n\n        if (width <= minWidth || height <= minHeight) {\n          throw new _errors.ContainerTooSmall();\n        }\n      }\n\n      /**\n       * Renders d3 visualization\n       *\n       * @method draw\n       * @returns {Function} Creates the pie chart\n       */\n\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n\n        return function (selection) {\n          selection.each(function (data) {\n            var slices = data.slices;\n            var div = _d2.default.select(this);\n            var width = (0, _jquery2.default)(this).width();\n            var height = (0, _jquery2.default)(this).height();\n\n            if (!slices.children.length) return;\n\n            self.convertToPercentage(slices);\n            self._validateContainerSize(width, height);\n\n            var svg = div.append('svg').attr('width', width).attr('height', height).append('g').attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n            var path = self.addPath(width, height, svg, slices);\n            self.addPathEvents(path);\n\n            self.events.emit('rendered', {\n              chart: data\n            });\n\n            return svg;\n          });\n        };\n      }\n    }]);\n\n    return PieChart;\n  }(Chart);\n\n  return PieChart;\n}",null]}