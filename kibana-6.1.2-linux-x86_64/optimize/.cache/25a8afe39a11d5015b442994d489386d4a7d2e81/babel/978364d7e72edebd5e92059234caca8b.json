{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/keyboard_move.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/keyboard_move.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Direction = undefined;\n\nvar _directionMapping;\n\nvar _modules = require('ui/modules');\n\nvar _services = require('ui_framework/services');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**\n                                                                                                                                                                                                                   * The keyboardMove directive can be attached to elements, that can receive keydown events.\n                                                                                                                                                                                                                   * It will call the passed callback function and pass the direction in which an\n                                                                                                                                                                                                                   * arrow key was pressed to the callback (as the argument with the name `direction`).\n                                                                                                                                                                                                                   * The passed value will be one of `Direction.up` or `Direction.down`, which can be\n                                                                                                                                                                                                                   * imported to compare against those values. The directive will also make sure, that\n                                                                                                                                                                                                                   * the pressed button will get the focus back (e.g. if it was lost due to a ng-repeat\n                                                                                                                                                                                                                   * reordering).\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * Usage example:\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * <button keyboard-move=\"onMoved(direction)\">...</button>\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * import { Direction } from './keyboard_move';\n                                                                                                                                                                                                                   * function onMoved(dir) {\n                                                                                                                                                                                                                   *   if (dir === Direction.up) {\n                                                                                                                                                                                                                   *     // moved up\n                                                                                                                                                                                                                   *   } else if (dir === Direction.down) {\n                                                                                                                                                                                                                   *     // moved down\n                                                                                                                                                                                                                   *   }\n                                                                                                                                                                                                                   * }\n                                                                                                                                                                                                                   */\n\n\nvar Direction = exports.Direction = {\n  up: 'up',\n  down: 'down'\n};\n\nvar directionMapping = (_directionMapping = {}, _defineProperty(_directionMapping, _services.keyCodes.UP, Direction.up), _defineProperty(_directionMapping, _services.keyCodes.DOWN, Direction.down), _directionMapping);\n\n_modules.uiModules.get('kibana').directive('keyboardMove', function ($parse, $timeout) {\n  return {\n    restrict: 'A',\n    link: function link(scope, el, attr) {\n      var callbackFn = $parse(attr.keyboardMove);\n      el.keydown(function (ev) {\n        if (ev.which in directionMapping) {\n          ev.preventDefault();\n          var direction = directionMapping[ev.which];\n          scope.$apply(function () {\n            return callbackFn(scope, { direction: direction });\n          });\n          // Keep focus on that element, even though it might be attached somewhere\n          // else in the DOM (e.g. because it has a new position in an ng-repeat).\n          $timeout(function () {\n            return el.focus();\n          });\n        }\n      });\n\n      scope.$on('$destroy', function () {\n        el.off('keydown');\n      });\n    }\n  };\n});",null]}