{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/utils.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/utils.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar utils = {};\n\nutils.textFromRequest = function (request) {\n  var data = request.data;\n  if (typeof data != \"string\") {\n    data = data.join(\"\\n\");\n  }\n  return request.method + \" \" + request.url + \"\\n\" + data;\n};\n\nutils.jsonToString = function (data, indent) {\n  return JSON.stringify(data, null, indent ? 2 : 0);\n};\n\nutils.reformatData = function (data, indent) {\n  var changed = false;\n  var formatted_data = [];\n  for (var i = 0; i < data.length; i++) {\n    var cur_doc = data[i];\n    try {\n      var new_doc = utils.jsonToString(JSON.parse(utils.collapseLiteralStrings(cur_doc)), indent ? 2 : 0);\n      if (indent) {\n        new_doc = utils.expandLiteralStrings(new_doc);\n      }\n      changed = changed || new_doc != cur_doc;\n      formatted_data.push(new_doc);\n    } catch (e) {\n      console.log(e);\n      formatted_data.push(cur_doc);\n    }\n  }\n\n  return {\n    changed: changed,\n    data: formatted_data\n  };\n};\n\nutils.collapseLiteralStrings = function (data) {\n  return data.replace(/\"\"\"(?:\\s*\\r?\\n)?((?:.|\\r?\\n)*?)(?:\\r?\\n\\s*)?\"\"\"/g, function (match, literal) {\n    return JSON.stringify(literal);\n  });\n};\n\nutils.expandLiteralStrings = function (data) {\n  return data.replace(/(\"(?:\\\\\"|[^\"])*?\")/g, function (match, string) {\n    // expand things with two slashes or more\n    if (string.split(/\\\\./).length > 2) {\n      string = JSON.parse(string).replace(\"^\\s*\\n\", \"\").replace(\"\\n\\s*^\", \"\");\n      var append = string.includes(\"\\n\") ? \"\\n\" : \"\"; // only go multi line if the string has multiline\n      return '\"\"\"' + append + string + append + '\"\"\"';\n    } else {\n      return string;\n    }\n  });\n};\n\nutils.extractDeprecationMessages = function (warnings) {\n  // pattern for valid warning header\n  var re = /\\d{3} [0-9a-zA-Z!#$%&'*+-.^_`|~]+ \\\"((?:\\t| |!|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x80-\\xff]|\\\\\\\\|\\\\\")*)\\\"(?: \\\"[^\"]*\\\")/;\n  // split on any comma that is followed by an even number of quotes\n  return _lodash2.default.map(utils.splitOnUnquotedCommaSpace(warnings), function (warning) {\n    var match = re.exec(warning);\n    // extract the actual warning if there was a match\n    return \"#! Deprecation: \" + (match !== null ? utils.unescape(match[1]) : warning);\n  });\n};\n\nutils.unescape = function (s) {\n  return s.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\"/g, \"\\\"\");\n};\n\nutils.splitOnUnquotedCommaSpace = function (s) {\n  var quoted = false;\n  var arr = [];\n  var buffer = '';\n  var i = 0;\n  while (i < s.length) {\n    var token = s.charAt(i++);\n    if (token == '\\\\' && i < s.length) {\n      token += s.charAt(i++);\n    } else if (token == ',' && i < s.length && s.charAt(i) == ' ') {\n      token += s.charAt(i++);\n    }\n    if (token == '\"') {\n      quoted = !quoted;\n    } else if (!quoted && token == ', ') {\n      arr.push(buffer);\n      buffer = '';\n      continue;\n    }\n    buffer += token;\n  }\n  arr.push(buffer);\n  return arr;\n};\n\nexports.default = utils;\nmodule.exports = exports[\"default\"];",null]}