{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tagcloud/public/tag_cloud.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tagcloud/public/tag_cloud.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _d3Cloud = require('d3-cloud');\n\nvar _d3Cloud2 = _interopRequireDefault(_d3Cloud);\n\nvar _seed_colors = require('ui/vis/components/color/seed_colors');\n\nvar _events = require('events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ORIENTATIONS = {\n  'single': function single() {\n    return 0;\n  },\n  'right angled': function rightAngled(tag) {\n    return hashCode(tag.text) % 2 * 90;\n  },\n  'multiple': function multiple(tag) {\n    var hashcode = Math.abs(hashCode(tag.text));\n    return hashcode % 12 * 15 - 90; //fan out 12 * 15 degrees over top-right and bottom-right quadrant (=-90 deg offset)\n  }\n};\nvar D3_SCALING_FUNCTIONS = {\n  'linear': function linear() {\n    return _d2.default.scale.linear();\n  },\n  'log': function log() {\n    return _d2.default.scale.log();\n  },\n  'square root': function squareRoot() {\n    return _d2.default.scale.sqrt();\n  }\n};\n\nvar TagCloud = function (_EventEmitter) {\n  _inherits(TagCloud, _EventEmitter);\n\n  function TagCloud(domNode) {\n    _classCallCheck(this, TagCloud);\n\n    //DOM\n    var _this = _possibleConstructorReturn(this, (TagCloud.__proto__ || Object.getPrototypeOf(TagCloud)).call(this));\n\n    _this._element = domNode;\n    _this._d3SvgContainer = _d2.default.select(_this._element).append('svg');\n    _this._svgGroup = _this._d3SvgContainer.append('g');\n    _this._size = [1, 1];\n    _this.resize();\n\n    //SETTING (non-configurable)\n    _this._fontFamily = 'Impact';\n    _this._fontStyle = 'normal';\n    _this._fontWeight = 'normal';\n    _this._spiral = 'archimedean'; //layout shape\n    _this._timeInterval = 1000; //time allowed for layout algorithm\n    _this._padding = 5;\n\n    //OPTIONS\n    _this._orientation = 'single';\n    _this._minFontSize = 10;\n    _this._maxFontSize = 36;\n    _this._textScale = 'linear';\n    _this._optionsAsString = null;\n\n    //DATA\n    _this._words = null;\n\n    //UTIL\n    _this._setTimeoutId = null;\n    _this._pendingJob = null;\n    _this._layoutIsUpdating = null;\n    _this._allInViewBox = false;\n    _this._DOMisUpdating = false;\n\n    return _this;\n  }\n\n  _createClass(TagCloud, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n\n      if (JSON.stringify(options) === this._optionsAsString) {\n        return;\n      }\n      this._optionsAsString = JSON.stringify(options);\n      this._orientation = options.orientation;\n      this._minFontSize = Math.min(options.minFontSize, options.maxFontSize);\n      this._maxFontSize = Math.max(options.minFontSize, options.maxFontSize);\n      this._textScale = options.scale;\n      this._invalidate(false);\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      var newWidth = this._element.offsetWidth;\n      var newHeight = this._element.offsetHeight;\n\n      if (newWidth === this._size[0] && newHeight === this._size[1]) {\n        return;\n      }\n\n      var wasInside = this._size[0] >= this._cloudWidth && this._size[1] >= this._cloudHeight;\n      var willBeInside = this._cloudWidth <= newWidth && this._cloudHeight <= newHeight;\n      this._size[0] = newWidth;\n      this._size[1] = newHeight;\n      if (wasInside && willBeInside && this._allInViewBox) {\n        this._invalidate(true);\n      } else {\n        this._invalidate(false);\n      }\n    }\n  }, {\n    key: 'setData',\n    value: function setData(data) {\n      this._words = data;\n      this._invalidate(false);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      clearTimeout(this._setTimeoutId);\n      this._element.innerHTML = '';\n    }\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      return this._allInViewBox ? TagCloud.STATUS.COMPLETE : TagCloud.STATUS.INCOMPLETE;\n    }\n  }, {\n    key: '_updateContainerSize',\n    value: function _updateContainerSize() {\n      this._d3SvgContainer.attr('width', this._size[0]);\n      this._d3SvgContainer.attr('height', this._size[1]);\n      this._svgGroup.attr('width', this._size[0]);\n      this._svgGroup.attr('height', this._size[1]);\n    }\n  }, {\n    key: '_isJobRunning',\n    value: function _isJobRunning() {\n      return this._setTimeoutId || this._layoutIsUpdating || this._DOMisUpdating;\n    }\n  }, {\n    key: '_processPendingJob',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var job, cloudBBox;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this._pendingJob) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 2:\n                if (!this._isJobRunning()) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 4:\n\n                this._completedJob = null;\n                _context.next = 7;\n                return this._pickPendingJob();\n\n              case 7:\n                job = _context.sent;\n\n                if (!job.words.length) {\n                  _context.next = 20;\n                  break;\n                }\n\n                if (!job.refreshLayout) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 12;\n                return this._updateLayout(job);\n\n              case 12:\n                _context.next = 14;\n                return this._updateDOM(job);\n\n              case 14:\n                cloudBBox = this._svgGroup[0][0].getBBox();\n\n                this._cloudWidth = cloudBBox.width;\n                this._cloudHeight = cloudBBox.height;\n                this._allInViewBox = cloudBBox.x >= 0 && cloudBBox.y >= 0 && cloudBBox.x + cloudBBox.width <= this._element.offsetWidth && cloudBBox.y + cloudBBox.height <= this._element.offsetHeight;\n                _context.next = 21;\n                break;\n\n              case 20:\n                this._emptyDOM(job);\n\n              case 21:\n\n                if (this._pendingJob) {\n                  this._processPendingJob(); //pick up next job\n                } else {\n                  this._completedJob = job;\n                  this.emit('renderComplete');\n                }\n\n              case 22:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _processPendingJob() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _processPendingJob;\n    }()\n  }, {\n    key: '_pickPendingJob',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return new Promise(function (resolve) {\n                  _this2._setTimeoutId = setTimeout(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n                    var job;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            job = _this2._pendingJob;\n\n                            _this2._pendingJob = null;\n                            _this2._setTimeoutId = null;\n                            resolve(job);\n\n                          case 4:\n                          case 'end':\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, _this2);\n                  })), 0);\n                });\n\n              case 2:\n                return _context3.abrupt('return', _context3.sent);\n\n              case 3:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _pickPendingJob() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _pickPendingJob;\n    }()\n  }, {\n    key: '_emptyDOM',\n    value: function _emptyDOM() {\n      this._svgGroup.selectAll('text').remove();\n      this._cloudWidth = 0;\n      this._cloudHeight = 0;\n      this._allInViewBox = true;\n      this._DOMisUpdating = false;\n    }\n  }, {\n    key: '_updateDOM',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(job) {\n        var _this3 = this;\n\n        var canSkipDomUpdate, affineTransform, svgTextNodes, stage;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                canSkipDomUpdate = this._pendingJob || this._setTimeoutId;\n\n                if (!canSkipDomUpdate) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                this._DOMisUpdating = false;\n                return _context4.abrupt('return');\n\n              case 4:\n\n                this._DOMisUpdating = true;\n                affineTransform = positionWord.bind(null, this._element.offsetWidth / 2, this._element.offsetHeight / 2);\n                svgTextNodes = this._svgGroup.selectAll('text');\n                stage = svgTextNodes.data(job.words, getText);\n                _context4.next = 10;\n                return new Promise(function (resolve) {\n\n                  var enterSelection = stage.enter();\n                  var enteringTags = enterSelection.append('text');\n                  enteringTags.style('font-size', getSizeInPixels);\n                  enteringTags.style('font-style', _this3._fontStyle);\n                  enteringTags.style('font-weight', function () {\n                    return _this3._fontWeight;\n                  });\n                  enteringTags.style('font-family', function () {\n                    return _this3._fontFamily;\n                  });\n                  enteringTags.style('fill', getFill);\n                  enteringTags.attr('text-anchor', function () {\n                    return 'middle';\n                  });\n                  enteringTags.attr('transform', affineTransform);\n                  enteringTags.attr('data-test-subj', getDisplayText);\n                  enteringTags.text(getDisplayText);\n\n                  var self = _this3;\n                  enteringTags.on({\n                    click: function click(event) {\n                      self.emit('select', event.rawText);\n                    },\n                    mouseover: function mouseover() {\n                      _d2.default.select(this).style('cursor', 'pointer');\n                    },\n                    mouseout: function mouseout() {\n                      _d2.default.select(this).style('cursor', 'default');\n                    }\n                  });\n\n                  var movingTags = stage.transition();\n                  movingTags.duration(600);\n                  movingTags.style('font-size', getSizeInPixels);\n                  movingTags.style('font-style', _this3._fontStyle);\n                  movingTags.style('font-weight', function () {\n                    return _this3._fontWeight;\n                  });\n                  movingTags.style('font-family', function () {\n                    return _this3._fontFamily;\n                  });\n                  movingTags.attr('transform', affineTransform);\n\n                  var exitingTags = stage.exit();\n                  var exitTransition = exitingTags.transition();\n                  exitTransition.duration(200);\n                  exitingTags.style('fill-opacity', 1e-6);\n                  exitingTags.attr('font-size', 1);\n                  exitingTags.remove();\n\n                  var exits = 0;\n                  var moves = 0;\n                  var resolveWhenDone = function resolveWhenDone() {\n                    if (exits === 0 && moves === 0) {\n                      _this3._DOMisUpdating = false;\n                      resolve(true);\n                    }\n                  };\n                  exitTransition.each(function () {\n                    return exits++;\n                  });\n                  exitTransition.each('end', function () {\n                    exits--;\n                    resolveWhenDone();\n                  });\n                  movingTags.each(function () {\n                    return moves++;\n                  });\n                  movingTags.each('end', function () {\n                    moves--;\n                    resolveWhenDone();\n                  });\n                });\n\n              case 10:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _updateDOM(_x) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return _updateDOM;\n    }()\n  }, {\n    key: '_makeTextSizeMapper',\n    value: function _makeTextSizeMapper() {\n      var mapSizeToFontSize = D3_SCALING_FUNCTIONS[this._textScale]();\n      var range = this._words.length === 1 ? [this._maxFontSize, this._maxFontSize] : [this._minFontSize, this._maxFontSize];\n      mapSizeToFontSize.range(range);\n      if (this._words) {\n        mapSizeToFontSize.domain(_d2.default.extent(this._words, getValue));\n      }\n      return mapSizeToFontSize;\n    }\n  }, {\n    key: '_makeNewJob',\n    value: function _makeNewJob() {\n      return {\n        refreshLayout: true,\n        size: this._size.slice(),\n        words: this._words\n      };\n    }\n  }, {\n    key: '_makeJobPreservingLayout',\n    value: function _makeJobPreservingLayout() {\n      return {\n        refreshLayout: false,\n        size: this._size.slice(),\n        words: this._completedJob.words.map(function (tag) {\n          return {\n            x: tag.x,\n            y: tag.y,\n            rotate: tag.rotate,\n            size: tag.size,\n            rawText: tag.rawText || tag.text,\n            displayText: tag.displayText\n          };\n        })\n      };\n    }\n  }, {\n    key: '_invalidate',\n    value: function _invalidate(keepLayout) {\n\n      if (!this._words) {\n        return;\n      }\n\n      this._updateContainerSize();\n\n      var canReuseLayout = keepLayout && !this._isJobRunning() && this._completedJob;\n      this._pendingJob = canReuseLayout ? this._makeJobPreservingLayout() : this._makeNewJob();\n      this._processPendingJob();\n    }\n  }, {\n    key: '_updateLayout',\n    value: function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(job) {\n        var _this4 = this;\n\n        var mapSizeToFontSize, tagCloudLayoutGenerator;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(job.size[0] <= 0 || job.size[1] <= 0)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt('return');\n\n              case 2:\n                mapSizeToFontSize = this._makeTextSizeMapper();\n                tagCloudLayoutGenerator = (0, _d3Cloud2.default)();\n\n                tagCloudLayoutGenerator.size(job.size);\n                tagCloudLayoutGenerator.padding(this._padding);\n                tagCloudLayoutGenerator.rotate(ORIENTATIONS[this._orientation]);\n                tagCloudLayoutGenerator.font(this._fontFamily);\n                tagCloudLayoutGenerator.fontStyle(this._fontStyle);\n                tagCloudLayoutGenerator.fontWeight(this._fontWeight);\n                tagCloudLayoutGenerator.fontSize(function (tag) {\n                  return mapSizeToFontSize(tag.value);\n                });\n                tagCloudLayoutGenerator.random(seed);\n                tagCloudLayoutGenerator.spiral(this._spiral);\n                tagCloudLayoutGenerator.words(job.words);\n                tagCloudLayoutGenerator.text(getDisplayText);\n                tagCloudLayoutGenerator.timeInterval(this._timeInterval);\n\n                this._layoutIsUpdating = true;\n                _context5.next = 19;\n                return new Promise(function (resolve) {\n                  tagCloudLayoutGenerator.on('end', function () {\n                    _this4._layoutIsUpdating = false;\n                    resolve(true);\n                  });\n                  tagCloudLayoutGenerator.start();\n                });\n\n              case 19:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _updateLayout(_x2) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return _updateLayout;\n    }()\n\n    /**\n     * Returns debug info. For debugging only.\n     * @return {*}\n     */\n\n  }, {\n    key: 'getDebugInfo',\n    value: function getDebugInfo() {\n      var debug = {};\n      debug.positions = this._completedJob ? this._completedJob.words.map(function (tag) {\n        return {\n          displayText: tag.displayText,\n          rawText: tag.rawText || tag.text,\n          x: tag.x,\n          y: tag.y,\n          rotate: tag.rotate\n        };\n      }) : [];\n      debug.size = {\n        width: this._size[0],\n        height: this._size[1]\n      };\n      return debug;\n    }\n  }]);\n\n  return TagCloud;\n}(_events.EventEmitter);\n\nTagCloud.STATUS = { COMPLETE: 0, INCOMPLETE: 1 };\n\nfunction seed() {\n  return 0.5; //constant seed (not random) to ensure constant layouts for identical data\n}\n\nfunction getText(word) {\n  return word.rawText;\n}\n\nfunction getDisplayText(word) {\n  return word.displayText;\n}\n\nfunction positionWord(xTranslate, yTranslate, word) {\n\n  if (isNaN(word.x) || isNaN(word.y) || isNaN(word.rotate)) {\n    //move off-screen\n    return 'translate(' + xTranslate * 3 + ', ' + yTranslate * 3 + ')rotate(0)';\n  }\n\n  return 'translate(' + (word.x + xTranslate) + ', ' + (word.y + yTranslate) + ')rotate(' + word.rotate + ')';\n}\n\nfunction getValue(tag) {\n  return tag.value;\n}\n\nfunction getSizeInPixels(tag) {\n  return tag.size + 'px';\n}\n\nvar colorScale = _d2.default.scale.ordinal().range(_seed_colors.seedColors);\nfunction getFill(tag) {\n  return colorScale(tag.text);\n}\n\n/**\n * Hash a string to a number. Ensures there is no random element in positioning strings\n * Retrieved from http://stackoverflow.com/questions/26057572/string-to-unique-hash-in-javascript-jquery\n * @param string\n */\nfunction hashCode(string) {\n  string = JSON.stringify(string);\n  var hash = 0;\n  if (string.length === 0) {\n    return hash;\n  }\n  for (var i = 0; i < string.length; i++) {\n    var char = string.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nexports.default = TagCloud;\nmodule.exports = exports['default'];",null]}