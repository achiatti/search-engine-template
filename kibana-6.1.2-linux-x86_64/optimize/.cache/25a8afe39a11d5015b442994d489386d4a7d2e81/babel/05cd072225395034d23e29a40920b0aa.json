{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/request/request_fetch_params_to_body.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/request/request_fetch_params_to_body.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestFetchParamsToBody = requestFetchParamsToBody;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _aggressive_parse = require('../../../../../core_plugins/kibana/common/utils/aggressive_parse');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction emptySearch() {\n  return {\n    query: {\n      bool: {\n        must_not: [{ match_all: {} }]\n      }\n    }\n  };\n}\n\n/**\n *\n * @param requestsFetchParams {Array.<Object>}\n * @param Promise\n * @param timeFilter - Only needed for time based interval indexes, which support has been removed from in 6.0. Come\n * 7.0 we can completely rip this code out and break them completely. See\n *   https://github.com/elastic/kibana/issues/12242 and\n *   https://github.com/elastic/kibana/pull/12158 for more background\n * @param kbnIndex\n * @param sessionId\n * @return {Promise.<string>}\n */\nfunction requestFetchParamsToBody(requestsFetchParams, Promise, timeFilter, kbnIndex, sessionId) {\n  var indexToListMapping = {};\n  var timeBounds = timeFilter.getActiveBounds();\n  var promises = requestsFetchParams.map(function (fetchParams) {\n    return Promise.resolve(fetchParams.index).then(function (indexList) {\n      if (!_lodash2.default.isFunction(_lodash2.default.get(indexList, 'toIndexList'))) {\n        return indexList;\n      }\n\n      if (!indexToListMapping[indexList.id]) {\n        indexToListMapping[indexList.id] = timeBounds ? indexList.toIndexList(timeBounds.min, timeBounds.max) : indexList.toIndexList();\n      }\n      return indexToListMapping[indexList.id].then(function (indexList) {\n        // Make sure the index list in the cache can't be subsequently updated.\n        return _lodash2.default.clone(indexList);\n      });\n    }).then(function (indexList) {\n      var body = fetchParams.body || {};\n      var index = [];\n      // If we've reached this point and there are no indexes in the\n      // index list at all, it means that we shouldn't expect any indexes\n      // to contain the documents we're looking for, so we instead\n      // perform a request for an index pattern that we know will always\n      // return an empty result (ie. -*). If instead we had gone ahead\n      // with an msearch without any index patterns, elasticsearch would\n      // handle that request by querying *all* indexes, which is the\n      // opposite of what we want in this case.\n      if (Array.isArray(indexList) && indexList.length === 0) {\n        index.push(kbnIndex);\n        body = emptySearch();\n      } else {\n        index = indexList;\n      }\n\n      return JSON.stringify({\n        index: index,\n        type: fetchParams.type,\n        search_type: fetchParams.search_type,\n        ignore_unavailable: true,\n        preference: sessionId\n      }) + '\\n' + (0, _aggressive_parse.toJson)(body, JSON.stringify);\n    });\n  });\n\n  return Promise.all(promises).then(function (requests) {\n    return requests.join('\\n') + '\\n';\n  });\n}",null]}