{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/data_source/build_query/from_filters.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/data_source/build_query/from_filters.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQueryFromFilters = buildQueryFromFilters;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _migrate_filter = require('../_migrate_filter');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a filter that can be reversed for filters with negate set\n * @param {boolean} reverse This will reverse the filter. If true then\n *                          anything where negate is set will come\n *                          through otherwise it will filter out\n * @returns {function}\n */\nvar filterNegate = function filterNegate(reverse) {\n  return function (filter) {\n    if (_lodash2.default.isUndefined(filter.meta) || _lodash2.default.isUndefined(filter.meta.negate)) return !reverse;\n    return filter.meta && filter.meta.negate === reverse;\n  };\n};\n\n/**\n * Translate a filter into a query to support es 5+\n * @param  {Object} filter - The filter to translate\n * @return {Object} the query version of that filter\n */\nvar translateToQuery = function translateToQuery(filter) {\n  if (!filter) return;\n\n  if (filter.query) {\n    return filter.query;\n  }\n\n  return filter;\n};\n\n/**\n * Clean out any invalid attributes from the filters\n * @param {object} filter The filter to clean\n * @returns {object}\n */\nvar cleanFilter = function cleanFilter(filter) {\n  return _lodash2.default.omit(filter, ['meta', '$state']);\n};\n\nfunction buildQueryFromFilters(filters, decorateQuery) {\n  _lodash2.default.each(filters, function (filter) {\n    if (filter.query) {\n      decorateQuery(filter.query);\n    }\n  });\n\n  return {\n    must: (filters || []).filter(filterNegate(false)).map(translateToQuery).map(cleanFilter).map(_migrate_filter.migrateFilter),\n    filter: [],\n    should: [],\n    must_not: (filters || []).filter(filterNegate(true)).map(translateToQuery).map(cleanFilter).map(_migrate_filter.migrateFilter)\n  };\n}",null]}