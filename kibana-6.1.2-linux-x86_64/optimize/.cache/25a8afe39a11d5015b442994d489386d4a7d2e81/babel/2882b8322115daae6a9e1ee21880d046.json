{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/reducers/panels.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/reducers/panels.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.panels = undefined;\n\nvar _handleActions;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _reduxActions = require('redux-actions');\n\nvar _actions = require('../actions');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n *\n * @param panel {PanelState} - new panel data (can be partial data) to merge with possibly existing panel data in\n * the panels mapping.\n * @param panel.panelIndex {String} The new panel data must specify the panelIndex so we know which panel to merge with.\n * @param panels {Object.<string, PanelState>}\n * @return {PanelState} - a new PanelState which has the merged data.\n */\nfunction mergePanelData(panel, panels) {\n  return _lodash2.default.defaultsDeep(panel, panels[panel.panelIndex]);\n}\n\nvar panels = exports.panels = (0, _reduxActions.handleActions)((_handleActions = {}, _defineProperty(_handleActions, _actions.setPanels,\n/**\n *\n * @param panels {Object.<string, PanelState>}\n * @param payload {Object.<string, PanelState>}\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref) {\n  var payload = _ref.payload;\n  return _lodash2.default.cloneDeep(payload);\n}), _defineProperty(_handleActions, _actions.updatePanels,\n/**\n *\n * @param panels {Object.<string, PanelState>}\n * @param payload {Object.<string, PanelState>}\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref2) {\n  var payload = _ref2.payload;\n\n  var panelsCopy = _extends({}, panels);\n  Object.values(payload).forEach(function (panel) {\n    panelsCopy[panel.panelIndex] = mergePanelData(panel, panels);\n  });\n  return panelsCopy;\n}), _defineProperty(_handleActions, _actions.deletePanel,\n/**\n *\n * @param panels {Object.<string, PanelState>}\n * @param payload {string} The panelIndex of the panel to delete\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref3) {\n  var payload = _ref3.payload;\n\n  var panelsCopy = _extends({}, panels);\n  delete panelsCopy[payload];\n  return panelsCopy;\n}), _defineProperty(_handleActions, _actions.updatePanel,\n/**\n * @param panels {Object.<string, PanelState>}\n * @param payload {PanelState} The new panel state (is merged with existing).\n * @param payload.panelIndex {string} The id of the panel to update.\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref4) {\n  var payload = _ref4.payload;\n  return _extends({}, panels, _defineProperty({}, payload.panelIndex, mergePanelData(payload, panels)));\n}), _defineProperty(_handleActions, _actions.resetPanelTitle,\n/**\n * @param panels {Object.<string, PanelState>}\n * @param payload {String} The id of the panel to reset it's title.\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref5) {\n  var payload = _ref5.payload;\n  return _extends({}, panels, _defineProperty({}, payload, _extends({}, panels[payload], {\n    title: undefined\n  })));\n}), _defineProperty(_handleActions, _actions.setPanelTitle,\n/**\n * @param panels {Object.<string, PanelState>}\n * @param payload {PanelState} The new panel state (is merged with existing).\n * @param payload.panelIndex {String} The id of the panel to reset it's title.\n * @param payload.title {String} The new title to use.\n * @return {Object.<string, PanelState>}\n */\nfunction (panels, _ref6) {\n  var payload = _ref6.payload;\n  return _extends({}, panels, _defineProperty({}, payload.panelIndex, mergePanelData(payload, panels)));\n}), _handleActions), {});",null]}