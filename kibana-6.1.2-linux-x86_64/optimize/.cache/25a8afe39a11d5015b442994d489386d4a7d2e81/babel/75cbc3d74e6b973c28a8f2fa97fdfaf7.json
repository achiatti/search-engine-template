{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/utils/streams/split_stream.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/utils/streams/split_stream.js","mtime":1515552212931},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSplitStream = createSplitStream;\n\nvar _stream = require('stream');\n\n/**\n *  Creates a Transform stream that consumes a stream of Buffers\n *  and produces a stream of strings (in object mode) by splitting\n *  the received bytes using the splitChunk.\n *\n *  Ways this is behaves like String#split:\n *    - instances of splitChunk are removed from the input\n *    - splitChunk can be on any size\n *    - if there are no bytes found after the last splitChunk\n *      a final empty chunk is emitted\n *\n *  Ways this deviates from String#split:\n *    - splitChunk cannot be a regexp\n *    - an empty string or Buffer will not produce a stream of individual\n *      bytes like `string.split('')` would\n *\n *  @param  {String} splitChunk\n *  @return {Transform}\n */\nfunction createSplitStream(splitChunk) {\n  var unsplitBuffer = Buffer.alloc(0);\n\n  return new _stream.Transform({\n    writableObjectMode: false,\n    readableObjectMode: true,\n    transform: function transform(chunk, enc, callback) {\n      try {\n        var i = void 0;\n        var toSplit = Buffer.concat([unsplitBuffer, chunk]);\n        while ((i = toSplit.indexOf(splitChunk)) !== -1) {\n          var slice = toSplit.slice(0, i);\n          toSplit = toSplit.slice(i + splitChunk.length);\n          this.push(slice.toString('utf8'));\n        }\n\n        unsplitBuffer = toSplit;\n        callback(null);\n      } catch (err) {\n        callback(err);\n      }\n    },\n    flush: function flush(callback) {\n      try {\n        this.push(unsplitBuffer.toString('utf8'));\n\n        callback(null);\n      } catch (err) {\n        callback(err);\n      }\n    }\n  });\n}",null]}