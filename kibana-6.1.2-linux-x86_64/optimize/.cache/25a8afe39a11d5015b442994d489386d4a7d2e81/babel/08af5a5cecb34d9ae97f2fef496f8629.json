{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/components/color/color_palette.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/components/color/color_palette.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createColorPalette = createColorPalette;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _seed_colors = require('./seed_colors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * Generates an array of hex colors the length of the input number.\n * If the number is greater than the length of seed colors available,\n * new colors are generated up to the value of the input number.\n */\n\nvar offset = 300; // Hue offset to start at\n\nvar fraction = function fraction(goal) {\n  var walkTree = function walkTree(numerator, denominator, bytes) {\n    if (bytes.length) {\n      return walkTree(numerator * 2 + (bytes.pop() ? 1 : -1), denominator * 2, bytes);\n    } else {\n      return numerator / denominator;\n    }\n  };\n\n  var b = (goal + 2).toString(2).split('').map(function (num) {\n    return parseInt(num, 10);\n  });\n  b.shift();\n\n  return walkTree(1, 2, b);\n};\n\nfunction createColorPalette(num) {\n  if (!_lodash2.default.isNumber(num)) {\n    throw new TypeError('ColorPaletteUtilService expects a number');\n  }\n\n  var colors = _seed_colors.seedColors;\n\n  var seedLength = _seed_colors.seedColors.length;\n\n  _lodash2.default.times(num - seedLength, function (i) {\n    colors.push(_d2.default.hsl((fraction(i + seedLength + 1) * 360 + offset) % 360, 0.5, 0.5).toString());\n  });\n\n  return colors;\n}",null]}