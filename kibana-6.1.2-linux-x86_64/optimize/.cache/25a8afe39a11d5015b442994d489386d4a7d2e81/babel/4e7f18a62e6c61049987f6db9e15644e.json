{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/common/field_formats/types/date.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/common/field_formats/types/date.js","mtime":1515552206452},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDateFormat = createDateFormat;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction createDateFormat(FieldFormat) {\n  var _class, _temp;\n\n  return _temp = _class = function (_FieldFormat) {\n    _inherits(DateFormat, _FieldFormat);\n\n    function DateFormat(params, getConfig) {\n      _classCallCheck(this, DateFormat);\n\n      var _this = _possibleConstructorReturn(this, (DateFormat.__proto__ || Object.getPrototypeOf(DateFormat)).call(this, params));\n\n      _this.getConfig = getConfig;\n      return _this;\n    }\n\n    _createClass(DateFormat, [{\n      key: 'getParamDefaults',\n      value: function getParamDefaults() {\n        return {\n          pattern: this.getConfig('dateFormat'),\n          timezone: this.getConfig('dateFormat:tz')\n        };\n      }\n    }, {\n      key: '_convert',\n      value: function _convert(val) {\n        // don't give away our ref to converter so\n        // we can hot-swap when config changes\n        var pattern = this.param('pattern');\n        var timezone = this.param('timezone');\n\n        var timezoneChanged = this._timeZone !== timezone;\n        var datePatternChanged = this._memoizedPattern !== pattern;\n        if (timezoneChanged || datePatternChanged) {\n          this._timeZone = timezone;\n          this._memoizedPattern = pattern;\n\n          this._memoizedConverter = _lodash2.default.memoize(function converter(val) {\n            if (val === null || val === undefined) {\n              return '-';\n            }\n\n            var date = (0, _moment2.default)(val);\n            if (date.isValid()) {\n              return date.format(pattern);\n            } else {\n              return val;\n            }\n          });\n        }\n\n        return this._memoizedConverter(val);\n      }\n    }]);\n\n    return DateFormat;\n  }(FieldFormat), _class.id = 'date', _class.title = 'Date', _class.fieldType = 'date', _temp;\n}",null]}