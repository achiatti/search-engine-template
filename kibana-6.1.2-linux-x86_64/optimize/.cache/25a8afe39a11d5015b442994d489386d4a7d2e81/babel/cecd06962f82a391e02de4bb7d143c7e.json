{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/utils/streams/intersperse_stream.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/utils/streams/intersperse_stream.js","mtime":1515552212839},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIntersperseStream = createIntersperseStream;\n\nvar _stream = require('stream');\n\n/**\n *  Create a Transform stream that receives values in object mode,\n *  and intersperses a chunk between each object received.\n *\n *  This is useful for writing lists:\n *\n *    createListStream(['foo', 'bar'])\n *      .pipe(createIntersperseStream('\\n'))\n *      .pipe(process.stdout) // outputs \"foo\\nbar\"\n *\n *  Combine with a concat stream to get \"join\" like functionality:\n *\n *    await createPromiseFromStreams([\n *      createListStream(['foo', 'bar']),\n *      createIntersperseStream(' '),\n *      createConcatStream()\n *    ]) // produces a single value \"foo bar\"\n *\n *  @param  {String|Buffer} intersperseChunk\n *  @return {Transform}\n */\nfunction createIntersperseStream(intersperseChunk) {\n  var first = true;\n\n  return new _stream.Transform({\n    writableObjectMode: true,\n    readableObjectMode: true,\n    transform: function transform(chunk, enc, callback) {\n      try {\n        if (first) {\n          first = false;\n        } else {\n          this.push(intersperseChunk);\n        }\n\n        this.push(chunk);\n        callback(null);\n      } catch (err) {\n        callback(err);\n      }\n    }\n  });\n}",null]}