{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/panel/panel_header/panel_options_menu_container.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PanelOptionsMenuContainer = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reactRedux = require('react-redux');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _panel_options_menu = require('./panel_options_menu');\n\nvar _actions = require('../../actions');\n\nvar _selectors = require('../../selectors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar mapStateToProps = function mapStateToProps(_ref, _ref2) {\n  var dashboard = _ref.dashboard;\n  var panelId = _ref2.panelId;\n\n  var embeddable = (0, _selectors.getEmbeddable)(dashboard, panelId);\n  var panel = (0, _selectors.getPanel)(dashboard, panelId);\n  var embeddableTitle = embeddable ? embeddable.title : '';\n  return {\n    panelTitle: panel.title === undefined ? embeddableTitle : panel.title,\n    editUrl: embeddable ? (0, _selectors.getEmbeddableEditUrl)(dashboard, panelId) : null,\n    isExpanded: (0, _selectors.getMaximizedPanelId)(dashboard) === panelId\n  };\n};\n\n/**\n * @param dispatch {Function}\n * @param embeddableFactory {EmbeddableFactory}\n * @param panelId {string}\n */\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref3) {\n  var embeddableFactory = _ref3.embeddableFactory,\n      panelId = _ref3.panelId;\n  return {\n    onDeletePanel: function onDeletePanel() {\n      dispatch((0, _actions.deletePanel)(panelId));\n      dispatch((0, _actions.destroyEmbeddable)(panelId, embeddableFactory));\n    },\n    onMaximizePanel: function onMaximizePanel() {\n      return dispatch((0, _actions.maximizePanel)(panelId));\n    },\n    onMinimizePanel: function onMinimizePanel() {\n      return dispatch((0, _actions.minimizePanel)());\n    },\n    onResetPanelTitle: function onResetPanelTitle() {\n      return dispatch((0, _actions.resetPanelTitle)(panelId));\n    },\n    onUpdatePanelTitle: function onUpdatePanelTitle(newTitle) {\n      return dispatch((0, _actions.setPanelTitle)(newTitle, panelId));\n    }\n  };\n};\n\nvar mergeProps = function mergeProps(stateProps, dispatchProps) {\n  var isExpanded = stateProps.isExpanded,\n      editUrl = stateProps.editUrl,\n      panelTitle = stateProps.panelTitle;\n\n  var onMaximizePanel = dispatchProps.onMaximizePanel,\n      onMinimizePanel = dispatchProps.onMinimizePanel,\n      dispatchers = _objectWithoutProperties(dispatchProps, ['onMaximizePanel', 'onMinimizePanel']);\n\n  var toggleExpandedPanel = function toggleExpandedPanel() {\n    return isExpanded ? onMinimizePanel() : onMaximizePanel();\n  };\n\n  return _extends({\n    panelTitle: panelTitle,\n    toggleExpandedPanel: toggleExpandedPanel,\n    isExpanded: isExpanded,\n    editUrl: editUrl\n  }, dispatchers);\n};\n\nvar PanelOptionsMenuContainer = exports.PanelOptionsMenuContainer = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_panel_options_menu.PanelOptionsMenu);\n\nPanelOptionsMenuContainer.propTypes = {\n  panelId: _propTypes2.default.string.isRequired,\n  /**\n   * @type {EmbeddableFactory}\n   */\n  embeddableFactory: _propTypes2.default.shape({\n    destroy: _propTypes2.default.func.isRequired,\n    render: _propTypes2.default.func.isRequired,\n    addDestroyEmeddable: _propTypes2.default.func.isRequired\n  }).isRequired\n};",null]}