{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/sense_editor/mode/input.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/sense_editor/mode/input.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mode = Mode;\nvar acequire = require('acequire');\nrequire('ace');\nrequire('ace/mode-json');\n\nvar oop = acequire(\"ace/lib/oop\");\nvar TextMode = acequire(\"ace/mode/text\").Mode;\nvar ScriptMode = require(\"./script\").ScriptMode;\nvar MatchingBraceOutdent = acequire(\"ace/mode/matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"ace/mode/behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"ace/mode/folding/cstyle\").FoldMode;\nvar WorkerClient = acequire(\"ace/worker/worker_client\").WorkerClient;\nvar AceTokenizer = acequire(\"ace/tokenizer\").Tokenizer;\n\nvar HighlightRules = require(\"./input_highlight_rules\").InputHighlightRules;\n\nacequire(\"ace/config\").setModuleUrl(\"sense_editor/mode/worker\", require(\"file-loader!./worker.js\"));\n\nfunction Mode() {\n  this.$tokenizer = new AceTokenizer(new HighlightRules().getRules());\n  this.$outdent = new MatchingBraceOutdent();\n  this.$behaviour = new CstyleBehaviour();\n  this.foldingRules = new CStyleFoldMode();\n  this.createModeDelegates({\n    \"script-\": ScriptMode\n  });\n}\noop.inherits(Mode, TextMode);\n\n(function () {\n  this.getCompletions = function () {\n    // autocomplete is done by the autocomplete module.\n    return [];\n  };\n\n  this.getNextLineIndent = function (state, line, tab) {\n    var indent = this.$getIndent(line);\n\n    if (state !== \"string_literal\") {\n      var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n      if (match) {\n        indent += tab;\n      }\n    }\n\n    return indent;\n  };\n\n  this.checkOutdent = function (state, line, input) {\n    return this.$outdent.checkOutdent(line, input);\n  };\n\n  this.autoOutdent = function (state, doc, row) {\n    this.$outdent.autoOutdent(doc, row);\n  };\n\n  this.createWorker = function (session) {\n    var worker = new WorkerClient([\"ace\", \"sense_editor\"], \"sense_editor/mode/worker\", \"SenseWorker\");\n    worker.attachToDocument(session.getDocument());\n\n    worker.on(\"error\", function (e) {\n      session.setAnnotations([e.data]);\n    });\n\n    worker.on(\"ok\", function (anno) {\n      session.setAnnotations(anno.data);\n    });\n\n    return worker;\n  };\n}).call(Mode.prototype);",null]}