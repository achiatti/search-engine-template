{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/geo_polygon.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/geo_polygon.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\n\nvar _node_types = require('../node_types');\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction buildNodeParams(fieldName, points) {\n  var fieldNameArg = _node_types.nodeTypes.literal.buildNode(fieldName);\n  var args = points.map(function (point) {\n    var latLon = point.lat + ', ' + point.lon;\n    return _node_types.nodeTypes.literal.buildNode(latLon);\n  });\n\n  return {\n    arguments: [fieldNameArg].concat(_toConsumableArray(args))\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _geo_polygon;\n\n  var _node$arguments = _toArray(node.arguments),\n      fieldNameArg = _node$arguments[0],\n      points = _node$arguments.slice(1);\n\n  var fieldName = _node_types.nodeTypes.literal.toElasticsearchQuery(fieldNameArg);\n  var field = indexPattern.fields.byName[fieldName];\n  var queryParams = {\n    points: points.map(ast.toElasticsearchQuery)\n  };\n\n  if (field && field.scripted) {\n    throw new Error('Geo polygon query does not support scripted fields');\n  }\n\n  return {\n    geo_polygon: (_geo_polygon = {}, _defineProperty(_geo_polygon, fieldName, queryParams), _defineProperty(_geo_polygon, 'ignore_unmapped', true), _geo_polygon)\n  };\n}",null]}