{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/edit_index_pattern.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/edit_index_pattern.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('./index_header');\n\nrequire('./indexed_fields_table');\n\nrequire('./scripted_fields_table');\n\nrequire('./scripted_field_editor');\n\nrequire('./source_filters_table');\n\nvar _url = require('ui/url');\n\nvar _edit_sections = require('./edit_sections');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _modules = require('ui/modules');\n\nvar _edit_index_pattern = require('./edit_index_pattern.html');\n\nvar _edit_index_pattern2 = _interopRequireDefault(_edit_index_pattern);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/management/kibana/indices/:indexPatternId', {\n  template: _edit_index_pattern2.default,\n  resolve: {\n    indexPattern: function indexPattern($route, courier) {\n      return courier.indexPatterns.get($route.current.params.indexPatternId).catch(courier.redirectWhenMissing('/management/kibana/index'));\n    }\n  }\n});\n\n_routes2.default.when('/management/kibana/indices', {\n  resolve: {\n    redirect: function redirect($location, config) {\n      var defaultIndex = config.get('defaultIndex');\n      var path = '/management/kibana/index';\n\n      if (defaultIndex) {\n        path = '/management/kibana/indices/' + defaultIndex;\n      }\n\n      $location.path(path).replace();\n    }\n  }\n});\n\n_modules.uiModules.get('apps/management').controller('managementIndicesEdit', function ($scope, $location, $route, config, courier, Notifier, Private, AppState, docTitle, confirmModal) {\n  var notify = new Notifier();\n  var $state = $scope.state = new AppState();\n\n  $scope.kbnUrl = Private(_url.KbnUrlProvider);\n  $scope.indexPattern = $route.current.locals.indexPattern;\n  docTitle.change($scope.indexPattern.title);\n\n  var otherPatterns = _lodash2.default.filter($route.current.locals.indexPatterns, function (pattern) {\n    return pattern.id !== $scope.indexPattern.id;\n  });\n\n  $scope.$watch('indexPattern.fields', function () {\n    $scope.editSections = Private(_edit_sections.IndicesEditSectionsProvider)($scope.indexPattern);\n    $scope.refreshFilters();\n  });\n\n  $scope.refreshFilters = function () {\n    var indexedFieldTypes = [];\n    var scriptedFieldLanguages = [];\n    $scope.indexPattern.fields.forEach(function (field) {\n      if (field.scripted) {\n        scriptedFieldLanguages.push(field.lang);\n      } else {\n        indexedFieldTypes.push(field.type);\n      }\n    });\n\n    $scope.indexedFieldTypes = _lodash2.default.unique(indexedFieldTypes);\n    $scope.scriptedFieldLanguages = _lodash2.default.unique(scriptedFieldLanguages);\n  };\n\n  $scope.changeFilter = function (filter, val) {\n    $scope[filter] = val || ''; // null causes filter to check for null explicitly\n  };\n\n  $scope.changeTab = function (obj) {\n    $state.tab = obj.index;\n    $state.save();\n  };\n\n  $scope.$watch('state.tab', function (tab) {\n    if (!tab) $scope.changeTab($scope.editSections[0]);\n  });\n\n  $scope.$watchCollection('indexPattern.fields', function () {\n    $scope.conflictFields = $scope.indexPattern.fields.filter(function (field) {\n      return field.type === 'conflict';\n    });\n  });\n\n  $scope.refreshFields = function () {\n    var confirmModalOptions = {\n      confirmButtonText: 'Refresh fields',\n      onConfirm: function onConfirm() {\n        $scope.indexPattern.refreshFields();\n      }\n    };\n    confirmModal('This will reset the field popularity counters. Are you sure you want to refresh your fields?', confirmModalOptions);\n  };\n\n  $scope.removePattern = function () {\n    function doRemove() {\n      if ($scope.indexPattern.id === config.get('defaultIndex')) {\n        config.remove('defaultIndex');\n\n        if (otherPatterns.length) {\n          config.set('defaultIndex', otherPatterns[0].id);\n        }\n      }\n\n      courier.indexPatterns.delete($scope.indexPattern).then(function () {\n        $location.url('/management/kibana/index');\n      }).catch(notify.fatal);\n    }\n\n    var confirmModalOptions = {\n      confirmButtonText: 'Remove index pattern',\n      onConfirm: doRemove\n    };\n    confirmModal('Are you sure you want to remove this index pattern?', confirmModalOptions);\n  };\n\n  $scope.setDefaultPattern = function () {\n    config.set('defaultIndex', $scope.indexPattern.id);\n  };\n\n  $scope.setIndexPatternsTimeField = function (field) {\n    if (field.type !== 'date') {\n      notify.error('That field is a ' + field.type + ' not a date.');\n      return;\n    }\n    $scope.indexPattern.timeFieldName = field.name;\n    return $scope.indexPattern.save();\n  };\n});",null]}