{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/saved_objects/saved_objects_client.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/saved_objects/saved_objects_client.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SavedObjectsClient = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _url = require('url');\n\nvar _case_conversion = require('../../../utils/case_conversion');\n\nvar _saved_object = require('./saved_object');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar join = function join() {\n  for (var _len = arguments.length, uriComponents = Array(_len), _key = 0; _key < _len; _key++) {\n    uriComponents[_key] = arguments[_key];\n  }\n\n  return uriComponents.filter(Boolean).map(encodeURIComponent).join('/');\n};\n\n/**\n * Interval that requests are batched for\n * @type {integer}\n */\nvar BATCH_INTERVAL = 100;\n\nvar SavedObjectsClient = exports.SavedObjectsClient = function () {\n  function SavedObjectsClient(options) {\n    var _this = this;\n\n    _classCallCheck(this, SavedObjectsClient);\n\n    this.processBatchQueue = _lodash2.default.throttle(function () {\n      var queue = _lodash2.default.cloneDeep(_this.batchQueue);\n      _this.batchQueue = [];\n\n      _this.bulkGet(queue).then(function (_ref) {\n        var savedObjects = _ref.savedObjects;\n\n        queue.forEach(function (queueItem) {\n          var foundObject = savedObjects.find(function (savedObject) {\n            return savedObject.id === queueItem.id & savedObject.type === queueItem.type;\n          });\n\n          if (!foundObject) {\n            return queueItem.resolve(_this.createSavedObject(_lodash2.default.pick(queueItem, ['id', 'type'])));\n          }\n\n          queueItem.resolve(foundObject);\n        });\n      });\n    }, BATCH_INTERVAL, { leading: false });\n    var $http = options.$http,\n        _options$basePath = options.basePath,\n        basePath = _options$basePath === undefined ? _chrome2.default.getBasePath() : _options$basePath,\n        _options$PromiseConst = options.PromiseConstructor,\n        PromiseConstructor = _options$PromiseConst === undefined ? Promise : _options$PromiseConst,\n        _options$onCreateFail = options.onCreateFailure,\n        onCreateFailure = _options$onCreateFail === undefined ? function () {} : _options$onCreateFail;\n\n\n    this._$http = $http;\n    this._apiBaseUrl = basePath + '/api/saved_objects/';\n    this._PromiseCtor = PromiseConstructor;\n    this._onCreateFailure = onCreateFailure;\n    this.batchQueue = [];\n  }\n\n  /**\n  * Persists an object\n  *\n  * @param {string} type\n  * @param {object} [attributes={}]\n  * @param {object} [options={}]\n  * @property {string} [options.id] - force id on creation, not recommended\n  * @property {boolean} [options.overwrite=false]\n  * @returns {promise} - SavedObject({ id, type, version, attributes })\n  */\n\n\n  _createClass(SavedObjectsClient, [{\n    key: 'create',\n    value: function create(type) {\n      var _this2 = this;\n\n      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!type || !attributes) {\n        return this._PromiseCtor.reject(new Error('requires type and attributes'));\n      }\n\n      var url = this._getUrl([type, options.id], _lodash2.default.pick(options, ['overwrite']));\n\n      return this._request('POST', url, { attributes: attributes }).catch(this._onCreateFailure).then(function (resp) {\n        return _this2.createSavedObject(resp);\n      });\n    }\n\n    /**\n     * Deletes an object\n     *\n     * @param {string} type\n     * @param {string} id\n     * @returns {promise}\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(type, id) {\n      if (!type || !id) {\n        return this._PromiseCtor.reject(new Error('requires type and id'));\n      }\n\n      return this._request('DELETE', this._getUrl([type, id]));\n    }\n\n    /**\n     * Search for objects\n     *\n     * @param {object} [options={}]\n     * @property {string} options.type\n     * @property {string} options.search\n     * @property {string} options.searchFields - see Elasticsearch Simple Query String\n     *                                        Query field argument for more information\n     * @property {integer} [options.page=1]\n     * @property {integer} [options.perPage=20]\n     * @property {array} options.fields\n     * @returns {promise} - { savedObjects: [ SavedObject({ id, type, version, attributes }) ]}\n     */\n\n  }, {\n    key: 'find',\n    value: function find() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var url = this._getUrl([], (0, _case_conversion.keysToSnakeCaseShallow)(options));\n\n      return this._request('GET', url).then(function (resp) {\n        resp.saved_objects = resp.saved_objects.map(function (d) {\n          return _this3.createSavedObject(d);\n        });\n        return (0, _case_conversion.keysToCamelCaseShallow)(resp);\n      });\n    }\n\n    /**\n     * Fetches a single object\n     *\n     * @param {string} type\n     * @param {string} id\n     * @returns {promise} - SavedObject({ id, type, version, attributes })\n     */\n\n  }, {\n    key: 'get',\n    value: function get(type, id) {\n      var _this4 = this;\n\n      if (!type || !id) {\n        return this._PromiseCtor.reject(new Error('requires type and id'));\n      }\n\n      return new this._PromiseCtor(function (resolve, reject) {\n        _this4.batchQueue.push({ type: type, id: id, resolve: resolve, reject: reject });\n        _this4.processBatchQueue();\n      });\n    }\n\n    /**\n     * Returns an array of objects by id\n     *\n     * @param {array} objects - an array ids, or an array of objects containing id and optionally type\n     * @returns {promise} - { savedObjects: [ SavedObject({ id, type, version, attributes }) ] }\n     * @example\n     *\n     * bulkGet([\n     *   { id: 'one', type: 'config' },\n     *   { id: 'foo', type: 'index-pattern' }\n     * ])\n     */\n\n  }, {\n    key: 'bulkGet',\n    value: function bulkGet() {\n      var _this5 = this;\n\n      var objects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var url = this._getUrl(['bulk_get']);\n      var filteredObjects = objects.map(function (obj) {\n        return _lodash2.default.pick(obj, ['id', 'type']);\n      });\n\n      return this._request('POST', url, filteredObjects).then(function (resp) {\n        resp.saved_objects = resp.saved_objects.map(function (d) {\n          return _this5.createSavedObject(d);\n        });\n        return (0, _case_conversion.keysToCamelCaseShallow)(resp);\n      });\n    }\n\n    /**\n     * Updates an object\n     *\n     * @param {string} type\n     * @param {string} id\n     * @param {object} options\n     * @param {integer} options.version - ensures version matches that of persisted object\n     * @returns {promise}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(type, id, attributes) {\n      var _this6 = this;\n\n      var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          version = _ref2.version;\n\n      if (!type || !id || !attributes) {\n        return this._PromiseCtor.reject(new Error('requires type, id and attributes'));\n      }\n\n      var body = {\n        attributes: attributes,\n        version: version\n      };\n\n      return this._request('PUT', this._getUrl([type, id]), body).then(function (resp) {\n        return _this6.createSavedObject(resp);\n      });\n    }\n\n    /**\n     * Throttled processing of get requests into bulk requests at 100ms interval\n     */\n\n  }, {\n    key: 'createSavedObject',\n    value: function createSavedObject(options) {\n      return new _saved_object.SavedObject(this, options);\n    }\n  }, {\n    key: '_getUrl',\n    value: function _getUrl(path, query) {\n      if (!path && !query) {\n        return this._apiBaseUrl;\n      }\n\n      return (0, _url.resolve)(this._apiBaseUrl, (0, _url.format)({\n        pathname: join.apply(undefined, _toConsumableArray(path)),\n        query: _lodash2.default.pick(query, function (value) {\n          return value != null;\n        })\n      }));\n    }\n  }, {\n    key: '_request',\n    value: function _request(method, url, body) {\n      var options = { method: method, url: url, data: body };\n\n      if (method === 'GET' && body) {\n        return this._PromiseCtor.reject(new Error('body not permitted for GET requests'));\n      }\n\n      return this._$http(options).then(function (resp) {\n        return _lodash2.default.get(resp, 'data');\n      }).catch(function (resp) {\n        var respBody = _lodash2.default.get(resp, 'data', {});\n        var err = new Error(respBody.message || respBody.error || resp.status + ' Response');\n\n        err.statusCode = respBody.statusCode || resp.status;\n        err.body = respBody;\n\n        throw err;\n      });\n    }\n  }]);\n\n  return SavedObjectsClient;\n}();",null]}