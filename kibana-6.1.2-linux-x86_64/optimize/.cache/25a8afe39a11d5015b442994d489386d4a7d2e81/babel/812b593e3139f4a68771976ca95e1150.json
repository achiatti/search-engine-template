{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kbn_vislib_vis_types/public/controls/heatmap_options.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kbn_vislib_vis_types/public/controls/heatmap_options.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _heatmap_options = require('plugins/kbn_vislib_vis_types/controls/heatmap_options.html');\n\nvar _heatmap_options2 = _interopRequireDefault(_heatmap_options);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('heatmapOptions', function () {\n  return {\n    restrict: 'E',\n    template: _heatmap_options2.default,\n    replace: true,\n    link: function link($scope) {\n\n      $scope.collections = $scope.vis.type.editorConfig.collections;\n\n      var verticalRotation = 270;\n      $scope.showColorRange = false;\n      $scope.showLabels = false;\n      $scope.customColors = false;\n      $scope.valueAxis = $scope.vis.params.valueAxes[0];\n      $scope.options = {\n        rotateLabels: $scope.valueAxis.labels.rotate === verticalRotation\n      };\n\n      $scope.$watch('options.rotateLabels', function (rotate) {\n        $scope.vis.params.valueAxes[0].labels.rotate = rotate ? verticalRotation : 0;\n      });\n\n      $scope.resetColors = function () {\n        $scope.uiState.set('vis.colors', null);\n        $scope.customColors = false;\n      };\n\n      $scope.toggleColorRangeSection = function () {\n        var checkbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        $scope.showColorRange = !$scope.showColorRange;\n        if (checkbox && !$scope.vis.params.setColorRange) $scope.showColorRange = false;\n        if (!checkbox && $scope.showColorRange && !$scope.vis.params.setColorRange) $scope.vis.params.setColorRange = true;\n      };\n\n      $scope.toggleLabelSection = function () {\n        var checkbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        $scope.showLabels = !$scope.showLabels;\n        if (checkbox && !$scope.valueAxis.labels.show) $scope.showLabels = false;\n        if ($scope.showLabels && !$scope.valueAxis.labels.show) {\n          $scope.vis.params.valueAxes[0].labels.show = true;\n        }\n      };\n\n      $scope.getGreaterThan = function (index) {\n        if (index === 0) return;\n        return $scope.vis.params.colorsRange[index - 1].to;\n      };\n\n      $scope.addRange = function () {\n        var previousRange = _lodash2.default.last($scope.vis.params.colorsRange);\n        var from = previousRange ? previousRange.to : 0;\n        $scope.vis.params.colorsRange.push({ from: from, to: null });\n      };\n\n      $scope.removeRange = function (index) {\n        $scope.vis.params.colorsRange.splice(index, 1);\n      };\n\n      $scope.getColor = function (index) {\n        var defaultColors = this.uiState.get('vis.defaultColors');\n        var overwriteColors = this.uiState.get('vis.colors');\n        var colors = defaultColors ? _lodash2.default.defaults({}, overwriteColors, defaultColors) : overwriteColors;\n        return colors ? Object.values(colors)[index] : 'transparent';\n      };\n\n      $scope.uiState.on('colorChanged', function () {\n        $scope.customColors = true;\n      });\n    }\n  };\n});",null]}