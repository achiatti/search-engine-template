{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/tabify/_buckets.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/tabify/_buckets.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggResponseBucketsProvider = AggResponseBucketsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggResponseBucketsProvider() {\n\n  function Buckets(aggResp, aggParams) {\n    if (_lodash2.default.has(aggResp, 'buckets')) {\n      this.buckets = aggResp.buckets;\n    } else {\n      // Some Bucket Aggs only return a single bucket (like filter).\n      // In those instances, the aggResp is the content of the single bucket.\n      this.buckets = [aggResp];\n    }\n\n    this.objectMode = _lodash2.default.isPlainObject(this.buckets);\n    if (this.objectMode) {\n      this._keys = _lodash2.default.keys(this.buckets);\n      this.length = this._keys.length;\n    } else {\n      this.length = this.buckets.length;\n    }\n\n    if (this.length && aggParams) this._orderBucketsAccordingToParams(aggParams);\n  }\n\n  Buckets.prototype.forEach = function (fn) {\n    var buckets = this.buckets;\n\n    if (this.objectMode) {\n      this._keys.forEach(function (key) {\n        fn(buckets[key], key);\n      });\n    } else {\n      buckets.forEach(function (bucket) {\n        fn(bucket, bucket.key);\n      });\n    }\n  };\n\n  Buckets.prototype._isRangeEqual = function (range1, range2) {\n    return _lodash2.default.get(range1, 'from', null) === _lodash2.default.get(range2, 'from', null) && _lodash2.default.get(range1, 'to', null) === _lodash2.default.get(range2, 'to', null);\n  };\n\n  Buckets.prototype._orderBucketsAccordingToParams = function (params) {\n    var _this = this;\n\n    if (params.filters && this.objectMode) {\n      this._keys = params.filters.map(function (filter) {\n        return filter.label || filter.input.query || '*';\n      });\n    } else if (params.ranges && this.objectMode) {\n      this._keys = params.ranges.map(function (range) {\n        return _lodash2.default.findKey(_this.buckets, function (el) {\n          return _this._isRangeEqual(el, range);\n        });\n      });\n    } else if (params.ranges && params.field.type !== 'date') {\n      var ranges = params.ranges;\n      if (params.ipRangeType) {\n        ranges = params.ipRangeType === 'mask' ? ranges.mask : ranges.fromTo;\n      }\n      this.buckets = ranges.map(function (range) {\n        if (range.mask) return _this.buckets.find(function (el) {\n          return el.key === range.mask;\n        });\n        return _this.buckets.find(function (el) {\n          return _this._isRangeEqual(el, range);\n        });\n      });\n    }\n  };\n\n  return Buckets;\n}",null]}