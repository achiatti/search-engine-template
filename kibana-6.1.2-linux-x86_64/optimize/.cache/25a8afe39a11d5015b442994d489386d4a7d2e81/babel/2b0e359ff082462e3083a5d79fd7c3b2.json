{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/input.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/input.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initializeInput = initializeInput;\nexports.default = getInput;\n\nvar _modules = require('ui/modules');\n\nvar $ = require('jquery');\nrequire('ace');\nrequire('ace/ext-searchbox');\nvar Autocomplete = require('./autocomplete');\nvar SenseEditor = require('./sense_editor/editor');\nvar settings = require('./settings');\nvar utils = require('./utils');\nvar es = require('./es');\nvar history = require('./history');\n\n\nvar input = void 0;\nfunction initializeInput($el, $actionsEl, $copyAsCurlEl, output) {\n  input = new SenseEditor($el);\n\n  // this may not exist if running from tests\n  var appSense = _modules.uiModules.get('app/sense');\n  appSense.setupResizeCheckerForRootEditors($el, input, output);\n\n  input.autocomplete = new Autocomplete(input);\n\n  input.$actions = $actionsEl;\n\n  input.commands.addCommand({\n    name: 'auto indent request',\n    bindKey: { win: 'Ctrl-I', mac: 'Command-I' },\n    exec: function exec() {\n      input.autoIndent();\n    }\n  });\n  input.commands.addCommand({\n    name: 'move to previous request start or end',\n    bindKey: { win: 'Ctrl-Up', mac: 'Command-Up' },\n    exec: function exec() {\n      input.moveToPreviousRequestEdge();\n    }\n  });\n  input.commands.addCommand({\n    name: 'move to next request start or end',\n    bindKey: { win: 'Ctrl-Down', mac: 'Command-Down' },\n    exec: function exec() {\n      input.moveToNextRequestEdge();\n    }\n  });\n\n  /**\n   * COPY AS CURL\n   */\n  (function setupClipboard() {\n    function copyText(text) {\n      var node = $('<textarea style=\"height:1px\"></textarea').val(text).appendTo(document.body).select();\n      document.execCommand('copy');\n      node.remove();\n    }\n\n    if (!document.queryCommandSupported('copy')) {\n      $copyAsCurlEl.hide();\n      return;\n    }\n\n    $copyAsCurlEl.click(function () {\n      copyText($copyAsCurlEl.attr('data-clipboard-text'));\n    });\n\n    input.$actions.on('mouseenter', function () {\n      if ($(this).hasClass('open')) return;\n      input.getRequestsAsCURL(function (text) {\n        $copyAsCurlEl.attr('data-clipboard-text', text);\n      });\n    });\n  })();\n\n  /**\n   * Setup the \"send\" shortcut\n   */\n\n  var CURRENT_REQ_ID = 0;\n\n  function sendCurrentRequestToES() {\n\n    var req_id = ++CURRENT_REQ_ID;\n\n    input.getRequestsInRange(function (requests) {\n      if (req_id != CURRENT_REQ_ID) {\n        return;\n      }\n      output.update('');\n\n      if (requests.length == 0) {\n        return;\n      }\n\n      var isMultiRequest = requests.length > 1;\n      var finishChain = function finishChain() {/* noop */};\n\n      var isFirstRequest = true;\n\n      var sendNextRequest = function sendNextRequest() {\n        if (req_id != CURRENT_REQ_ID) {\n          return;\n        }\n        if (requests.length == 0) {\n          finishChain();\n          return;\n        }\n        var req = requests.shift();\n        var es_path = req.url;\n        var es_method = req.method;\n        var es_data = utils.collapseLiteralStrings(req.data.join(\"\\n\"));\n        if (es_data) {\n          es_data += \"\\n\";\n        } //append a new line for bulk requests.\n\n        es.send(es_method, es_path, es_data).always(function (dataOrjqXHR, textStatus, jqXhrORerrorThrown) {\n          if (req_id != CURRENT_REQ_ID) {\n            return;\n          }\n          var xhr;\n          if (dataOrjqXHR.promise) {\n            xhr = dataOrjqXHR;\n          } else {\n            xhr = jqXhrORerrorThrown;\n          }\n          function modeForContentType(contentType) {\n            if (contentType.indexOf(\"text/plain\") >= 0) {\n              return \"ace/mode/text\";\n            } else if (contentType.indexOf(\"application/yaml\") >= 0) {\n              return \"ace/mode/yaml\";\n            }\n            return null;\n          }\n\n          if (typeof xhr.status == \"number\" && (\n          // things like DELETE index where the index is not there are OK.\n          xhr.status >= 200 && xhr.status < 300 || xhr.status == 404)) {\n            // we have someone on the other side. Add to history\n            history.addToHistory(es_path, es_method, es_data);\n\n            var value = xhr.responseText;\n            var mode = modeForContentType(xhr.getAllResponseHeaders(\"Content-Type\") || \"\");\n\n            if (mode === null || mode === \"application/json\") {\n              // assume json - auto pretty\n              try {\n                value = utils.expandLiteralStrings(JSON.stringify(JSON.parse(value), null, 2));\n              } catch (e) {}\n            }\n\n            var warnings = xhr.getResponseHeader(\"warning\");\n            if (warnings) {\n              var deprecationMessages = utils.extractDeprecationMessages(warnings);\n              value = deprecationMessages.join(\"\\n\") + \"\\n\" + value;\n            }\n\n            if (isMultiRequest) {\n              value = \"# \" + req.method + \" \" + req.url + \"\\n\" + value;\n            }\n            if (isFirstRequest) {\n              output.update(value, mode);\n            } else {\n              output.append(\"\\n\" + value);\n            }\n            isFirstRequest = false;\n            // single request terminate via sendNextRequest as well\n            sendNextRequest();\n          } else {\n            var _value = void 0,\n                _mode = void 0;\n            if (xhr.responseText) {\n              _value = xhr.responseText; // ES error should be shown\n              _mode = modeForContentType(xhr.getAllResponseHeaders(\"Content-Type\") || \"\");\n              if (_value[0] == \"{\") {\n                try {\n                  _value = JSON.stringify(JSON.parse(_value), null, 2);\n                } catch (e) {}\n              }\n            } else {\n              _value = \"Request failed to get to the server (status code: \" + xhr.status + \")\";\n              _mode = 'ace/mode/text';\n            }\n            if (isMultiRequest) {\n              _value = \"# \" + req.method + \" \" + req.url + \"\\n\" + _value;\n            }\n            if (isFirstRequest) {\n              output.update(_value, _mode);\n            } else {\n              output.append(\"\\n\" + _value);\n            }\n            finishChain();\n          }\n        });\n      };\n\n      sendNextRequest();\n    });\n  }\n\n  input.commands.addCommand({\n    name: 'send to elasticsearch',\n    bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' },\n    exec: sendCurrentRequestToES\n  });\n\n  /**\n   * Init the editor\n   */\n  if (settings) {\n    settings.applyCurrentSettings(input);\n  }\n  input.focus();\n  input.highlightCurrentRequestsAndUpdateActionBar();\n\n  input.sendCurrentRequestToES = sendCurrentRequestToES;\n  require('./input_resize')(input, output);\n\n  return input;\n}\n\nfunction getInput() {\n  return input;\n}",null]}