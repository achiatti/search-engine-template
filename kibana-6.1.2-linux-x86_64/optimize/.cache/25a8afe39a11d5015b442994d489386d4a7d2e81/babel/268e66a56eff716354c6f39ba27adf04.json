{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/courier.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/courier.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/es');\n\nrequire('ui/promises');\n\nrequire('ui/index_patterns');\n\nvar _modules = require('ui/modules');\n\nvar _notifier = require('ui/notify/notifier');\n\nvar _search_source = require('./data_source/search_source');\n\nvar _request_queue = require('./_request_queue');\n\nvar _fetch = require('./fetch');\n\nvar _search = require('./looper/search');\n\nvar _root_search_source = require('./data_source/_root_search_source');\n\nvar _saved_object = require('./saved_object');\n\nvar _redirect_when_missing = require('./_redirect_when_missing');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana/courier').service('courier', function ($rootScope, Private, indexPatterns) {\n  function Courier() {\n    var self = this;\n    var SearchSource = Private(_search_source.SearchSourceProvider);\n    var fetchSoon = Private(_fetch.FetchSoonProvider);\n    var searchLooper = self.searchLooper = Private(_search.SearchLooperProvider);\n\n    // expose some internal modules\n    self.setRootSearchSource = Private(_root_search_source.RootSearchSourceProvider).set;\n\n    self.SavedObject = Private(_saved_object.SavedObjectProvider);\n    self.indexPatterns = indexPatterns;\n    self.redirectWhenMissing = Private(_redirect_when_missing.RedirectWhenMissingProvider);\n\n    self.SearchSource = SearchSource;\n\n    /**\n    * update the time between automatic search requests\n    *\n    * @chainable\n    */\n    self.fetchInterval = function (ms) {\n      searchLooper.ms(ms);\n      return this;\n    };\n\n    /**\n    * Start fetching search requests on an interval\n    * @chainable\n    */\n    self.start = function () {\n      searchLooper.start();\n      return this;\n    };\n\n    /**\n    * Process the pending request queue right now, returns\n    * a promise that resembles the success of the fetch completing,\n    * individual errors are routed to their respective requests.\n    */\n    self.fetch = function () {\n      fetchSoon.fetchQueued().then(function () {\n        searchLooper.restart();\n      });\n    };\n\n    /**\n    * is the currior currently fetching search\n    * results automatically?\n    *\n    * @return {boolean}\n    */\n    self.started = function () {\n      return searchLooper.started();\n    };\n\n    /**\n    * stop the courier from fetching more search\n    * results, does not stop vaidating docs.\n    *\n    * @chainable\n    */\n    self.stop = function () {\n      searchLooper.stop();\n      return this;\n    };\n\n    /**\n    * Abort all pending requests\n    * @return {[type]} [description]\n    */\n    self.close = function () {\n      searchLooper.stop();\n\n      _lodash2.default.invoke(_request_queue.requestQueue, 'abort');\n\n      if (_request_queue.requestQueue.length) {\n        throw new Error('Aborting all pending requests failed.');\n      }\n    };\n\n    // Listen for refreshInterval changes\n    $rootScope.$watchCollection('timefilter.refreshInterval', function () {\n      var refreshValue = _lodash2.default.get($rootScope, 'timefilter.refreshInterval.value');\n      var refreshPause = _lodash2.default.get($rootScope, 'timefilter.refreshInterval.pause');\n      if (_lodash2.default.isNumber(refreshValue) && !refreshPause) {\n        self.fetchInterval(refreshValue);\n      } else {\n        self.fetchInterval(0);\n      }\n    });\n\n    var closeOnFatal = _lodash2.default.once(self.close);\n    _notifier.Notifier.fatalCallbacks.push(closeOnFatal);\n  }\n\n  return new Courier();\n});",null]}