{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/listing/dashboard_listing.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/listing/dashboard_listing.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DashboardListingController = DashboardListingController;\n\nvar _saved_object_registry = require('ui/saved_objects/saved_object_registry');\n\nrequire('ui/pager_control');\n\nrequire('ui/pager');\n\nvar _dashboard_constants = require('../dashboard_constants');\n\nvar _services = require('ui_framework/services');\n\nvar _modals = require('ui/modals');\n\nfunction DashboardListingController($injector, $scope, $location) {\n  var _this = this;\n\n  var $filter = $injector.get('$filter');\n  var confirmModal = $injector.get('confirmModal');\n  var Notifier = $injector.get('Notifier');\n  var pagerFactory = $injector.get('pagerFactory');\n  var Private = $injector.get('Private');\n  var timefilter = $injector.get('timefilter');\n  var config = $injector.get('config');\n  var dashboardConfig = $injector.get('dashboardConfig');\n\n  timefilter.enabled = false;\n\n  var limitTo = $filter('limitTo');\n  // TODO: Extract this into an external service.\n  var services = Private(_saved_object_registry.SavedObjectRegistryProvider).byLoaderPropertiesName;\n  var dashboardService = services.dashboards;\n  var notify = new Notifier({ location: 'Dashboard' });\n\n  var selectedItems = [];\n  var sortableProperties = new _services.SortableProperties([{\n    name: 'title',\n    getValue: function getValue(item) {\n      return item.title.toLowerCase();\n    },\n    isAscending: true\n  }, {\n    name: 'description',\n    getValue: function getValue(item) {\n      return item.description.toLowerCase();\n    },\n    isAscending: true\n  }], 'title');\n\n  var calculateItemsOnPage = function calculateItemsOnPage() {\n    _this.items = sortableProperties.sortItems(_this.items);\n    _this.pager.setTotalItems(_this.items.length);\n    _this.pageOfItems = limitTo(_this.items, _this.pager.pageSize, _this.pager.startIndex);\n  };\n\n  var fetchItems = function fetchItems() {\n    _this.isFetchingItems = true;\n\n    dashboardService.find(_this.filter, config.get('savedObjects:listingLimit')).then(function (result) {\n      _this.isFetchingItems = false;\n      _this.items = result.hits;\n      _this.totalItems = result.total;\n      _this.showLimitError = result.total > config.get('savedObjects:listingLimit');\n      _this.listingLimit = config.get('savedObjects:listingLimit');\n      calculateItemsOnPage();\n    });\n  };\n\n  var deselectAll = function deselectAll() {\n    selectedItems = [];\n  };\n\n  var selectAll = function selectAll() {\n    selectedItems = _this.pageOfItems.slice(0);\n  };\n\n  this.isFetchingItems = false;\n  this.items = [];\n  this.pageOfItems = [];\n  this.filter = $location.search().filter || '';\n\n  this.pager = pagerFactory.create(this.items.length, 20, 1);\n\n  this.hideWriteControls = dashboardConfig.getHideWriteControls();\n\n  $scope.$watch(function () {\n    return _this.filter;\n  }, function () {\n    deselectAll();\n    fetchItems();\n    $location.search('filter', _this.filter);\n  });\n  this.isAscending = function (name) {\n    return sortableProperties.isAscendingByName(name);\n  };\n  this.getSortedProperty = function () {\n    return sortableProperties.getSortedProperty();\n  };\n\n  this.sortOn = function sortOn(propertyName) {\n    sortableProperties.sortOn(propertyName);\n    deselectAll();\n    calculateItemsOnPage();\n  };\n\n  this.toggleAll = function toggleAll() {\n    if (this.areAllItemsChecked()) {\n      deselectAll();\n    } else {\n      selectAll();\n    }\n  };\n\n  this.toggleItem = function toggleItem(item) {\n    if (this.isItemChecked(item)) {\n      var index = selectedItems.indexOf(item);\n      selectedItems.splice(index, 1);\n    } else {\n      selectedItems.push(item);\n    }\n  };\n\n  this.isItemChecked = function isItemChecked(item) {\n    return selectedItems.indexOf(item) !== -1;\n  };\n\n  this.areAllItemsChecked = function areAllItemsChecked() {\n    return this.getSelectedItemsCount() === this.pageOfItems.length;\n  };\n\n  this.getSelectedItemsCount = function getSelectedItemsCount() {\n    return selectedItems.length;\n  };\n\n  this.deleteSelectedItems = function deleteSelectedItems() {\n    var doDelete = function doDelete() {\n      var selectedIds = selectedItems.map(function (item) {\n        return item.id;\n      });\n\n      dashboardService.delete(selectedIds).then(fetchItems).then(function () {\n        deselectAll();\n      }).catch(function (error) {\n        return notify.error(error);\n      });\n    };\n\n    confirmModal('Are you sure you want to delete the selected dashboards? This action is irreversible!', {\n      confirmButtonText: 'Delete',\n      onConfirm: doDelete,\n      defaultFocusedButton: _modals.ConfirmationButtonTypes.CANCEL\n    });\n  };\n\n  this.onPageNext = function () {\n    deselectAll();\n    _this.pager.nextPage();\n    calculateItemsOnPage();\n  };\n\n  this.onPagePrevious = function () {\n    deselectAll();\n    _this.pager.previousPage();\n    calculateItemsOnPage();\n  };\n\n  this.getUrlForItem = function getUrlForItem(item) {\n    return '#' + (0, _dashboard_constants.createDashboardEditUrl)(item.id);\n  };\n\n  this.getCreateDashboardHref = function getCreateDashboardHref() {\n    return '#' + _dashboard_constants.DashboardConstants.CREATE_NEW_DASHBOARD_URL;\n  };\n}",null]}