{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/range.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/range.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesBucketsRangeProvider = AggTypesBucketsRangeProvider;\n\nvar _bucket_agg_type = require('ui/agg_types/buckets/_bucket_agg_type');\n\nvar _range = require('ui/agg_types/buckets/create_filter/range');\n\nvar _field_format = require('../../../field_formats/field_format');\n\nvar _range_key = require('./range_key');\n\nvar _ranges = require('ui/agg_types/controls/ranges.html');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesBucketsRangeProvider(Private) {\n  var BucketAggType = Private(_bucket_agg_type.AggTypesBucketsBucketAggTypeProvider);\n  var createFilter = Private(_range.AggTypesBucketsCreateFilterRangeProvider);\n  var RangeKey = Private(_range_key.RangeKeyProvider);\n\n  var keyCaches = new WeakMap();\n  var formats = new WeakMap();\n\n  return new BucketAggType({\n    name: 'range',\n    title: 'Range',\n    createFilter: createFilter,\n    makeLabel: function makeLabel(aggConfig) {\n      return aggConfig.getFieldDisplayName() + ' ranges';\n    },\n    getKey: function getKey(bucket, key, agg) {\n      var keys = keyCaches.get(agg);\n\n      if (!keys) {\n        keys = new Map();\n        keyCaches.set(agg, keys);\n      }\n\n      var id = RangeKey.idBucket(bucket);\n\n      key = keys.get(id);\n      if (!key) {\n        key = new RangeKey(bucket);\n        keys.set(id, key);\n      }\n\n      return key;\n    },\n    getFormat: function getFormat(agg) {\n      var format = formats.get(agg);\n      if (format) return format;\n\n      var RangeFormat = _field_format.FieldFormat.from(function (range) {\n        var format = agg.fieldOwnFormatter();\n        return format(range.gte) + ' to ' + format(range.lt);\n      });\n\n      format = new RangeFormat();\n\n      formats.set(agg, format);\n      return format;\n    },\n    params: [{\n      name: 'field',\n      filterFieldTypes: ['number']\n    }, {\n      name: 'ranges',\n      default: [{ from: 0, to: 1000 }, { from: 1000, to: 2000 }],\n      editor: _ranges2.default,\n      write: function write(aggConfig, output) {\n        output.params.ranges = aggConfig.params.ranges;\n        output.params.keyed = true;\n      }\n    }]\n  });\n}",null]}