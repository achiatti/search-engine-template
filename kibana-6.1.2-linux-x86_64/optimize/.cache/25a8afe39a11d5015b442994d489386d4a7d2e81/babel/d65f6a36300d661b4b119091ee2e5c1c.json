{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/simple_emitter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/simple_emitter.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleEmitter = SimpleEmitter;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _base_object = require('ui/utils/base_object');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Simple event emitter class used in the vislib. Calls\n * handlers synchronously and implements a chainable api\n *\n * @class\n */\n_lodash2.default.class(SimpleEmitter).inherits(_base_object.BaseObject);\nfunction SimpleEmitter() {\n  this._listeners = {};\n}\n\n/**\n * Add an event handler\n *\n * @param  {string} name\n * @param  {function} handler\n * @return {SimpleEmitter} - this, for chaining\n */\nSimpleEmitter.prototype.on = function (name, handler) {\n  var handlers = this._listeners[name];\n  if (!handlers) handlers = this._listeners[name] = [];\n\n  handlers.push(handler);\n\n  return this;\n};\n\n/**\n * Remove an event handler\n *\n * @param  {string} name\n * @param  {function} [handler] - optional handler to remove, if no handler is\n *                              passed then all are removed\n * @return {SimpleEmitter} - this, for chaining\n */\nSimpleEmitter.prototype.off = function (name, handler) {\n  if (!this._listeners[name]) {\n    return this;\n  }\n\n  // remove a specific handler\n  if (handler) _lodash2.default.pull(this._listeners[name], handler);\n  // or remove all listeners\n  else this._listeners[name] = null;\n\n  return this;\n};\n\n/**\n * Remove all event listeners bound to this emitter.\n *\n * @return {SimpleEmitter} - this, for chaining\n */\nSimpleEmitter.prototype.removeAllListeners = function () {\n  this._listeners = {};\n  return this;\n};\n\n/**\n * Emit an event and all arguments to all listeners for an event name\n *\n * @param  {string} name\n * @param  {*} [arg...] - any number of arguments that will be applied to each handler\n * @return {SimpleEmitter} - this, for chaining\n */\nSimpleEmitter.prototype.emit = _lodash2.default.restParam(function (name, args) {\n  if (!this._listeners[name]) return this;\n  var listeners = this.listeners(name);\n  var i = -1;\n\n  while (++i < listeners.length) {\n    listeners[i].apply(this, args);\n  }\n\n  return this;\n});\n\n/**\n * Get a list of the event names that currently have listeners\n *\n * @return {array[string]}\n */\nSimpleEmitter.prototype.activeEvents = function () {\n  return _lodash2.default.reduce(this._listeners, function (active, listeners, name) {\n    return active.concat(_lodash2.default.size(listeners) ? name : []);\n  }, []);\n};\n\n/**\n * Get a list of the handler functions for a specific event\n *\n * @param  {string} name\n * @return {array[function]}\n */\nSimpleEmitter.prototype.listeners = function (name) {\n  return this._listeners[name] ? this._listeners[name].slice(0) : [];\n};\n\n/**\n * Get the count of handlers for a specific event\n *\n * @param  {string} [name] - optional event name to filter by\n * @return {number}\n */\nSimpleEmitter.prototype.listenerCount = function (name) {\n  if (name) {\n    return _lodash2.default.size(this._listeners[name]);\n  }\n\n  return _lodash2.default.reduce(this._listeners, function (count, handlers) {\n    return count + _lodash2.default.size(handlers);\n  }, 0);\n};",null]}