{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/coordinate_maps_visualization.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/coordinate_maps_visualization.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nexports.CoordinateMapsVisualizationProvider = CoordinateMapsVisualizationProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _geohash_layer = require('./geohash_layer');\n\nvar _base_maps_visualization = require('./base_maps_visualization');\n\nvar _search_source = require('ui/courier/data_source/search_source');\n\nvar _agg_config = require('ui/vis/agg_config');\n\nrequire('./styles/_tilemap.less');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction CoordinateMapsVisualizationProvider(Notifier, Private) {\n\n  var AggConfig = Private(_agg_config.VisAggConfigProvider);\n  var SearchSource = Private(_search_source.SearchSourceProvider);\n  var BaseMapsVisualization = Private(_base_maps_visualization.BaseMapsVisualizationProvider);\n\n  var CoordinateMapsVisualization = function (_BaseMapsVisualizatio) {\n    _inherits(CoordinateMapsVisualization, _BaseMapsVisualizatio);\n\n    function CoordinateMapsVisualization(element, vis) {\n      _classCallCheck(this, CoordinateMapsVisualization);\n\n      var _this = _possibleConstructorReturn(this, (CoordinateMapsVisualization.__proto__ || Object.getPrototypeOf(CoordinateMapsVisualization)).call(this, element, vis));\n\n      _this._geohashLayer = null;\n      _this._notify = new Notifier({ location: 'Coordinate Map' });\n      return _this;\n    }\n\n    _createClass(CoordinateMapsVisualization, [{\n      key: 'isDataUsable',\n      value: function isDataUsable(esResponse) {\n        return !(esResponse && typeof esResponse.geohashGridAgg === 'undefined');\n      }\n    }, {\n      key: '_makeKibanaMap',\n      value: function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          var _this2 = this;\n\n          var previousPrecision, precisionChange;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _get(CoordinateMapsVisualization.prototype.__proto__ || Object.getPrototypeOf(CoordinateMapsVisualization.prototype), '_makeKibanaMap', this).call(this);\n\n                case 2:\n\n                  this.vis.sessionState.mapBounds = this._kibanaMap.getUntrimmedBounds();\n\n                  previousPrecision = this._kibanaMap.getAutoPrecision();\n                  precisionChange = false;\n\n                  this._kibanaMap.on('zoomchange', function () {\n                    precisionChange = previousPrecision !== _this2._kibanaMap.getAutoPrecision();\n                    previousPrecision = _this2._kibanaMap.getAutoPrecision();\n                    var agg = _this2._getGeoHashAgg();\n                    var isAutoPrecision = _lodash2.default.get(_this2._chartData, 'geohashGridAgg.params.autoPrecision', true);\n                    if (agg && isAutoPrecision) {\n                      agg.params.precision = previousPrecision;\n                    }\n                  });\n                  this._kibanaMap.on('zoomend', function () {\n                    var isAutoPrecision = _lodash2.default.get(_this2._chartData, 'geohashGridAgg.params.autoPrecision', true);\n                    if (!isAutoPrecision) {\n                      return;\n                    }\n                    if (precisionChange) {\n                      _this2.vis.updateState();\n                    } else {\n                      _this2._updateData(_this2._chartData);\n                    }\n                  });\n\n                  this._kibanaMap.addDrawControl();\n                  this._kibanaMap.on('drawCreated:rectangle', function (event) {\n                    _this2.addSpatialFilter(_lodash2.default.get(_this2._chartData, 'geohashGridAgg'), 'geo_bounding_box', event.bounds);\n                  });\n                  this._kibanaMap.on('drawCreated:polygon', function (event) {\n                    _this2.addSpatialFilter(_lodash2.default.get(_this2._chartData, 'geohashGridAgg'), 'geo_polygon', { points: event.points });\n                  });\n\n                case 10:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function _makeKibanaMap() {\n          return _ref.apply(this, arguments);\n        }\n\n        return _makeKibanaMap;\n      }()\n    }, {\n      key: '_updateData',\n      value: function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(esResponse) {\n          var geohashOptions;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(this._getMapsParams().mapType !== 'Heatmap' && esResponse === this._chartData)) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt('return');\n\n                case 2:\n\n                  this._chartData = esResponse;\n\n                  if (this._geohashLayer) {\n                    this._kibanaMap.removeLayer(this._geohashLayer);\n                  }\n\n                  if (!(!this._chartData || !this._chartData.geoJson)) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  return _context2.abrupt('return');\n\n                case 6:\n                  geohashOptions = this._getGeohashOptions();\n\n                  this._geohashLayer = new _geohash_layer.GeohashLayer(this._chartData.geoJson, geohashOptions, this._kibanaMap.getZoomLevel(), this._kibanaMap);\n                  this._kibanaMap.addLayer(this._geohashLayer);\n\n                case 9:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function _updateData(_x) {\n          return _ref2.apply(this, arguments);\n        }\n\n        return _updateData;\n      }()\n    }, {\n      key: '_updateParams',\n      value: function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n          var geohashOptions;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _get(CoordinateMapsVisualization.prototype.__proto__ || Object.getPrototypeOf(CoordinateMapsVisualization.prototype), '_updateParams', this).call(this);\n\n                case 2:\n\n                  this._kibanaMap.setDesaturateBaseLayer(this.vis.params.isDesaturated);\n                  geohashOptions = this._getGeohashOptions();\n\n                  if (!this._geohashLayer || !this._geohashLayer.isReusable(geohashOptions)) {\n                    this._updateData(this._chartData);\n                  }\n\n                case 5:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function _updateParams() {\n          return _ref3.apply(this, arguments);\n        }\n\n        return _updateParams;\n      }()\n    }, {\n      key: '_getGeohashOptions',\n      value: function _getGeohashOptions() {\n        var newParams = this._getMapsParams();\n        return {\n          valueFormatter: this._chartData ? this._chartData.valueFormatter : null,\n          tooltipFormatter: this._chartData ? this._chartData.tooltipFormatter : null,\n          mapType: newParams.mapType,\n          isFilteredByCollar: this._isFilteredByCollar(),\n          fetchBounds: this.getGeohashBounds.bind(this),\n          heatmap: {\n            heatClusterSize: newParams.heatClusterSize\n          }\n        };\n      }\n    }, {\n      key: 'addSpatialFilter',\n      value: function addSpatialFilter(agg, filterName, filterData) {\n        if (!agg) {\n          return;\n        }\n\n        var indexPatternName = agg.vis.indexPattern.id;\n        var field = agg.fieldName();\n        var query = this.vis.API.queryManager.getQuery();\n        var language = query.language;\n\n        if (language === 'lucene') {\n          var filter = { meta: { negate: false, index: indexPatternName } };\n          filter[filterName] = { ignore_unmapped: true };\n          filter[filterName][field] = filterData;\n\n          this.vis.API.queryFilter.addFilters([filter]);\n        } else if (language === 'kuery') {\n          var _vis$API$kuery = this.vis.API.kuery,\n              fromKueryExpression = _vis$API$kuery.fromKueryExpression,\n              toKueryExpression = _vis$API$kuery.toKueryExpression,\n              nodeTypes = _vis$API$kuery.nodeTypes;\n\n          var newQuery = void 0;\n\n          if (filterName === 'geo_bounding_box') {\n            newQuery = nodeTypes.function.buildNode('geoBoundingBox', field, _lodash2.default.mapKeys(filterData, function (value, key) {\n              return _lodash2.default.camelCase(key);\n            }));\n          } else if (filterName === 'geo_polygon') {\n            newQuery = nodeTypes.function.buildNode('geoPolygon', field, filterData.points);\n          } else {\n            throw new Error('Kuery does not support ' + filterName + ' queries');\n          }\n\n          var allQueries = _lodash2.default.isEmpty(query.query) ? [newQuery] : [fromKueryExpression(query.query), newQuery];\n\n          this.vis.API.queryManager.setQuery({\n            query: toKueryExpression(nodeTypes.function.buildNode('and', allQueries, 'implicit')),\n            language: 'kuery'\n          });\n        }\n\n        this.vis.updateState();\n      }\n    }, {\n      key: 'getGeohashBounds',\n      value: function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n          var agg, searchSource, esResp;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  agg = this._getGeoHashAgg();\n\n                  if (!agg) {\n                    _context4.next = 10;\n                    break;\n                  }\n\n                  searchSource = new SearchSource();\n\n                  searchSource.index(this.vis.indexPattern);\n                  searchSource.size(0);\n                  searchSource.aggs(function () {\n                    var geoBoundsAgg = new AggConfig(agg.vis, {\n                      type: 'geo_bounds',\n                      enabled: true,\n                      params: {\n                        field: agg.getField()\n                      },\n                      schema: 'metric'\n                    });\n                    return {\n                      '1': geoBoundsAgg.toDsl()\n                    };\n                  });\n                  _context4.next = 8;\n                  return searchSource.fetch();\n\n                case 8:\n                  esResp = _context4.sent;\n                  return _context4.abrupt('return', _lodash2.default.get(esResp, 'aggregations.1.bounds'));\n\n                case 10:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function getGeohashBounds() {\n          return _ref4.apply(this, arguments);\n        }\n\n        return getGeohashBounds;\n      }()\n    }, {\n      key: '_getGeoHashAgg',\n      value: function _getGeoHashAgg() {\n        return this.vis.getAggConfig().find(function (agg) {\n          return _lodash2.default.get(agg, 'type.dslName') === 'geohash_grid';\n        });\n      }\n    }, {\n      key: '_isFilteredByCollar',\n      value: function _isFilteredByCollar() {\n        var DEFAULT = false;\n\n        var agg = this._getGeoHashAgg();\n        if (agg) {\n          return _lodash2.default.get(agg, 'params.isFilteredByCollar', DEFAULT);\n        } else {\n          return DEFAULT;\n        }\n      }\n    }]);\n\n    return CoordinateMapsVisualization;\n  }(BaseMapsVisualization);\n\n  return CoordinateMapsVisualization;\n}",null]}