{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/config/config.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/config/config.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _notifier = require('ui/notify/notifier');\n\nvar _delayed_updater = require('ui/config/_delayed_updater');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana/config');\n\n// service for delivering config variables to everywhere else\n_module.service('config', function (Private, $rootScope, chrome, uiSettings) {\n  var config = this;\n  var notify = new _notifier.Notifier({ location: 'Config' });\n  var defaults = uiSettings.defaults,\n      initialUserSettings = uiSettings.user;\n\n  var delayedUpdate = Private(_delayed_updater.ConfigDelayedUpdaterProvider);\n  var settings = mergeSettings(defaults, initialUserSettings);\n\n  config.getAll = function () {\n    return (0, _lodash.cloneDeep)(settings);\n  };\n  config.get = function (key, defaultValue) {\n    return getCurrentValue(key, defaultValue);\n  };\n  config.set = function (key, val) {\n    return change(key, (0, _lodash.isPlainObject)(val) ? _angular2.default.toJson(val) : val);\n  };\n  config.remove = function (key) {\n    return change(key, null);\n  };\n  config.isDeclared = function (key) {\n    return key in settings;\n  };\n  config.isDefault = function (key) {\n    return !config.isDeclared(key) || nullOrEmpty(settings[key].userValue);\n  };\n  config.isCustom = function (key) {\n    return config.isDeclared(key) && !('value' in settings[key]);\n  };\n  config.watchAll = function (fn, scope) {\n    return watchAll(scope, fn);\n  };\n  config.watch = function (key, fn, scope) {\n    return watch(key, scope, fn);\n  };\n\n  /**\n   * A little helper for binding config variables to $scopes\n   *\n   * @param  {Scope} $scope - an angular $scope object\n   * @param  {string} key - the config key to bind to\n   * @param  {string} [property] - optional property name where the value should\n   *                             be stored. Defaults to the config key\n   * @return {function} - an unbind function\n   */\n  config.bindToScope = function (scope, key) {\n    var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : key;\n\n    return watch(key, scope, update);\n    function update(newVal) {\n      scope[property] = newVal;\n    }\n  };\n\n  function watch(key) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $rootScope;\n    var fn = arguments[2];\n\n    if (!config.isDeclared(key)) {\n      throw new Error('Unexpected `config.watch(\"' + key + '\", fn)` call on unrecognized configuration setting \"' + key + '\".\\nSetting an initial value via `config.set(\"' + key + '\", value)` before binding\\nany custom setting configuration watchers for \"' + key + '\" may fix this issue.');\n    }\n    var newVal = config.get(key);\n    var update = function update(e) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn.apply(undefined, args);\n    };\n    fn(newVal, null, key, config);\n    return scope.$on('change:config.' + key, update);\n  }\n\n  function watchAll() {\n    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $rootScope;\n    var fn = arguments[1];\n\n    var update = function update(e) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return fn.apply(undefined, args);\n    };\n    fn(null, null, null, config);\n    return scope.$on('change:config', update);\n  }\n\n  function change(key, value) {\n    var declared = config.isDeclared(key);\n    var oldVal = declared ? settings[key].userValue : undefined;\n    var newVal = key in defaults && defaults[key].defaultValue === value ? null : value;\n    var unchanged = oldVal === newVal;\n    if (unchanged) {\n      return Promise.resolve();\n    }\n    var initialVal = declared ? config.get(key) : undefined;\n    localUpdate(key, newVal, initialVal);\n\n    return delayedUpdate(key, newVal).then(function (updatedSettings) {\n      settings = mergeSettings(defaults, updatedSettings);\n    }).catch(function (reason) {\n      localUpdate(key, initialVal, config.get(key));\n      notify.error(reason);\n    });\n  }\n\n  function localUpdate(key, newVal, oldVal) {\n    patch(key, newVal);\n    advertise(key, oldVal);\n  }\n\n  function patch(key, value) {\n    if (!config.isDeclared(key)) {\n      settings[key] = {};\n    }\n    if (value === null) {\n      delete settings[key].userValue;\n    } else {\n      var type = settings[key].type;\n\n      if (type === 'json' && typeof value !== 'string') {\n        settings[key].userValue = _angular2.default.toJson(value);\n      } else {\n        settings[key].userValue = value;\n      }\n    }\n  }\n\n  function advertise(key, oldVal) {\n    var newVal = config.get(key);\n    notify.log('config change: ' + key + ': ' + oldVal + ' -> ' + newVal);\n    $rootScope.$broadcast('change:config.' + key, newVal, oldVal, key, config);\n    $rootScope.$broadcast('change:config', newVal, oldVal, key, config);\n  }\n\n  function nullOrEmpty(value) {\n    return value === undefined || value === null;\n  }\n\n  function getCurrentValue(key, defaultValueForGetter) {\n    if (!config.isDeclared(key)) {\n      if (defaultValueForGetter === undefined) {\n        throw new Error('Unexpected `config.get(\"' + key + '\")` call on unrecognized configuration setting \"' + key + '\".\\nSetting an initial value via `config.set(\"' + key + '\", value)` before attempting to retrieve\\nany custom setting value for \"' + key + '\" may fix this issue.\\nYou can also save an step using `config.get(\"' + key + '\", defaultValue)`, which\\nwill set the initial value if one is not already set.');\n      }\n      config.set(key, defaultValueForGetter);\n    }\n    var _settings$key = settings[key],\n        userValue = _settings$key.userValue,\n        defaultValue = _settings$key.value,\n        type = _settings$key.type;\n\n    var currentValue = config.isDefault(key) ? defaultValue : userValue;\n    if (type === 'json') {\n      return JSON.parse(currentValue);\n    } else if (type === 'number') {\n      return parseFloat(currentValue);\n    }\n    return currentValue;\n  }\n});\n\nfunction mergeSettings(extended, defaults) {\n  return (0, _lodash.defaultsDeep)(extended, defaults);\n}",null]}