{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/terms.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/terms.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.AggTypesBucketsTermsProvider = AggTypesBucketsTermsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _bucket_agg_type = require('ui/agg_types/buckets/_bucket_agg_type');\n\nvar _agg_config = require('ui/vis/agg_config');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _terms = require('ui/agg_types/buckets/create_filter/terms');\n\nvar _order_agg = require('ui/agg_types/controls/order_agg.html');\n\nvar _order_agg2 = _interopRequireDefault(_order_agg);\n\nvar _order_and_size = require('ui/agg_types/controls/order_and_size.html');\n\nvar _order_and_size2 = _interopRequireDefault(_order_and_size);\n\nvar _route_based_notifier = require('ui/route_based_notifier');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesBucketsTermsProvider(Private) {\n  var BucketAggType = Private(_bucket_agg_type.AggTypesBucketsBucketAggTypeProvider);\n  var AggConfig = Private(_agg_config.VisAggConfigProvider);\n  var Schemas = Private(_schemas.VisSchemasProvider);\n  var createFilter = Private(_terms.AggTypesBucketsCreateFilterTermsProvider);\n  var routeBasedNotifier = Private(_route_based_notifier.RouteBasedNotifierProvider);\n\n  var aggFilter = ['!top_hits', '!percentiles', '!median', '!std_dev', '!derivative', '!moving_avg', '!serial_diff', '!cumulative_sum', '!avg_bucket', '!max_bucket', '!min_bucket', '!sum_bucket'];\n\n  var orderAggSchema = new Schemas([{\n    group: 'none',\n    name: 'orderAgg',\n    title: 'Order Agg',\n    hideCustomLabel: true,\n    aggFilter: aggFilter\n  }]).all[0];\n\n  function isNotType(type) {\n    return function (agg) {\n      var field = agg.params.field;\n      return !field || field.type !== type;\n    };\n  }\n\n  var migrateIncludeExcludeFormat = {\n    serialize: function serialize(value) {\n      if (!value || _lodash2.default.isString(value)) return value;else return value.pattern;\n    },\n    write: function write(aggConfig, output) {\n      var value = aggConfig.params[this.name];\n      if (_lodash2.default.isObject(value)) {\n        output.params[this.name] = value.pattern;\n      } else if (value) {\n        output.params[this.name] = value;\n      }\n    }\n  };\n\n  return new BucketAggType({\n    name: 'terms',\n    title: 'Terms',\n    makeLabel: function makeLabel(agg) {\n      var params = agg.params;\n      return agg.getFieldDisplayName() + ': ' + params.order.display;\n    },\n    createFilter: createFilter,\n    params: [{\n      name: 'field',\n      filterFieldTypes: ['number', 'boolean', 'date', 'ip', 'string']\n    }, _extends({\n      name: 'exclude',\n      type: 'string',\n      advanced: true,\n      disabled: isNotType('string')\n    }, migrateIncludeExcludeFormat), _extends({\n      name: 'include',\n      type: 'string',\n      advanced: true,\n      disabled: isNotType('string')\n    }, migrateIncludeExcludeFormat), {\n      name: 'size',\n      default: 5\n    }, {\n      name: 'orderAgg',\n      type: AggConfig,\n      default: null,\n      editor: _order_agg2.default,\n      serialize: function serialize(orderAgg) {\n        return orderAgg.toJSON();\n      },\n      deserialize: function deserialize(state, agg) {\n        return this.makeOrderAgg(agg, state);\n      },\n      makeOrderAgg: function makeOrderAgg(termsAgg, state) {\n        state = state || {};\n        state.schema = orderAggSchema;\n        var orderAgg = new AggConfig(termsAgg.vis, state);\n        orderAgg.id = termsAgg.id + '-orderAgg';\n        return orderAgg;\n      },\n      controller: function controller($scope) {\n        $scope.safeMakeLabel = function (agg) {\n          try {\n            return agg.makeLabel();\n          } catch (e) {\n            return '- agg not valid -';\n          }\n        };\n\n        var INIT = {}; // flag to know when prevOrderBy has changed\n        var prevOrderBy = INIT;\n\n        $scope.$watch('responseValueAggs', updateOrderAgg);\n        $scope.$watch('agg.params.orderBy', updateOrderAgg);\n\n        // Returns true if the agg is not compatible with the terms bucket\n        $scope.rejectAgg = function rejectAgg(agg) {\n          return aggFilter.includes('!' + agg.type.name);\n        };\n\n        function updateOrderAgg() {\n          // abort until we get the responseValueAggs\n          if (!$scope.responseValueAggs) return;\n          var agg = $scope.agg;\n          var params = agg.params;\n          var orderBy = params.orderBy;\n          var paramDef = agg.type.params.byName.orderAgg;\n\n          // setup the initial value of orderBy\n          if (!orderBy && prevOrderBy === INIT) {\n            var respAgg = (0, _lodash2.default)($scope.responseValueAggs).filter(function (agg) {\n              return !$scope.rejectAgg(agg);\n            }).first();\n            if (!respAgg) {\n              respAgg = { id: '_term' };\n            }\n            params.orderBy = respAgg.id;\n            return;\n          }\n\n          // track the previous value\n          prevOrderBy = orderBy;\n\n          // we aren't creating a custom aggConfig\n          if (!orderBy || orderBy !== 'custom') {\n            params.orderAgg = null;\n            // ensure that orderBy is set to a valid agg\n            var _respAgg = (0, _lodash2.default)($scope.responseValueAggs).filter(function (agg) {\n              return !$scope.rejectAgg(agg);\n            }).find({ id: orderBy });\n            if (!_respAgg) {\n              params.orderBy = '_term';\n            }\n            return;\n          }\n\n          params.orderAgg = params.orderAgg || paramDef.makeOrderAgg(agg);\n        }\n      },\n      write: function write(agg, output) {\n        var vis = agg.vis;\n        var dir = agg.params.order.val;\n        var order = output.params.order = {};\n\n        var orderAgg = agg.params.orderAgg || vis.aggs.getResponseAggById(agg.params.orderBy);\n\n        // TODO: This works around an Elasticsearch bug the always casts terms agg scripts to strings\n        // thus causing issues with filtering. This probably causes other issues since float might not\n        // be able to contain the number on the elasticsearch side\n        if (output.params.script) {\n          output.params.valueType = agg.getField().type === 'number' ? 'float' : agg.getField().type;\n        }\n\n        if (!orderAgg) {\n          order[agg.params.orderBy || '_count'] = dir;\n          return;\n        }\n\n        if (orderAgg.type.name === 'count') {\n          if (dir === 'asc') {\n            routeBasedNotifier.warning('Sorting in Ascending order by Count in Terms aggregations is deprecated');\n          }\n          order._count = dir;\n          return;\n        }\n\n        var orderAggId = orderAgg.id;\n        if (orderAgg.parentId) {\n          orderAgg = vis.aggs.byId[orderAgg.parentId];\n        }\n\n        output.subAggs = (output.subAggs || []).concat(orderAgg);\n        order[orderAggId] = dir;\n      }\n    }, {\n      name: 'order',\n      type: 'optioned',\n      default: 'desc',\n      editor: _order_and_size2.default,\n      options: [{ display: 'Descending', val: 'desc' }, { display: 'Ascending', val: 'asc' }],\n      write: _lodash2.default.noop // prevent default write, it's handled by orderAgg\n    }, {\n      name: 'orderBy',\n      write: _lodash2.default.noop // prevent default write, it's handled by orderAgg\n    }]\n  });\n}",null]}