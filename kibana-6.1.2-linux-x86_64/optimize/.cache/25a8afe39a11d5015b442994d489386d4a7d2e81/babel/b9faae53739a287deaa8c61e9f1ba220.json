{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/vis_types/base_vis_type.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/vis_types/base_vis_type.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VisTypeProvider = VisTypeProvider;\n\nvar _vis_category = require('../vis_category');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VisTypeProvider() {\n  var VisType = function () {\n    function VisType(opts) {\n      _classCallCheck(this, VisType);\n\n      opts = opts || {};\n\n      if (!opts.name) throw 'vis_type must define its name';\n      if (!opts.title) throw 'vis_type must define its title';\n      if (!opts.description) throw 'vis_type must define its description';\n      if (!opts.icon && !opts.image) throw 'vis_type must define its icon or image';\n      if (!opts.visualization) throw 'vis_type must define visualization controller';\n\n      var _defaults = {\n        // name, title, description, icon, image\n        category: _vis_category.CATEGORY.OTHER,\n        visualization: null, // must be a class with render/resize/destroy methods\n        visConfig: {\n          defaults: {} // default configuration\n        },\n        requestHandler: 'courier', // select one from registry or pass a function\n        responseHandler: 'tabify',\n        editor: 'default',\n        editorConfig: {\n          collections: {} // collections used for configuration (list of positions, ...)\n        },\n        options: { // controls the visualize editor\n          showTimePicker: true,\n          showQueryBar: true,\n          showFilterBar: true,\n          showIndexSelection: true,\n          hierarchicalData: false // we should get rid of this i guess ?\n        },\n        stage: 'production',\n        feedbackMessage: ''\n      };\n\n      _lodash2.default.defaultsDeep(this, opts, _defaults);\n\n      this.requiresSearch = !(this.requestHandler === 'none');\n    }\n\n    _createClass(VisType, [{\n      key: 'shouldMarkAsExperimentalInUI',\n      value: function shouldMarkAsExperimentalInUI() {\n        //we are not making a distinction in the UI if a plugin is experimental and/or labs.\n        //we just want to indicate it is special. the current flask icon is sufficient for that.\n        return this.stage === 'experimental' || this.stage === 'lab';\n      }\n    }]);\n\n    return VisType;\n  }();\n\n  Object.defineProperty(VisType.prototype, 'schemas', {\n    get: function get() {\n      if (this.editorConfig && this.editorConfig.schemas) {\n        return this.editorConfig.schemas;\n      }\n\n      return []; //throw `Can't get schemas from a visualization without using the default editor`;\n    }\n  });\n\n  return VisType;\n}",null]}