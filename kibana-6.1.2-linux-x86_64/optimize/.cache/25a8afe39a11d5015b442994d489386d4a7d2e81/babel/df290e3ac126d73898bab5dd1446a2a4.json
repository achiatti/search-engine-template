{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kbn_top_nav/kbn_top_nav.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kbn_top_nav/kbn_top_nav.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nrequire('ui/watch_multi');\n\nrequire('ui/directives/input_focus');\n\nvar _modules = require('ui/modules');\n\nvar _kbn_top_nav = require('./kbn_top_nav.html');\n\nvar _kbn_top_nav2 = _interopRequireDefault(_kbn_top_nav);\n\nvar _kbn_top_nav_controller = require('./kbn_top_nav_controller');\n\nvar _navbar_extensions = require('ui/registry/navbar_extensions');\n\nrequire('./bread_crumbs/bread_crumbs');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana'); /**\n                                                 * A configuration object for a top nav component.\n                                                 * @typedef {Object} KbnTopNavConfig\n                                                 * @type Object\n                                                 * @property {string} key - A display string which will be shown in the top nav for this option.\n                                                 * @property {string} [description] - optional, used for the screen-reader description of this\n                                                 *  menu. Defaults to \"Toggle ${key} view\" for templated menu items and just \"${key}\" for\n                                                 *  programmatic menu items\n                                                 * @property {string} testId - for testing purposes, can be used to retrieve this item.\n                                                 * @property {Object} [template] - an html template that will be shown when this item is clicked.\n                                                 *  If template is not given then run should be supplied.\n                                                 * @property {function} [run] - an optional function that will be run when the nav item is clicked.\n                                                 *  Either this or template parameter should be specified.\n                                                 * @param {boolean} [hideButton] - optional, set to true to prevent a menu item from being created.\n                                                 *  This allow injecting templates into the navbar that don't have an associated template\n                                                 */\n\n/**\n * kbnTopNav directive\n *\n * The top section that shows the timepicker, load, share and save dialogues.\n *\n * ```\n * <kbn-top-nav name=\"current-app-for-extensions\" config=\"path.to.menuItems\"></kbn-top-nav>\n * ```\n *\n * Menu items/templates are passed to the kbnTopNav via the config attribute\n * and should be defined as an array of objects. Each object represents a menu\n * item and should be of type kbnTopNavConfig.\n *\n * @param {Array<kbnTopNavConfig>|KbnTopNavController} config\n *\n * Programmatic control of the navbar can be achieved one of two ways\n */\n\n_module.directive('kbnTopNav', function (Private) {\n  var KbnTopNavController = Private(_kbn_top_nav_controller.KbnTopNavControllerProvider);\n  var navbarExtensions = Private(_navbar_extensions.NavBarExtensionsRegistryProvider);\n  var getNavbarExtensions = _lodash2.default.memoize(function (name) {\n    if (!name) throw new Error('navbar directive requires a name attribute');\n    return _lodash2.default.sortBy(navbarExtensions.byAppName[name], 'order');\n  });\n\n  return {\n    restrict: 'E',\n    transclude: true,\n    template: _kbn_top_nav2.default,\n\n    // TODO: The kbnTopNav currently requires that it share a scope with\n    // its parent directive. This allows it to export the kbnTopNav controller\n    // and allows the config templates to use values from the parent scope.\n    //\n    // Moving this to an isolate scope will require modifying the config\n    // directive to support child directives, instead of templates, so that\n    // parent controllers can be imported/required rather than simply referenced\n    // directly in the template.\n    //\n    // TODO: Our fake multi-slot transclusion solution also depends on an inherited\n    // scope. Moving this to an isolate scope will cause this to break.\n    //\n    // scope: {}\n\n    controller: function controller($scope, $attrs, $element, $transclude) {\n      // This is a semi-hacky solution to missing slot-transclusion support in Angular 1.4.7\n      // (it was added as a core feature in 1.5). Borrowed from http://stackoverflow.com/a/22080765.\n      $scope.transcludes = {};\n\n      // Extract transcluded elements for use in the link function.\n      $transclude(function (clone) {\n        // We expect the transcluded elements to be wrapped in a single div.\n        var transcludedContentContainer = _lodash2.default.find(clone, function (item) {\n          if (item.attributes) {\n            return _lodash2.default.find(item.attributes, function (attr) {\n              return attr.name.indexOf('data-transclude-slots') !== -1;\n            });\n          }\n        });\n\n        if (!transcludedContentContainer) {\n          return;\n        }\n\n        var transcludedContent = transcludedContentContainer.children;\n        _lodash2.default.forEach(transcludedContent, function (transcludedItem) {\n          var transclusionSlot = transcludedItem.getAttribute('data-transclude-slot');\n          $scope.transcludes[transclusionSlot] = transcludedItem;\n        });\n      });\n      var extensions = getNavbarExtensions($attrs.name);\n\n      function initTopNav(newConfig, oldConfig) {\n        if (_lodash2.default.isEqual(oldConfig, newConfig)) return;\n\n        if (newConfig instanceof KbnTopNavController) {\n          newConfig.addItems(extensions);\n          $scope.kbnTopNav = new KbnTopNavController(newConfig);\n        } else {\n          newConfig = newConfig.concat(extensions);\n          $scope.kbnTopNav = new KbnTopNavController(newConfig);\n        }\n        $scope.kbnTopNav._link($scope, $element);\n      }\n\n      var getTopNavConfig = function getTopNavConfig() {\n        return _lodash2.default.get($scope, $attrs.config, []);\n      };\n\n      var topNavConfig = getTopNavConfig();\n\n      // Because we store $scope and $element on the kbnTopNavController, if this was passed an instance\n      // instead of a configuration, it will enter an infinite digest loop. Only watch for updates if a config\n      // was passed instead. This is ugly, but without diving into a larger refactor, the smallest temporary solution\n      // to get dynamic nav updates working for dashboard. Console is currently the only place that passes a\n      // KbnTopNavController (and a slew of tests).\n      if (!(topNavConfig instanceof KbnTopNavController)) {\n        $scope.$watch(getTopNavConfig, initTopNav, true);\n      }\n\n      initTopNav(topNavConfig, null);\n\n      return $scope.kbnTopNav;\n    },\n    link: function link(scope) {\n      // These are the slots where transcluded elements can go.\n      var transclusionSlotNames = ['topLeftCorner', 'bottomRow'];\n\n      // Transclude elements into specified \"slots\" in the top nav.\n      transclusionSlotNames.forEach(function (name) {\n        var transcludedItem = scope.transcludes[name];\n        if (transcludedItem) {\n          var transclusionSlot = document.querySelector('[data-transclude-slot=\"' + name + '\"]');\n          _angular2.default.element(transclusionSlot).replaceWith(transcludedItem);\n        }\n      });\n    }\n  };\n});",null]}