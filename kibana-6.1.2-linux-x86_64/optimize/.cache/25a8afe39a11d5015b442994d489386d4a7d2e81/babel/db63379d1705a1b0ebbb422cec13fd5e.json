{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/timepicker/kbn_global_timepicker.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/timepicker/kbn_global_timepicker.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _lodash = require('lodash');\n\nvar _kbn_global_timepicker = require('./kbn_global_timepicker.html');\n\nvar _kbn_global_timepicker2 = _interopRequireDefault(_kbn_global_timepicker);\n\nvar _time_navigation = require('./time_navigation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').directive('kbnGlobalTimepicker', function (timefilter, globalState, $rootScope) {\n  var listenForUpdates = (0, _lodash.once)(function ($scope) {\n    $scope.$listen(timefilter, 'update', function () {\n      globalState.time = (0, _lodash.clone)(timefilter.time);\n      globalState.refreshInterval = (0, _lodash.clone)(timefilter.refreshInterval);\n      globalState.save();\n    });\n  });\n\n  return {\n    template: _kbn_global_timepicker2.default,\n    replace: true,\n    require: '^kbnTopNav',\n    link: function link($scope, element, attributes, kbnTopNav) {\n      listenForUpdates($rootScope);\n\n      $rootScope.timefilter = timefilter;\n      $rootScope.toggleRefresh = function () {\n        timefilter.refreshInterval.pause = !timefilter.refreshInterval.pause;\n      };\n\n      $scope.forward = function () {\n        timefilter.time = _time_navigation.timeNavigation.stepForward(timefilter.getBounds());\n      };\n\n      $scope.back = function () {\n        timefilter.time = _time_navigation.timeNavigation.stepBackward(timefilter.getBounds());\n      };\n\n      $scope.updateFilter = function (from, to) {\n        timefilter.time.from = from;\n        timefilter.time.to = to;\n        kbnTopNav.close('filter');\n      };\n\n      $scope.updateInterval = function (interval) {\n        timefilter.refreshInterval = interval;\n        kbnTopNav.close('interval');\n      };\n    }\n  };\n});",null]}