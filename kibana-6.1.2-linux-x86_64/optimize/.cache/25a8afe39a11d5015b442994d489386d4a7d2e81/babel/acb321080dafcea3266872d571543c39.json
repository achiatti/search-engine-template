{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/default.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/default.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultEditor = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('./sidebar');\n\nrequire('./vis_options');\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _default = require('./default.html');\n\nvar _default2 = _interopRequireDefault(_default);\n\nvar _vis_editor_types = require('ui/registry/vis_editor_types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar defaultEditor = function defaultEditor($rootScope, $compile) {\n  var _class, _temp;\n\n  return _temp = _class = function () {\n    function DefaultEditor(el, vis, showSpyPanel) {\n      _classCallCheck(this, DefaultEditor);\n\n      this.el = (0, _jquery2.default)(el);\n      this.vis = vis;\n      this.showSpyPanel = showSpyPanel;\n\n      if (!this.vis.type.editorConfig.optionTabs && this.vis.type.editorConfig.optionsTemplate) {\n        this.vis.type.editorConfig.optionTabs = [{ name: 'options', title: 'Options', editor: this.vis.type.editorConfig.optionsTemplate }];\n      }\n    }\n\n    _createClass(DefaultEditor, [{\n      key: 'render',\n      value: function render(visData, searchSource) {\n        var _this = this;\n\n        var $scope = void 0;\n\n        var updateScope = function updateScope() {\n          $scope.showSpyPanel = _this.showSpyPanel;\n          $scope.vis = _this.vis;\n          $scope.visData = visData;\n          $scope.uiState = _this.vis.getUiState();\n          $scope.searchSource = searchSource;\n          $scope.$apply();\n        };\n\n        return new Promise(function (resolve) {\n          if (!_this.$scope) {\n            _this.$scope = $scope = $rootScope.$new();\n\n            updateScope();\n\n            $scope.toggleSidebar = function () {\n              $scope.$broadcast('render');\n            };\n\n            $scope.$on('renderComplete', function () {\n              $scope.renderComplete();\n            });\n\n            // track state of editable vis vs. \"actual\" vis\n            $scope.stageEditableVis = function () {\n              $scope.vis.updateState();\n              $scope.vis.dirty = false;\n            };\n            $scope.resetEditableVis = function () {\n              $scope.vis.resetState();\n              $scope.vis.dirty = false;\n            };\n\n            $scope.$watch(function () {\n              return $scope.vis.getCurrentState(false);\n            }, function (newState) {\n              $scope.vis.dirty = !_angular2.default.equals(newState, $scope.vis.getEnabledState());\n\n              $scope.responseValueAggs = null;\n              try {\n                $scope.responseValueAggs = $scope.vis.aggs.getResponseAggs().filter(function (agg) {\n                  return _lodash2.default.get(agg, 'schema.group') === 'metrics';\n                });\n              }\n              // this can fail when the agg.type is changed but the\n              // params have not been set yet. watcher will trigger again\n              // when the params update\n              catch (e) {} // eslint-disable-line no-empty\n            }, true);\n\n            _this.el.html($compile(_default2.default)($scope));\n          } else {\n            $scope = _this.$scope;\n            updateScope();\n          }\n\n          $scope.renderComplete = resolve;\n          $scope.$broadcast('render');\n        });\n      }\n    }, {\n      key: 'resize',\n      value: function resize() {}\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        if (this.$scope) {\n          this.$scope.$destroy();\n          this.$scope = null;\n        }\n      }\n    }]);\n\n    return DefaultEditor;\n  }(), _class.key = 'default', _temp;\n};\n\n_vis_editor_types.VisEditorTypesRegistryProvider.register(defaultEditor);\n\nexports.defaultEditor = defaultEditor;",null]}