{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/components/color/heatmap_color.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/components/color/heatmap_color.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHeatmapColors = getHeatmapColors;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _colormaps = require('./colormaps');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction enforceBounds(x) {\n  if (x < 0) {\n    return 0;\n  } else if (x > 1) {\n    return 1;\n  } else {\n    return x;\n  }\n}\n\nfunction interpolateLinearly(x, values) {\n  // Split values into four lists\n  var xValues = [];\n  var rValues = [];\n  var gValues = [];\n  var bValues = [];\n  values.forEach(function (value) {\n    xValues.push(value[0]);\n    rValues.push(value[1][0]);\n    gValues.push(value[1][1]);\n    bValues.push(value[1][2]);\n  });\n\n  var i = 1;\n  while (xValues[i] < x) {\n    i++;\n  }var width = Math.abs(xValues[i - 1] - xValues[i]);\n  var scalingFactor = (x - xValues[i - 1]) / width;\n  // Get the new color values though interpolation\n  var r = rValues[i - 1] + scalingFactor * (rValues[i] - rValues[i - 1]);\n  var g = gValues[i - 1] + scalingFactor * (gValues[i] - gValues[i - 1]);\n  var b = bValues[i - 1] + scalingFactor * (bValues[i] - bValues[i - 1]);\n  return [enforceBounds(r), enforceBounds(g), enforceBounds(b)];\n}\n\nfunction getHeatmapColors(value, colorSchemaName) {\n  if (!_lodash2.default.isNumber(value) || value < 0 || value > 1) {\n    throw new Error('heatmap_color expects a number from 0 to 1 as first parameter');\n  }\n\n  var colorSchema = _colormaps.vislibColorMaps[colorSchemaName];\n  if (!colorSchema) {\n    throw new Error('invalid colorSchemaName provided');\n  }\n\n  var color = interpolateLinearly(value, colorSchema);\n  var r = Math.round(255 * color[0]);\n  var g = Math.round(255 * color[1]);\n  var b = Math.round(255 * color[2]);\n  return 'rgb(' + r + ',' + g + ',' + b + ')';\n}\n\nfunction drawColormap(colorSchema) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var ctx = canvas.getContext('2d');\n  for (var i = 0; i <= width; i++) {\n    ctx.fillStyle = getHeatmapColors(i / width, colorSchema);\n    ctx.fillRect(i, 0, 1, height);\n  }\n  return canvas;\n}\n\ngetHeatmapColors.prototype.drawColormap = drawColormap;",null]}