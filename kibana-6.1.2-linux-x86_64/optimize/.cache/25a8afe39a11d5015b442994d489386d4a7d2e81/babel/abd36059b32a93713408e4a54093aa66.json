{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/range_key.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/range_key.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.RangeKeyProvider = RangeKeyProvider;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction RangeKeyProvider() {\n\n  var id = Symbol('id');\n\n  var RangeKey = function () {\n    function RangeKey(bucket) {\n      _classCallCheck(this, RangeKey);\n\n      this.gte = bucket.from == null ? -Infinity : bucket.from;\n      this.lt = bucket.to == null ? +Infinity : bucket.to;\n\n      this[id] = RangeKey.idBucket(bucket);\n    }\n\n    _createClass(RangeKey, [{\n      key: 'toString',\n      value: function toString() {\n        return this[id];\n      }\n    }], [{\n      key: 'idBucket',\n      value: function idBucket(bucket) {\n        return 'from:' + bucket.from + ',to:' + bucket.to;\n      }\n    }]);\n\n    return RangeKey;\n  }();\n\n  return RangeKey;\n}",null]}