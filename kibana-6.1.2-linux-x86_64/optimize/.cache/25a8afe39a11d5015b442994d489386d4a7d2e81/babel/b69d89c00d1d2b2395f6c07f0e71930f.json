{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/embeddable/search_embeddable_factory.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/embeddable/search_embeddable_factory.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SearchEmbeddableFactory = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _search_template = require('./search_template.html');\n\nvar _search_template2 = _interopRequireDefault(_search_template);\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nrequire('ui/doc_table');\n\nvar _columns = require('ui/doc_table/actions/columns');\n\nvar columnActions = _interopRequireWildcard(_columns);\n\nvar _panel_state = require('plugins/kibana/dashboard/panel/panel_state');\n\nvar _embeddable = require('ui/embeddable');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SearchEmbeddableFactory = exports.SearchEmbeddableFactory = function (_EmbeddableFactory) {\n  _inherits(SearchEmbeddableFactory, _EmbeddableFactory);\n\n  function SearchEmbeddableFactory($compile, $rootScope, searchLoader, Promise, courier) {\n    _classCallCheck(this, SearchEmbeddableFactory);\n\n    var _this = _possibleConstructorReturn(this, (SearchEmbeddableFactory.__proto__ || Object.getPrototypeOf(SearchEmbeddableFactory)).call(this));\n\n    _this.$compile = $compile;\n    _this.searchLoader = searchLoader;\n    _this.$rootScope = $rootScope;\n    _this.name = 'search';\n    _this.Promise = Promise;\n    _this.courier = courier;\n    return _this;\n  }\n\n  _createClass(SearchEmbeddableFactory, [{\n    key: 'getEditPath',\n    value: function getEditPath(panelId) {\n      return this.searchLoader.urlFor(panelId);\n    }\n  }, {\n    key: 'getTitleFor',\n    value: function getTitleFor(panelId) {\n      return this.searchLoader.get(panelId).then(function (savedObject) {\n        return savedObject.title;\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render(domNode, panel, container) {\n      var _this2 = this;\n\n      var searchScope = this.$rootScope.$new();\n      searchScope.editPath = this.getEditPath(panel.id);\n      return this.searchLoader.get(panel.id).then(function (savedObject) {\n        if (!container.getHidePanelTitles()) {\n          searchScope.sharedItemTitle = panel.title !== undefined ? panel.title : savedObject.title;\n        }\n        searchScope.savedObj = savedObject;\n        searchScope.panel = panel;\n        container.registerPanelIndexPattern(panel.panelIndex, savedObject.searchSource.get('index'));\n\n        // If there is column or sort data on the panel, that means the original columns or sort settings have\n        // been overridden in a dashboard.\n        searchScope.columns = searchScope.panel.columns || searchScope.savedObj.columns;\n        searchScope.sort = searchScope.panel.sort || searchScope.savedObj.sort;\n\n        var uiState = savedObject.uiStateJSON ? JSON.parse(savedObject.uiStateJSON) : {};\n        searchScope.uiState = container.createChildUistate((0, _panel_state.getPersistedStateId)(panel), uiState);\n\n        searchScope.setSortOrder = function setSortOrder(columnName, direction) {\n          searchScope.panel = container.updatePanel(searchScope.panel.panelIndex, { sort: [columnName, direction] });\n          searchScope.sort = searchScope.panel.sort;\n        };\n\n        searchScope.addColumn = function addColumn(columnName) {\n          savedObject.searchSource.get('index').popularizeField(columnName, 1);\n          columnActions.addColumn(searchScope.columns, columnName);\n          searchScope.panel = container.updatePanel(searchScope.panel.panelIndex, { columns: searchScope.columns });\n        };\n\n        searchScope.removeColumn = function removeColumn(columnName) {\n          savedObject.searchSource.get('index').popularizeField(columnName, 1);\n          columnActions.removeColumn(searchScope.columns, columnName);\n          searchScope.panel = container.updatePanel(searchScope.panel.panelIndex, { columns: searchScope.columns });\n        };\n\n        searchScope.moveColumn = function moveColumn(columnName, newIndex) {\n          columnActions.moveColumn(searchScope.columns, columnName, newIndex);\n          searchScope.panel = container.updatePanel(searchScope.panel.panelIndex, { columns: searchScope.columns });\n        };\n\n        searchScope.filter = function (field, value, operator) {\n          var index = savedObject.searchSource.get('index').id;\n          container.addFilter(field, value, operator, index);\n        };\n\n        var searchInstance = _this2.$compile(_search_template2.default)(searchScope);\n        var rootNode = _angular2.default.element(domNode);\n        rootNode.append(searchInstance);\n\n        _this2.addDestroyEmeddable(panel.panelIndex, function () {\n          searchInstance.remove();\n          searchScope.savedObj.destroy();\n          searchScope.$destroy();\n        });\n\n        return new _embeddable.Embeddable({\n          title: savedObject.title,\n          editUrl: searchScope.editPath\n        });\n      });\n    }\n  }]);\n\n  return SearchEmbeddableFactory;\n}(_embeddable.EmbeddableFactory);",null]}