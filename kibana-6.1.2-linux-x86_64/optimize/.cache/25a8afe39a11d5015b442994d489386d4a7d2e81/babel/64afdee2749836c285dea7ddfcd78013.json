{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/utils/streams/json_streams.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/utils/streams/json_streams.js","mtime":1515552212851},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createJsonParseStream = createJsonParseStream;\nexports.createJsonStringifyStream = createJsonStringifyStream;\n\nvar _stream = require('stream');\n\n/**\n *  Create a Transform stream that accepts strings (in\n *  object mode) and parsed those streams to provide their\n *  JavaScript value.\n *\n *  Parse errors are emitted with the \"error\" event, and\n *  if not caught will cause the process to crash. When caught\n *  the stream will continue to parse subsequent values.\n *\n *  @return {Transform}\n */\nfunction createJsonParseStream() {\n  return new _stream.Transform({\n    writableObjectMode: true,\n    readableObjectMode: true,\n    transform: function transform(json, enc, callback) {\n      try {\n        callback(null, JSON.parse(json));\n      } catch (err) {\n        callback(err);\n      }\n    }\n  });\n}\n\n/**\n *  Create a Transform stream that accepts arbitrary JavaScript\n *  values, stringifies them, and provides the output in object\n *  mode to consumers.\n *\n *  Serialization errors are emitted with the \"error\" event, and\n *  if not caught will cause the process to crash. When caught\n *  the stream will continue to stringify subsequent values.\n *\n *  @param  {Object} options\n *  @property {Boolean} options.pretty\n *  @return {Transform}\n */\nfunction createJsonStringifyStream() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$pretty = _ref.pretty,\n      pretty = _ref$pretty === undefined ? false : _ref$pretty;\n\n  return new _stream.Transform({\n    writableObjectMode: true,\n    readableObjectMode: true,\n    transform: function transform(json, enc, callback) {\n      try {\n        callback(null, JSON.stringify(json, null, pretty ? 2 : 0));\n      } catch (err) {\n        callback(err);\n      }\n    }\n  });\n}",null]}