{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/fields_fetcher.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/fields_fetcher.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createFieldsFetcher = createFieldsFetcher;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction createFieldsFetcher(apiClient, config) {\n  var FieldsFetcher = function () {\n    function FieldsFetcher() {\n      _classCallCheck(this, FieldsFetcher);\n    }\n\n    _createClass(FieldsFetcher, [{\n      key: 'fetch',\n      value: function fetch(indexPattern) {\n        if (indexPattern.isTimeBasedInterval()) {\n          var interval = indexPattern.getInterval().name;\n          return this.fetchForTimePattern(indexPattern.title, interval);\n        }\n\n        return this.fetchForWildcard(indexPattern.title);\n      }\n    }, {\n      key: 'fetchForTimePattern',\n      value: function fetchForTimePattern(indexPatternId) {\n        return apiClient.getFieldsForTimePattern({\n          pattern: indexPatternId,\n          lookBack: config.get('indexPattern:fieldMapping:lookBack'),\n          metaFields: config.get('metaFields')\n        });\n      }\n    }, {\n      key: 'fetchForWildcard',\n      value: function fetchForWildcard(indexPatternId) {\n        return apiClient.getFieldsForWildcard({\n          pattern: indexPatternId,\n          metaFields: config.get('metaFields')\n        });\n      }\n    }]);\n\n    return FieldsFetcher;\n  }();\n\n  return new FieldsFetcher();\n}",null]}