{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/histogram.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/histogram.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesBucketsHistogramProvider = AggTypesBucketsHistogramProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/validate_date_interval');\n\nvar _bucket_agg_type = require('ui/agg_types/buckets/_bucket_agg_type');\n\nvar _histogram = require('ui/agg_types/buckets/create_filter/histogram');\n\nvar _number_interval = require('ui/agg_types/controls/number_interval.html');\n\nvar _number_interval2 = _interopRequireDefault(_number_interval);\n\nvar _min_doc_count = require('ui/agg_types/controls/min_doc_count.html');\n\nvar _min_doc_count2 = _interopRequireDefault(_min_doc_count);\n\nvar _extended_bounds = require('ui/agg_types/controls/extended_bounds.html');\n\nvar _extended_bounds2 = _interopRequireDefault(_extended_bounds);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesBucketsHistogramProvider(Private, config) {\n  var BucketAggType = Private(_bucket_agg_type.AggTypesBucketsBucketAggTypeProvider);\n  var createFilter = Private(_histogram.AggTypesBucketsCreateFilterHistogramProvider);\n\n  return new BucketAggType({\n    name: 'histogram',\n    title: 'Histogram',\n    ordered: {},\n    makeLabel: function makeLabel(aggConfig) {\n      return aggConfig.getFieldDisplayName();\n    },\n    createFilter: createFilter,\n    decorateAggConfig: function decorateAggConfig() {\n      var autoBounds = void 0;\n\n      return {\n        setAutoBounds: {\n          configurable: true,\n          value: function value(newValue) {\n            autoBounds = newValue;\n          }\n        },\n        getAutoBounds: {\n          configurable: true,\n          value: function value() {\n            return autoBounds;\n          }\n        }\n      };\n    },\n    params: [{\n      name: 'field',\n      filterFieldTypes: 'number'\n    }, {\n      name: 'interval',\n      editor: _number_interval2.default,\n      modifyAggConfigOnSearchRequestStart: function modifyAggConfigOnSearchRequestStart(aggConfig, searchSource) {\n        var field = aggConfig.getField();\n        var aggBody = field.scripted ? { script: { inline: field.script, lang: field.lang } } : { field: field.name };\n\n        return searchSource.extend().size(0).aggs({\n          maxAgg: {\n            max: aggBody\n          },\n          minAgg: {\n            min: aggBody\n          }\n        }).fetchAsRejectablePromise().then(function (resp) {\n          aggConfig.setAutoBounds({\n            min: _lodash2.default.get(resp, 'aggregations.minAgg.value'),\n            max: _lodash2.default.get(resp, 'aggregations.maxAgg.value')\n          });\n        });\n      },\n\n      write: function write(aggConfig, output) {\n        var interval = parseFloat(aggConfig.params.interval);\n        if (interval <= 0) {\n          interval = 1;\n        }\n\n        // ensure interval does not create too many buckets and crash browser\n        if (aggConfig.getAutoBounds()) {\n          var range = aggConfig.getAutoBounds().max - aggConfig.getAutoBounds().min;\n          var bars = range / interval;\n          if (bars > config.get('histogram:maxBars')) {\n            var minInterval = range / config.get('histogram:maxBars');\n            // Round interval by order of magnitude to provide clean intervals\n            // Always round interval up so there will always be less buckets than histogram:maxBars\n            var orderOfMaginute = Math.pow(10, Math.floor(Math.log10(minInterval)));\n            var roundInterval = orderOfMaginute;\n            while (roundInterval < minInterval) {\n              roundInterval += orderOfMaginute;\n            }\n            interval = roundInterval;\n          }\n        }\n\n        output.params.interval = interval;\n      }\n    }, {\n      name: 'min_doc_count',\n      default: null,\n      editor: _min_doc_count2.default,\n      write: function write(aggConfig, output) {\n        if (aggConfig.params.min_doc_count) {\n          output.params.min_doc_count = 0;\n        } else {\n          output.params.min_doc_count = 1;\n        }\n      }\n    }, {\n      name: 'extended_bounds',\n      default: {},\n      editor: _extended_bounds2.default,\n      write: function write(aggConfig, output) {\n        var val = aggConfig.params.extended_bounds;\n\n        if (aggConfig.params.min_doc_count && (val.min != null || val.max != null)) {\n          output.params.extended_bounds = {\n            min: val.min,\n            max: val.max\n          };\n        }\n      },\n\n      // called from the editor\n      shouldShow: function shouldShow(aggConfig) {\n        var field = aggConfig.params.field;\n        if (field && (field.type === 'number' || field.type === 'date')) {\n          return aggConfig.params.min_doc_count;\n        }\n      }\n    }]\n  });\n}",null]}