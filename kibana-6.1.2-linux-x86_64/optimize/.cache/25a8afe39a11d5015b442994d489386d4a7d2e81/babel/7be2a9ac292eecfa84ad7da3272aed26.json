{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/visualize/visualization.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/visualize/visualization.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nrequire('ui/visualize/spy');\n\nrequire('ui/visualize/visualize.less');\n\nrequire('ui/visualize/visualize_legend');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _resize_checker = require('ui/resize_checker');\n\nvar _visualization = require('ui/visualize/visualization.html');\n\nvar _visualization2 = _interopRequireDefault(_visualization);\n\nvar _update_status = require('ui/vis/update_status');\n\nrequire('angular-sanitize');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana/directive', ['ngSanitize']).directive('visualization', function (Notifier, SavedVis, indexPatterns, Private, config, $timeout) {\n  var ResizeChecker = Private(_resize_checker.ResizeCheckerProvider);\n\n  return {\n    restrict: 'E',\n    require: '?renderCounter',\n    scope: {\n      showSpyPanel: '=?',\n      vis: '=',\n      visData: '=',\n      uiState: '=?',\n      searchSource: '='\n    },\n    template: _visualization2.default,\n    link: function link($scope, $el) {\n      var minVisChartHeight = 180;\n      var resizeChecker = new ResizeChecker($el);\n\n      //todo: lets make this a simple function call.\n      var getVisEl = jQueryGetter('.visualize-chart');\n      var getVisContainer = jQueryGetter('.vis-container');\n      var getSpyContainer = jQueryGetter('.visualize-spy-container');\n\n      $scope.addLegend = false;\n\n      // Show no results message when isZeroHits is true and it requires search\n      $scope.showNoResultsMessage = function () {\n        var requiresSearch = _lodash2.default.get($scope, 'vis.type.requiresSearch');\n        var isZeroHits = _lodash2.default.get($scope, 'visData.hits.total') === 0;\n        var shouldShowMessage = !_lodash2.default.get($scope, 'vis.params.handleNoResults');\n\n        return Boolean(requiresSearch && isZeroHits && shouldShowMessage);\n      };\n\n      var legendPositionToVisContainerClassMap = {\n        top: 'vis-container--legend-top',\n        bottom: 'vis-container--legend-bottom',\n        left: 'vis-container--legend-left',\n        right: 'vis-container--legend-right'\n      };\n\n      $scope.getVisContainerClasses = function () {\n        return legendPositionToVisContainerClassMap[$scope.vis.params.legendPosition];\n      };\n\n      $scope.spy = {};\n      $scope.spy.mode = $scope.uiState ? $scope.uiState.get('spy.mode', {}) : {};\n\n      var applyClassNames = function applyClassNames() {\n        var $visEl = getVisContainer();\n        var $spyEl = getSpyContainer();\n        if (!$spyEl) return;\n\n        var fullSpy = $scope.spy.mode && ($scope.spy.mode.fill || $scope.fullScreenSpy);\n\n        $visEl.toggleClass('spy-only', Boolean(fullSpy));\n        $spyEl.toggleClass('only', Boolean(fullSpy));\n\n        $timeout(function () {\n          if (shouldHaveFullSpy()) {\n            $visEl.addClass('spy-only');\n            $spyEl.addClass('only');\n          }\n        }, 0);\n      };\n\n      var loadingDelay = config.get('visualization:loadingDelay');\n      $scope.loadingStyle = {\n        '-webkit-transition-delay': loadingDelay,\n        'transition-delay': loadingDelay\n      };\n\n      function shouldHaveFullSpy() {\n        var $visEl = getVisEl();\n        if (!$visEl) return;\n\n        return $visEl.height() < minVisChartHeight && _lodash2.default.get($scope.spy, 'mode.fill') && _lodash2.default.get($scope.spy, 'mode.name');\n      }\n\n      // spy watchers\n      $scope.$watch('fullScreenSpy', applyClassNames);\n\n      $scope.$watchCollection('spy.mode', function () {\n        $scope.fullScreenSpy = shouldHaveFullSpy();\n        applyClassNames();\n      });\n\n      var Visualization = $scope.vis.type.visualization;\n      var visualization = new Visualization(getVisEl()[0], $scope.vis);\n\n      $scope.vis.initialized = true;\n\n      var renderFunction = _lodash2.default.debounce(function () {\n        var container = getVisContainer();\n        if (!container) return;\n        $scope.vis.size = [container.width(), container.height()];\n        var status = (0, _update_status.getUpdateStatus)($scope);\n        visualization.render($scope.visData, status).then(function () {\n          // renderComplete\n          $scope.$emit('renderComplete');\n          $el.trigger('renderComplete');\n        });\n        $scope.$apply();\n      }, 100);\n\n      $scope.$on('render', function () {\n        if (!$scope.vis || !$scope.vis.initialized || $scope.vis.type.requiresSearch && !$scope.visData) {\n          return;\n        }\n        $scope.addLegend = $scope.vis.params.addLegend;\n        $scope.vis.refreshLegend++;\n        $timeout(renderFunction);\n      });\n\n      $scope.$on('$destroy', function () {\n        resizeChecker.destroy();\n        visualization.destroy();\n      });\n\n      if (!$scope.vis.visualizeScope) {\n        $scope.$watchGroup(['visData', 'vis.params'], function () {\n          $scope.$emit('render');\n        });\n\n        // the very first resize event is the initialization, which we can safely ignore.\n        // however, we also want to debounce the resize event, and not miss a resize event\n        // if it occurs within the first 200ms window\n        var resizeFunc = _lodash2.default.debounce(function () {\n          $scope.$emit('render');\n        }, 200);\n\n        var resizeInit = false;\n        resizeChecker.on('resize', function () {\n          if (!resizeInit) return resizeInit = true;\n          resizeFunc();\n        });\n      }\n\n      function jQueryGetter(selector) {\n        return function () {\n          var $sel = $el.find(selector);\n          if ($sel.size()) return $sel;\n        };\n      }\n    }\n  };\n});",null]}