{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/indexed_fields_table/indexed_fields_table.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/indexed_fields_table/indexed_fields_table.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/paginated_table');\n\nvar _field_name = require('./field_name.html');\n\nvar _field_name2 = _interopRequireDefault(_field_name);\n\nvar _field_type = require('./field_type.html');\n\nvar _field_type2 = _interopRequireDefault(_field_type);\n\nvar _field_controls = require('../field_controls.html');\n\nvar _field_controls2 = _interopRequireDefault(_field_controls);\n\nvar _modules = require('ui/modules');\n\nvar _field_wildcard = require('ui/field_wildcard');\n\nvar _indexed_fields_table = require('./indexed_fields_table.html');\n\nvar _indexed_fields_table2 = _interopRequireDefault(_indexed_fields_table);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('apps/management').directive('indexedFieldsTable', function (Private, $filter) {\n  var yesTemplate = '<i class=\"fa fa-check\" aria-label=\"yes\"></i>';\n  var noTemplate = '';\n  var filter = $filter('filter');\n\n  var _Private = Private(_field_wildcard.FieldWildcardProvider),\n      fieldWildcardMatcher = _Private.fieldWildcardMatcher;\n\n  return {\n    restrict: 'E',\n    template: _indexed_fields_table2.default,\n    scope: true,\n    link: function link($scope) {\n      var rowScopes = []; // track row scopes, so they can be destroyed as needed\n      $scope.perPage = 25;\n      $scope.columns = [{ title: 'name' }, { title: 'type' }, { title: 'format' }, { title: 'searchable', info: 'These fields can be used in the filter bar' }, { title: 'aggregatable', info: 'These fields can be used in visualization aggregations' }, { title: 'excluded', info: 'Fields that are excluded from _source when it is fetched' }, { title: 'controls', sortable: false }];\n\n      $scope.$watchMulti(['[]indexPattern.fields', 'fieldFilter', 'indexedFieldTypeFilter'], refreshRows);\n\n      function refreshRows() {\n        // clear and destroy row scopes\n        _lodash2.default.invoke(rowScopes.splice(0), '$destroy');\n        var fields = filter($scope.indexPattern.getNonScriptedFields(), {\n          name: $scope.fieldFilter,\n          type: $scope.indexedFieldTypeFilter\n        });\n        var sourceFilters = $scope.indexPattern.sourceFilters && $scope.indexPattern.sourceFilters.map(function (f) {\n          return f.value;\n        }) || [];\n        var fieldWildcardMatch = fieldWildcardMatcher(sourceFilters);\n        _lodash2.default.find($scope.editSections, { index: 'indexedFields' }).count = fields.length; // Update the tab count\n\n        $scope.rows = fields.map(function (field) {\n          var childScope = _lodash2.default.assign($scope.$new(), { field: field });\n          rowScopes.push(childScope);\n\n          var excluded = fieldWildcardMatch(field.name);\n\n          return [{\n            markup: _field_name2.default,\n            scope: childScope,\n            value: field.displayName,\n            attr: {\n              'data-test-subj': 'indexedFieldName'\n            }\n          }, {\n            markup: _field_type2.default,\n            scope: childScope,\n            value: field.type,\n            attr: {\n              'data-test-subj': 'indexedFieldType'\n            }\n          }, _lodash2.default.get($scope.indexPattern, ['fieldFormatMap', field.name, 'type', 'title']), {\n            markup: field.searchable ? yesTemplate : noTemplate,\n            value: field.searchable\n          }, {\n            markup: field.aggregatable ? yesTemplate : noTemplate,\n            value: field.aggregatable\n          }, {\n            markup: excluded ? yesTemplate : noTemplate,\n            value: excluded\n          }, {\n            markup: _field_controls2.default,\n            scope: childScope\n          }];\n        });\n      }\n    }\n  };\n});",null]}