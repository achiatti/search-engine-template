{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/ui_framework/src/components/context_menu/context_menu.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/ui_framework/src/components/context_menu/context_menu.js","mtime":1515552214047},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KuiContextMenu = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _context_menu_panel = require('./context_menu_panel');\n\nvar _context_menu_item = require('./context_menu_item');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];\n  }return target;\n}\n\nfunction mapIdsToPanels(panels) {\n  var map = {};\n\n  panels.forEach(function (panel) {\n    map[panel.id] = panel;\n  });\n\n  return map;\n}\n\nfunction mapIdsToPreviousPanels(panels) {\n  var idToPreviousPanelIdMap = {};\n\n  panels.forEach(function (panel) {\n    if (Array.isArray(panel.items)) {\n      panel.items.forEach(function (item) {\n        var isCloseable = item.panel !== undefined;\n        if (isCloseable) {\n          idToPreviousPanelIdMap[item.panel] = panel.id;\n        }\n      });\n    }\n  });\n\n  return idToPreviousPanelIdMap;\n}\n\nfunction mapPanelItemsToPanels(panels) {\n  var idAndItemIndexToPanelIdMap = {};\n\n  panels.forEach(function (panel) {\n    idAndItemIndexToPanelIdMap[panel.id] = {};\n\n    if (panel.items) {\n      panel.items.forEach(function (item, index) {\n        if (item.panel) {\n          idAndItemIndexToPanelIdMap[panel.id][index] = item.panel;\n        }\n      });\n    }\n  });\n\n  return idAndItemIndexToPanelIdMap;\n}\n\nvar KuiContextMenu = function (_react$Component) {\n  _inherits(KuiContextMenu, _react$Component);\n\n  function KuiContextMenu(props) {\n    _classCallCheck(this, KuiContextMenu);\n\n    var _this = _possibleConstructorReturn(this, (KuiContextMenu.__proto__ || Object.getPrototypeOf(KuiContextMenu)).call(this, props));\n\n    _this.hasPreviousPanel = function (panelId) {\n      var previousPanelId = _this.idToPreviousPanelIdMap[panelId];\n      return typeof previousPanelId !== 'undefined';\n    };\n\n    _this.showNextPanel = function (itemIndex) {\n      var nextPanelId = _this.idAndItemIndexToPanelIdMap[_this.state.incomingPanelId][itemIndex];\n      if (nextPanelId) {\n        if (_this.state.isUsingKeyboardToNavigate) {\n          _this.setState({\n            focusedItemIndex: 0\n          });\n        }\n\n        _this.showPanel(nextPanelId, 'next');\n      }\n    };\n\n    _this.showPreviousPanel = function () {\n      // If there's a previous panel, then we can close the current panel to go back to it.\n      if (_this.hasPreviousPanel(_this.state.incomingPanelId)) {\n        var previousPanelId = _this.idToPreviousPanelIdMap[_this.state.incomingPanelId];\n\n        // Set focus on the item which shows the panel we're leaving.\n        var previousPanel = _this.idToPanelMap[previousPanelId];\n        var focusedItemIndex = previousPanel.items.findIndex(function (item) {\n          return item.panel === _this.state.incomingPanelId;\n        });\n\n        if (focusedItemIndex !== -1) {\n          _this.setState({\n            focusedItemIndex: focusedItemIndex\n          });\n        }\n\n        _this.showPanel(previousPanelId, 'previous');\n      }\n    };\n\n    _this.onIncomingPanelHeightChange = function (height) {\n      _this.setState({\n        height: height\n      });\n    };\n\n    _this.onOutGoingPanelTransitionComplete = function () {\n      _this.setState({\n        isOutgoingPanelVisible: false\n      });\n    };\n\n    _this.onUseKeyboardToNavigate = function () {\n      if (!_this.state.isUsingKeyboardToNavigate) {\n        _this.setState({\n          isUsingKeyboardToNavigate: true\n        });\n      }\n    };\n\n    _this.idToPanelMap = {};\n    _this.idToPreviousPanelIdMap = {};\n    _this.idAndItemIndexToPanelIdMap = {};\n\n    _this.state = {\n      height: undefined,\n      outgoingPanelId: undefined,\n      incomingPanelId: props.initialPanelId,\n      transitionDirection: undefined,\n      isOutgoingPanelVisible: false,\n      focusedItemIndex: undefined,\n      isUsingKeyboardToNavigate: false\n    };\n    return _this;\n  }\n\n  _createClass(KuiContextMenu, [{\n    key: 'showPanel',\n    value: function showPanel(panelId, direction) {\n      this.setState({\n        outgoingPanelId: this.state.incomingPanelId,\n        incomingPanelId: panelId,\n        transitionDirection: direction,\n        isOutgoingPanelVisible: true\n      });\n    }\n  }, {\n    key: 'updatePanelMaps',\n    value: function updatePanelMaps(panels) {\n      this.idToPanelMap = mapIdsToPanels(panels);\n      this.idToPreviousPanelIdMap = mapIdsToPreviousPanels(panels);\n      this.idAndItemIndexToPanelIdMap = mapPanelItemsToPanels(panels);\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.updatePanelMaps(this.props.panels);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.panels !== this.props.panels) {\n        this.updatePanelMaps(nextProps.panels);\n      }\n    }\n  }, {\n    key: 'renderItems',\n    value: function renderItems() {\n      var _this2 = this;\n\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      return items.map(function (item, index) {\n        var panel = item.panel,\n            name = item.name,\n            icon = item.icon,\n            onClick = item.onClick,\n            rest = _objectWithoutProperties(item, ['panel', 'name', 'icon', 'onClick']);\n\n        var onClickHandler = panel ? function () {\n          // This component is commonly wrapped in a KuiOutsideClickDetector, which means we'll\n          // need to wait for that logic to complete before re-rendering the DOM via showPanel.\n          window.requestAnimationFrame(function () {\n            if (onClick) onClick();\n            _this2.showNextPanel(index);\n          });\n        } : onClick;\n\n        return _react2.default.createElement(_context_menu_item.KuiContextMenuItem, _extends({\n          key: name,\n          icon: icon,\n          onClick: onClickHandler,\n          hasPanel: Boolean(panel)\n        }, rest), name);\n      });\n    }\n  }, {\n    key: 'renderPanel',\n    value: function renderPanel(panelId, transitionType) {\n      var _this3 = this;\n\n      var panel = this.idToPanelMap[panelId];\n\n      if (!panel) {\n        return;\n      }\n\n      // As above, we need to wait for KuiOutsideClickDetector to complete its logic before\n      // re-rendering via showPanel.\n      var onClose = void 0;\n      if (this.hasPreviousPanel(panelId)) {\n        onClose = function onClose() {\n          return window.requestAnimationFrame(_this3.showPreviousPanel);\n        };\n      }\n\n      return _react2.default.createElement(_context_menu_panel.KuiContextMenuPanel, {\n        key: panelId,\n        className: 'kuiContextMenu__panel',\n        onHeightChange: transitionType === 'in' ? this.onIncomingPanelHeightChange : undefined,\n        onTransitionComplete: transitionType === 'out' ? this.onOutGoingPanelTransitionComplete : undefined,\n        title: panel.title,\n        onClose: onClose,\n        transitionType: this.state.isOutgoingPanelVisible ? transitionType : undefined,\n        transitionDirection: this.state.isOutgoingPanelVisible ? this.state.transitionDirection : undefined,\n        hasFocus: transitionType === 'in',\n        items: this.renderItems(panel.items),\n        initialFocusedItemIndex: this.state.isUsingKeyboardToNavigate ? this.state.focusedItemIndex : undefined,\n        onUseKeyboardToNavigate: this.onUseKeyboardToNavigate,\n        showNextPanel: this.showNextPanel,\n        showPreviousPanel: this.showPreviousPanel\n      }, panel.content);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props;\n\n      var panels = _props.panels,\n          className = _props.className,\n          initialPanelId = _props.initialPanelId,\n          rest = _objectWithoutProperties(_props, ['panels', 'className', 'initialPanelId']);\n\n      var incomingPanel = this.renderPanel(this.state.incomingPanelId, 'in');\n      var outgoingPanel = void 0;\n\n      if (this.state.isOutgoingPanelVisible) {\n        outgoingPanel = this.renderPanel(this.state.outgoingPanelId, 'out');\n      }\n\n      var classes = (0, _classnames2.default)('kuiContextMenu', className);\n\n      return _react2.default.createElement('div', _extends({\n        ref: function ref(node) {\n          _this4.menu = node;\n        },\n        className: classes,\n        style: { height: this.state.height }\n      }, rest), outgoingPanel, incomingPanel);\n    }\n  }]);\n\n  return KuiContextMenu;\n}(_react.Component);\n\nexports.KuiContextMenu = KuiContextMenu;\nKuiContextMenu.propTypes = {\n  className: _propTypes2.default.string,\n  panels: _propTypes2.default.array,\n  initialPanelId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])\n};\nKuiContextMenu.defaultProps = {\n  panels: []\n};",null]}