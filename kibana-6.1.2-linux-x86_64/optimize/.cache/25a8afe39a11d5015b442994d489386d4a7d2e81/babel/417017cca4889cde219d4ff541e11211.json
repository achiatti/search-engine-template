{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/lib/fetch_fields.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/lib/fetch_fields.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FetchFieldsProvider = function FetchFieldsProvider(Notifier, $http) {\n  var notify = new Notifier({ location: 'Metrics' });\n  return function () {\n    var indexPatterns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['*'];\n\n    if (!Array.isArray(indexPatterns)) indexPatterns = [indexPatterns];\n    return new Promise(function (resolve, reject) {\n      var fields = {};\n\n      Promise.all(indexPatterns.map(function (pattern) {\n        var httpResult = $http.get('../api/metrics/fields?index=' + pattern).then(function (resp) {\n          return resp.data;\n        }).catch(function (resp) {\n          throw resp.data;\n        });\n\n        return httpResult.then(function (resp) {\n          if (resp.length && pattern) {\n            fields[pattern] = resp;\n          }\n        }).catch(function (resp) {\n          var err = new Error(resp.message);\n          err.stack = resp.stack;\n          notify.error(err);\n          reject(err);\n        });\n      })).then(function () {\n        resolve(fields);\n      });\n    });\n  };\n};\n\nexports.FetchFieldsProvider = FetchFieldsProvider;",null]}