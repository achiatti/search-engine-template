{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/timelion/public/directives/timelion_expression_suggestions/arg_value_suggestions.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/timelion/public/directives/timelion_expression_suggestions/arg_value_suggestions.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArgValueSuggestionsProvider = ArgValueSuggestionsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _saved_objects = require('ui/saved_objects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction ArgValueSuggestionsProvider(Private, indexPatterns) {\n  var _this = this;\n\n  var getIndexPattern = function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(functionArgs) {\n      var indexPatternArg, indexPatternTitle, resp, indexPatternSavedObject;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              indexPatternArg = functionArgs.find(function (argument) {\n                return argument.name === 'index';\n              });\n\n              if (indexPatternArg) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 3:\n              indexPatternTitle = _lodash2.default.get(indexPatternArg, 'value.text');\n              _context.next = 6;\n              return savedObjectsClient.find({\n                type: 'index-pattern',\n                fields: ['title'],\n                search: '\"' + indexPatternTitle + '\"',\n                search_fields: ['title'],\n                perPage: 10\n              });\n\n            case 6:\n              resp = _context.sent;\n              indexPatternSavedObject = resp.savedObjects.find(function (savedObject) {\n                return savedObject.attributes.title === indexPatternTitle;\n              });\n\n              if (indexPatternSavedObject) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 10:\n              _context.next = 12;\n              return indexPatterns.get(indexPatternSavedObject.id);\n\n            case 12:\n              return _context.abrupt('return', _context.sent);\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function getIndexPattern(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n\n  function containsFieldName(partial, field) {\n    if (!partial) {\n      return true;\n    }\n    return field.name.includes(partial);\n  }\n\n  // Argument value suggestion handlers requiring custom client side code\n  // Could not put with function definition since functions are defined on server\n  var customHandlers = {\n    es: {\n      index: function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(partial) {\n          var search, resp;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  search = partial ? partial + '*' : '*';\n                  _context2.next = 3;\n                  return savedObjectsClient.find({\n                    type: 'index-pattern',\n                    fields: ['title'],\n                    search: '' + search,\n                    search_fields: ['title'],\n                    perPage: 25\n                  });\n\n                case 3:\n                  resp = _context2.sent;\n                  return _context2.abrupt('return', resp.savedObjects.map(function (savedObject) {\n                    return { name: savedObject.attributes.title };\n                  }));\n\n                case 5:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function index(_x2) {\n          return _ref2.apply(this, arguments);\n        }\n\n        return index;\n      }(),\n      metric: function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(partial, functionArgs) {\n          var indexPattern, valueSplit;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(!partial || !partial.includes(':'))) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt('return', [{ name: 'avg:' }, { name: 'cardinality:' }, { name: 'count' }, { name: 'max:' }, { name: 'min:' }, { name: 'sum:' }]);\n\n                case 2:\n                  _context3.next = 4;\n                  return getIndexPattern(functionArgs);\n\n                case 4:\n                  indexPattern = _context3.sent;\n\n                  if (indexPattern) {\n                    _context3.next = 7;\n                    break;\n                  }\n\n                  return _context3.abrupt('return', []);\n\n                case 7:\n                  valueSplit = partial.split(':');\n                  return _context3.abrupt('return', indexPattern.fields.filter(function (field) {\n                    return field.aggregatable && 'number' === field.type && containsFieldName(valueSplit[1], field);\n                  }).map(function (field) {\n                    return { name: valueSplit[0] + ':' + field.name, help: field.type };\n                  }));\n\n                case 9:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function metric(_x3, _x4) {\n          return _ref3.apply(this, arguments);\n        }\n\n        return metric;\n      }(),\n      split: function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(partial, functionArgs) {\n          var indexPattern;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return getIndexPattern(functionArgs);\n\n                case 2:\n                  indexPattern = _context4.sent;\n\n                  if (indexPattern) {\n                    _context4.next = 5;\n                    break;\n                  }\n\n                  return _context4.abrupt('return', []);\n\n                case 5:\n                  return _context4.abrupt('return', indexPattern.fields.filter(function (field) {\n                    return field.aggregatable && ['number', 'boolean', 'date', 'ip', 'string'].includes(field.type) && containsFieldName(partial, field);\n                  }).map(function (field) {\n                    return { name: field.name, help: field.type };\n                  }));\n\n                case 6:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function split(_x5, _x6) {\n          return _ref4.apply(this, arguments);\n        }\n\n        return split;\n      }(),\n      timefield: function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(partial, functionArgs) {\n          var indexPattern;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return getIndexPattern(functionArgs);\n\n                case 2:\n                  indexPattern = _context5.sent;\n\n                  if (indexPattern) {\n                    _context5.next = 5;\n                    break;\n                  }\n\n                  return _context5.abrupt('return', []);\n\n                case 5:\n                  return _context5.abrupt('return', indexPattern.fields.filter(function (field) {\n                    return 'date' === field.type && containsFieldName(partial, field);\n                  }).map(function (field) {\n                    return { name: field.name };\n                  }));\n\n                case 6:\n                case 'end':\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        function timefield(_x7, _x8) {\n          return _ref5.apply(this, arguments);\n        }\n\n        return timefield;\n      }()\n    }\n  };\n\n  return {\n    /**\n     * @param {string} functionName - user provided function name containing argument\n     * @param {string} argName - user provided argument name\n     * @return {boolean} true when dynamic suggestion handler provided for function argument\n     */\n    hasDynamicSuggestionsForArgument: function hasDynamicSuggestionsForArgument(functionName, argName) {\n      return customHandlers[functionName] && customHandlers[functionName][argName];\n    },\n\n    /**\n     * @param {string} functionName - user provided function name containing argument\n     * @param {string} argName - user provided argument name\n     * @param {object} functionArgs - user provided function arguments parsed ahead of current argument\n     * @param {string} partial - user provided argument value\n     * @return {array} array of dynamic suggestions matching partial\n     */\n    getDynamicSuggestionsForArgument: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(functionName, argName, functionArgs) {\n        var partialInput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return customHandlers[functionName][argName](partialInput, functionArgs);\n\n              case 2:\n                return _context6.abrupt('return', _context6.sent);\n\n              case 3:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, _this);\n      }));\n\n      function getDynamicSuggestionsForArgument(_x10, _x11, _x12) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return getDynamicSuggestionsForArgument;\n    }(),\n\n    /**\n     * @param {string} partial - user provided argument value\n     * @param {array} staticSuggestions - arugment value suggestions\n     * @return {array} array of static suggestions matching partial\n     */\n    getStaticSuggestionsForInput: function getStaticSuggestionsForInput() {\n      var partialInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var staticSuggestions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (partialInput) {\n        return staticSuggestions.filter(function (suggestion) {\n          return suggestion.name.includes(partialInput);\n        });\n      }\n\n      return staticSuggestions;\n    }\n  };\n}",null]}