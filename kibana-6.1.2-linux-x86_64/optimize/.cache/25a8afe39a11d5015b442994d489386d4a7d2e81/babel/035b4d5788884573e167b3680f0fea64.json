{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_bar/lib/map_phrase.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_bar/lib/map_phrase.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterBarLibMapPhraseProvider = FilterBarLibMapPhraseProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _errors = require('../../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction FilterBarLibMapPhraseProvider(Promise, courier) {\n  return function (filter) {\n    var isScriptedPhraseFilter = isScriptedPhrase(filter);\n    if (!_lodash2.default.has(filter, ['query', 'match']) && !isScriptedPhraseFilter) {\n      return Promise.reject(filter);\n    }\n\n    function getParams(indexPattern) {\n      var type = 'phrase';\n      var key = isScriptedPhraseFilter ? filter.meta.field : Object.keys(filter.query.match)[0];\n      var params = isScriptedPhraseFilter ? filter.script.script.params : filter.query.match[key];\n      var query = isScriptedPhraseFilter ? params.value : params.query;\n\n      // Sometimes a filter will end up with an invalid index param. This could happen for a lot of reasons,\n      // for example a user might manually edit the url or the index pattern's ID might change due to\n      // external factors e.g. a reindex. We only need the index in order to grab the field formatter, so we fallback\n      // on displaying the raw value if the index is invalid.\n      var value = indexPattern ? indexPattern.fields.byName[key].format.convert(query) : query;\n      return { type: type, key: key, value: value, params: params };\n    }\n\n    return courier.indexPatterns.get(filter.meta.index).then(getParams).catch(function (error) {\n      if (error instanceof _errors.SavedObjectNotFound) {\n        return getParams();\n      }\n      throw error;\n    });\n  };\n}\n\nfunction isScriptedPhrase(filter) {\n  var params = _lodash2.default.get(filter, ['script', 'script', 'params']);\n  return params && params.value;\n}",null]}