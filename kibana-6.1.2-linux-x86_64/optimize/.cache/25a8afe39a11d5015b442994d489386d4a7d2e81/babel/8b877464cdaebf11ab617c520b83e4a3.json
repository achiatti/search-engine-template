{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/visualize/spy.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/visualize/spy.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _spy_modes = require('ui/registry/spy_modes');\n\nvar _modules = require('ui/modules');\n\nvar _spy = require('ui/visualize/spy.html');\n\nvar _spy2 = _interopRequireDefault(_spy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/visualize').directive('visualizeSpy', function (Private, $compile) {\n\n  var spyModes = Private(_spy_modes.SpyModesRegistryProvider);\n  var defaultMode = spyModes.inOrder[0].name;\n\n  return {\n    restrict: 'E',\n    template: _spy2.default,\n    link: function link($scope, $el) {\n      var currentSpy = void 0;\n      var $container = $el.find('[data-spy-content-container]');\n      var fullPageSpy = _lodash2.default.get($scope.spy, 'mode.fill', false);\n      $scope.modes = spyModes;\n      $scope.spy.params = $scope.spy.params || {};\n\n      function getSpyObject(name) {\n        name = _lodash2.default.isUndefined(name) ? $scope.spy.mode.name : name;\n        fullPageSpy = _lodash2.default.isNull(name) ? false : fullPageSpy;\n\n        return {\n          name: name,\n          fill: fullPageSpy\n        };\n      }\n\n      function setSpyMode(modeName) {\n        if (!_lodash2.default.isString(modeName)) modeName = null;\n        $scope.spy.mode = getSpyObject(modeName);\n        $scope.$emit('render');\n      }\n\n      var renderSpy = function renderSpy(spyName) {\n        var newMode = $scope.modes.byName[spyName];\n\n        // clear the current value\n        if (currentSpy) {\n          currentSpy.$container && currentSpy.$container.remove();\n          currentSpy.$scope && currentSpy.$scope.$destroy();\n          $scope.spy.mode = {};\n          currentSpy = null;\n        }\n\n        // no further changes\n        if (!newMode) return;\n\n        // update the spy mode and append to the container\n        var selectedSpyMode = getSpyObject(newMode.name);\n        $scope.spy.mode = selectedSpyMode;\n        $scope.selectedModeName = selectedSpyMode.name;\n\n        currentSpy = _lodash2.default.assign({\n          $scope: $scope.$new(),\n          $container: (0, _jquery2.default)('<div class=\"visualize-spy-content\">').appendTo($container)\n        }, $scope.spy.mode);\n\n        currentSpy.$container.append($compile(newMode.template)(currentSpy.$scope));\n        newMode.link && newMode.link(currentSpy.$scope, currentSpy.$container);\n      };\n\n      $scope.toggleDisplay = function () {\n        var modeName = _lodash2.default.get($scope.spy, 'mode.name');\n        setSpyMode(modeName ? null : defaultMode);\n      };\n\n      $scope.toggleFullPage = function () {\n        fullPageSpy = !fullPageSpy;\n        $scope.spy.mode = getSpyObject();\n      };\n\n      $scope.onSpyModeChange = function onSpyModeChange() {\n        setSpyMode($scope.selectedModeName);\n      };\n\n      if ($scope.uiState) {\n        // sync external uiState changes\n        var syncUIState = function syncUIState() {\n          return $scope.spy.mode = $scope.uiState.get('spy.mode');\n        };\n        $scope.uiState.on('change', syncUIState);\n        $scope.$on('$destroy', function () {\n          return $scope.uiState.off('change', syncUIState);\n        });\n      }\n\n      // re-render the spy when the name of fill modes change\n      $scope.$watchMulti(['spy.mode.name', 'spy.mode.fill'], function (newVals, oldVals) {\n        // update the ui state, but only if it really changes\n        var changedVals = newVals.filter(function (val) {\n          return !_lodash2.default.isUndefined(val);\n        }).length > 0;\n        if (changedVals && !_lodash2.default.isEqual(newVals, oldVals)) {\n          if ($scope.uiState) $scope.uiState.set('spy.mode', $scope.spy.mode);\n        }\n\n        // ensure the fill mode is synced\n        fullPageSpy = _lodash2.default.get($scope.spy, 'mode.fill', fullPageSpy);\n\n        renderSpy(_lodash2.default.get($scope.spy, 'mode.name', null));\n      });\n    }\n  };\n});",null]}