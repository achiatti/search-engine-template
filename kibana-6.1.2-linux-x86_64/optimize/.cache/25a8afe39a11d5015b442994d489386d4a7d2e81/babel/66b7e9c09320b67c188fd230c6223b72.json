{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/pager/pager.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/pager/pager.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(min, val), max);\n}\n\nvar Pager = exports.Pager = function () {\n  function Pager(totalItems, pageSize, startingPage) {\n    _classCallCheck(this, Pager);\n\n    this.currentPage = startingPage;\n    this.totalItems = totalItems;\n    this.pageSize = pageSize;\n    this.startIndex = 0;\n    this.updateMeta();\n  }\n\n  _createClass(Pager, [{\n    key: \"nextPage\",\n    value: function nextPage() {\n      this.currentPage += 1;\n      this.updateMeta();\n    }\n  }, {\n    key: \"previousPage\",\n    value: function previousPage() {\n      this.currentPage -= 1;\n      this.updateMeta();\n    }\n  }, {\n    key: \"setTotalItems\",\n    value: function setTotalItems(count) {\n      this.totalItems = count;\n      this.updateMeta();\n    }\n  }, {\n    key: \"setPageSize\",\n    value: function setPageSize(count) {\n      this.pageSize = count;\n      this.updateMeta();\n    }\n  }, {\n    key: \"updateMeta\",\n    value: function updateMeta() {\n      this.totalPages = Math.ceil(this.totalItems / this.pageSize);\n      this.currentPage = clamp(this.currentPage, 1, this.totalPages);\n\n      this.startItem = (this.currentPage - 1) * this.pageSize + 1;\n      this.startItem = clamp(this.startItem, 0, this.totalItems);\n\n      this.endItem = this.startItem - 1 + this.pageSize;\n      this.endItem = clamp(this.endItem, 0, this.totalItems);\n\n      this.startIndex = this.startItem - 1;\n    }\n  }, {\n    key: \"pageCount\",\n    get: function get() {\n      return Math.ceil(this.totalItems / this.pageSize);\n    }\n  }, {\n    key: \"hasNextPage\",\n    get: function get() {\n      return this.currentPage < this.totalPages;\n    }\n  }, {\n    key: \"hasPreviousPage\",\n    get: function get() {\n      return this.currentPage > 1;\n    }\n  }]);\n\n  return Pager;\n}();",null]}