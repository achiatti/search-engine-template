{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/dashboard_strings.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/dashboard_strings.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStringList = createStringList;\nexports.getUnsavedChangesWarningMessage = getUnsavedChangesWarningMessage;\nexports.getDashboardTitle = getDashboardTitle;\n\nvar _dashboard_view_mode = require('./dashboard_view_mode');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param list {Array.<string>}\n * @returns {string} The list of strings concatenated with commas so it can be used in a message.\n * E.g. ['a', 'b', 'c'] returns 'a, b, and c'.\n */\nfunction createStringList(list) {\n  var listClone = _lodash2.default.clone(list);\n  var isPlural = list.length > 1;\n  var lastEntry = isPlural ? ', and ' + list[list.length - 1] : '';\n  if (isPlural) listClone.splice(-1, 1);\n\n  return '' + listClone.join(', ') + lastEntry;\n}\n\n/**\n * @param changedFilters {Array.<string>} An optional list of filter types that have changed.\n * @returns {string} A warning message to display to the user that they are going to lose changes.\n */\nfunction getUnsavedChangesWarningMessage(changedFilters) {\n  var changedFilterList = createStringList(changedFilters);\n\n  return changedFilterList ? 'Are you sure you want to cancel and lose changes, including changes made to your ' + changedFilterList + '?' : 'Are you sure you want to cancel and lose changes?';\n}\n\n/**\n * @param title {string} the current title of the dashboard\n * @param viewMode {DashboardViewMode} the current mode. If in editing state, prepends 'Editing ' to the title.\n * @param isDirty {boolean} if the dashboard is in a dirty state. If in dirty state, adds (unsaved) to the\n * end of the title.\n * @returns {string} A title to display to the user based on the above parameters.\n */\nfunction getDashboardTitle(title, viewMode, isDirty) {\n  var isEditMode = viewMode === _dashboard_view_mode.DashboardViewMode.EDIT;\n  var unsavedSuffix = isEditMode && isDirty ? ' (unsaved)' : '';\n\n  var displayTitle = '' + title + unsavedSuffix;\n  return isEditMode ? 'Editing ' + displayTitle : displayTitle;\n}",null]}