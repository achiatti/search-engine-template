{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/date_range.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/date_range.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dateRange = undefined;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar dateRange = exports.dateRange = {\n  toString: function toString(range, format) {\n    if (!range.from) {\n      return 'Before ' + format(range.to);\n    } else if (!range.to) {\n      return 'After ' + format(range.from);\n    } else {\n      return format(range.from) + ' to ' + format(range.to);\n    }\n  },\n  parse: function parse(rangeString, format) {\n    var chunks = rangeString.split(' to ');\n    if (chunks.length === 2) return { from: (0, _moment2.default)(chunks[0], format), to: (0, _moment2.default)(chunks[1], format) };\n\n    chunks = rangeString.split('Before ');\n    if (chunks.length === 2) return { to: (0, _moment2.default)(chunks[1], format) };\n\n    chunks = rangeString.split('After ');\n    if (chunks.length === 2) return { from: (0, _moment2.default)(chunks[1], format) };\n\n    throw new Error('Error attempting to parse date range: ' + rangeString);\n  }\n};",null]}