{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/panel/panel_utils.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/panel/panel_utils.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PanelUtils = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dashboard_constants = require('../dashboard_constants');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PanelUtils = exports.PanelUtils = function () {\n  function PanelUtils() {\n    _classCallCheck(this, PanelUtils);\n  }\n\n  _createClass(PanelUtils, null, [{\n    key: 'initializeDefaults',\n\n    /**\n     * Fills in default parameters where not specified.\n     * @param {PanelState} panel\n     */\n    value: function initializeDefaults(panel) {\n      panel.gridData = panel.gridData || {};\n      panel.gridData.w = panel.gridData.w || _dashboard_constants.DEFAULT_PANEL_WIDTH;\n      panel.gridData.h = panel.gridData.h || _dashboard_constants.DEFAULT_PANEL_HEIGHT;\n\n      if (!panel.id) {\n        // In the interest of backwards comparability\n        if (panel.visId) {\n          panel.id = panel.visId;\n          panel.type = 'visualization';\n          delete panel.visId;\n        } else {\n          throw new Error('Missing object id on panel');\n        }\n      }\n    }\n  }, {\n    key: 'convertOldPanelData',\n    value: function convertOldPanelData(panel) {\n      panel.gridData = {\n        x: panel.col - 1,\n        y: panel.row - 1,\n        w: panel.size_x || _dashboard_constants.DEFAULT_PANEL_WIDTH,\n        h: panel.size_y || _dashboard_constants.DEFAULT_PANEL_HEIGHT,\n        i: panel.panelIndex.toString()\n      };\n      panel.version = _chrome2.default.getKibanaVersion();\n      panel.panelIndex = panel.panelIndex.toString();\n      delete panel.size_x;\n      delete panel.size_y;\n      delete panel.row;\n      delete panel.col;\n\n      return panel;\n    }\n\n    /**\n     * Returns the panel with the given panelIndex from the panels array (*NOT* the panel at the given index).\n     * @param panelIndex {number} - Note this is *NOT* the index of the panel in the panels array.\n     * panelIndex is really a panelId, but is called panelIndex for BWC reasons.\n     * @param panels {Array<Object>}\n     */\n\n  }, {\n    key: 'findPanelByPanelIndex',\n    value: function findPanelByPanelIndex(panelIndex, panels) {\n      return _lodash2.default.find(panels, function (panel) {\n        return panel.panelIndex === panelIndex;\n      });\n    }\n  }, {\n    key: 'initPanelIndexes',\n    value: function initPanelIndexes(panels) {\n      // find the largest panelIndex in all the panels\n      var maxIndex = this.getMaxPanelIndex(panels);\n\n      // ensure that all panels have a panelIndex\n      panels.forEach(function (panel) {\n        if (!panel.panelIndex) {\n          panel.panelIndex = maxIndex++;\n        }\n      });\n    }\n  }, {\n    key: 'getMaxPanelIndex',\n    value: function getMaxPanelIndex(panels) {\n      var maxId = panels.reduce(function (id, panel) {\n        return Math.max(id, panel.panelIndex || id);\n      }, 0);\n      return ++maxId;\n    }\n  }]);\n\n  return PanelUtils;\n}();",null]}