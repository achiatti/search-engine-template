{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/api/utils/sorting.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/api/utils/sorting.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reverseSortDirective = exports.reverseSortDirection = exports.getFirstSortableField = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * The list of field names that are allowed for sorting, but not included in\n * index pattern fields.\n *\n * @constant\n * @type {string[]}\n */\nvar META_FIELD_NAMES = ['_seq_no', '_doc', '_uid'];\n\n/**\n * Returns a field from the intersection of the set of sortable fields in the\n * given index pattern and a given set of candidate field names.\n *\n * @param {IndexPattern} indexPattern - The index pattern to search for\n *     sortable fields\n * @param {string[]} fields - The list of candidate field names\n *\n * @returns {string[]}\n */\nfunction getFirstSortableField(indexPattern, fieldNames) {\n  var sortableFields = fieldNames.filter(function (fieldName) {\n    return META_FIELD_NAMES.includes(fieldName) || (indexPattern.fields.byName[fieldName] || { sortable: false }).sortable;\n  });\n  return sortableFields[0];\n}\n\n/**\n * A sort directive in object or string form.\n *\n * @typedef {(SortDirectiveString|SortDirectiveObject)} SortDirective\n */\n\n/**\n * A sort directive in object form.\n *\n * @typedef {Object.<FieldName, (SortDirection|SortOptions)>} SortDirectiveObject\n */\n\n/**\n * A sort order string.\n *\n * @typedef {('asc'|'desc')} SortDirection\n */\n\n/**\n * A field name.\n *\n * @typedef {string} FieldName\n */\n\n/**\n * A sort options object\n *\n * @typedef {Object} SortOptions\n * @property {SortDirection} order\n */\n\n/**\n * Return a copy of the directive with the sort direction reversed. If the\n * field name is '_score', it inverts the default sort direction in the same\n * way as Elasticsearch itself.\n *\n * @param {SortDirective} sortDirective - The directive to reverse the\n *     sort direction of\n *\n * @returns {SortDirective}\n */\nfunction reverseSortDirective(sortDirective) {\n  if (_lodash2.default.isString(sortDirective)) {\n    return _defineProperty({}, sortDirective, sortDirective === '_score' ? 'asc' : 'desc');\n  } else if (_lodash2.default.isPlainObject(sortDirective)) {\n    return _lodash2.default.mapValues(sortDirective, reverseSortDirection);\n  } else {\n    return sortDirective;\n  }\n}\n\n/**\n * Return the reversed sort direction.\n *\n * @param {(SortDirection|SortOptions)} sortDirection\n *\n * @returns {(SortDirection|SortOptions)}\n */\nfunction reverseSortDirection(sortDirection) {\n  if (_lodash2.default.isPlainObject(sortDirection)) {\n    return _lodash2.default.assign({}, sortDirection, {\n      order: reverseSortDirection(sortDirection.order)\n    });\n  } else {\n    return sortDirection === 'asc' ? 'desc' : 'asc';\n  }\n}\n\nexports.getFirstSortableField = getFirstSortableField;\nexports.reverseSortDirection = reverseSortDirection;\nexports.reverseSortDirective = reverseSortDirective;",null]}