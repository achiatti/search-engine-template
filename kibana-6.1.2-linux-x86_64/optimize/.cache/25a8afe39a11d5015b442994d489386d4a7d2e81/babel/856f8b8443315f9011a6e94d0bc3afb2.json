{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/utils/streams/map_stream.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/utils/streams/map_stream.js","mtime":1515552212863},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMapStream = createMapStream;\n\nvar _stream = require('stream');\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);var value = info.value;\n        } catch (error) {\n          reject(error);return;\n        }if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }return step(\"next\");\n    });\n  };\n}\n\nfunction createMapStream(fn) {\n  var i = 0;\n\n  return new _stream.Transform({\n    objectMode: true,\n    transform: function transform(value, enc, done) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.t0 = _this;\n                _context.next = 4;\n                return fn(value, i++);\n\n              case 4:\n                _context.t1 = _context.sent;\n\n                _context.t0.push.call(_context.t0, _context.t1);\n\n                done();\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t2 = _context['catch'](0);\n\n                done(_context.t2);\n\n              case 12:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 9]]);\n      }))();\n    }\n  });\n}",null]}