{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/field_format_editor/field_format_editor.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/field_format_editor/field_format_editor.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nrequire('ui/field_format_editor/pattern/pattern');\n\nrequire('ui/field_format_editor/samples/samples');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modules = require('ui/modules');\n\nvar _field_format_editors = require('ui/registry/field_format_editors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/management').directive('fieldFormatEditor', function (Private, $compile) {\n  var fieldFormatEditors = Private(_field_format_editors.RegistryFieldFormatEditorsProvider);\n\n  return {\n    restrict: 'A',\n    scope: {\n      getField: '&field',\n      getFormatParams: '&formatParams'\n    },\n    controllerAs: 'editor',\n    controller: function controller($scope) {\n      var self = this;\n\n      // bind the scope values to the controller, down with $scope.values\n      $scope.editor = this;\n      $scope.$bind('editor.field', 'getField()', $scope);\n      $scope.$bind('editor.formatParams', 'getFormatParams()', $scope);\n\n      /**\n      * Retrieve editor directive def object from registry and convert it into\n      * a \"pseudoDirective\". For clarity I'm reusing the directive def\n      * object api, but for simplicity not implementing the entire thing.\n      *\n      * directive def object, with support for the following opts:\n      *   - template\n      *   - compile or link\n      *   - scope (creates isolate, reads from parent scope, not attributes)\n      *   - controller\n      *   - controllerAs\n      *\n      * @param  {object} directiveDef - the directive definition object\n      * @return {undefined}\n      */\n      $scope.$watch('editor.field.format.type', function (FieldFormat) {\n        var fieldFormatEditor = FieldFormat && fieldFormatEditors.getEditor(FieldFormat.id);\n\n        if (!fieldFormatEditor) {\n          delete self.$$pseudoDirective;\n          return;\n        }\n\n        self.$$pseudoDirective = {\n          template: fieldFormatEditor.template,\n          compile: fieldFormatEditor.compile || function () {\n            return fieldFormatEditor.link;\n          },\n          scope: fieldFormatEditor.scope || false,\n          controller: fieldFormatEditor.controller,\n          controllerAs: fieldFormatEditor.controllerAs\n        };\n      });\n    },\n    link: function link($scope, $el) {\n      var scopesToTeardown = [];\n\n      function setupScope(opts) {\n        if ((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {\n          return scopesToTeardown[scopesToTeardown.push($scope.$new()) - 1];\n        }\n\n        var isolate = scopesToTeardown[scopesToTeardown.push($scope.$new(true)) - 1];\n        _lodash2.default.forOwn(opts, function (from, to) {\n          isolate.$bind(to, from, $scope);\n        });\n        return isolate;\n      }\n\n      $scope.$watch('editor.$$pseudoDirective', function (directive) {\n        $el.empty();\n        _lodash2.default.invoke(scopesToTeardown.splice(0), '$destroy');\n\n        if (!directive) return $el.hide();else $el.show();\n\n        var askedForChild = !!directive.scope;\n        var reuseScope = !askedForChild && !directive.controller;\n\n        var $formatEditor = (0, _jquery2.default)('<div>').html(directive.template);\n        var $formatEditorScope = reuseScope ? $scope : setupScope(directive.scope);\n\n        if (directive.controller) {\n          // bind the controller to the injected element\n          var cntrlAs = directive.controllerAs ? ' as ' + directive.controllerAs : '';\n          $formatEditorScope.Controller = directive.controller;\n          $formatEditor.attr('ng-controller', 'Controller' + cntrlAs);\n        }\n\n        var attrs = {};\n        var linkFns = directive.compile && directive.compile($el, attrs);\n        if (!linkFns || _lodash2.default.isFunction(linkFns)) {\n          linkFns = {\n            pre: _lodash2.default.noop,\n            post: linkFns || _lodash2.default.noop\n          };\n        }\n\n        $el.html($formatEditor);\n        linkFns.pre($formatEditorScope, $formatEditor, attrs);\n        $compile($formatEditor)($formatEditorScope);\n        linkFns.post($formatEditorScope, $formatEditor, attrs);\n      });\n    }\n  };\n});",null]}