{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/not.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/not.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\nexports.toKueryExpression = toKueryExpression;\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nvar _node_types = require('../node_types');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction buildNodeParams(child) {\n  var serializeStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'operator';\n\n  return {\n    arguments: [child],\n    serializeStyle: serializeStyle\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _node$arguments = _slicedToArray(node.arguments, 1),\n      argument = _node$arguments[0];\n\n  if (argument.type === 'literal') {\n    argument = _node_types.nodeTypes.function.buildNode('is', null, argument.value);\n  }\n\n  return {\n    bool: {\n      must_not: ast.toElasticsearchQuery(argument, indexPattern)\n    }\n  };\n}\n\nfunction toKueryExpression(node) {\n  if (node.serializeStyle !== 'operator') {\n    throw new Error('Cannot serialize \"not\" function as \"' + node.serializeStyle + '\"');\n  }\n\n  var _node$arguments2 = _slicedToArray(node.arguments, 1),\n      argument = _node$arguments2[0];\n\n  var queryString = ast.toKueryExpression(argument);\n\n  if (argument.function && (argument.function === 'and' || argument.function === 'or') && argument.serializeStyle !== 'function') {\n    return '!(' + queryString + ')';\n  } else {\n    return '!' + queryString;\n  }\n}",null]}