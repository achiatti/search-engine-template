{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('plugins/metric_vis/metric_vis.less');\n\nrequire('plugins/metric_vis/metric_vis_params');\n\nrequire('plugins/metric_vis/metric_vis_controller');\n\nvar _vis_factory = require('ui/vis/vis_factory');\n\nvar _vis_category = require('ui/vis/vis_category');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _metric_vis = require('plugins/metric_vis/metric_vis.html');\n\nvar _metric_vis2 = _interopRequireDefault(_metric_vis);\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _colormaps = require('ui/vislib/components/color/colormaps');\n\nvar _icon_number = require('./images/icon_number.svg');\n\nvar _icon_number2 = _interopRequireDefault(_icon_number);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// we need to load the css ourselves\n\n// we also need to load the controller and used by the template\n\n// register the provider with the visTypes registry\n_vis_types.VisTypesRegistryProvider.register(MetricVisProvider);\n\nfunction MetricVisProvider(Private) {\n  var Schemas = Private(_schemas.VisSchemasProvider);\n  var VisFactory = Private(_vis_factory.VisFactoryProvider);\n\n  // return the visType object, which kibana will use to display and configure new\n  // Vis object of this type.\n  return VisFactory.createAngularVisualization({\n    name: 'metric',\n    title: 'Metric',\n    image: _icon_number2.default,\n    description: 'Display a calculation as a single number',\n    category: _vis_category.CATEGORY.DATA,\n    visConfig: {\n      defaults: {\n        addTooltip: true,\n        addLegend: false,\n        type: 'metric',\n        metric: {\n          percentageMode: false,\n          useRanges: false,\n          colorSchema: 'Green to Red',\n          metricColorMode: 'None',\n          colorsRange: [{ from: 0, to: 10000 }],\n          labels: {\n            show: true\n          },\n          invertColors: false,\n          style: {\n            bgFill: '#000',\n            bgColor: false,\n            labelColor: false,\n            subText: '',\n            fontSize: 60\n          }\n        }\n      },\n      template: _metric_vis2.default\n    },\n    editorConfig: {\n      collections: {\n        metricColorMode: ['None', 'Labels', 'Background'],\n        colorSchemas: Object.keys(_colormaps.vislibColorMaps)\n      },\n      optionsTemplate: '<metric-vis-params></metric-vis-params>',\n      schemas: new Schemas([{\n        group: 'metrics',\n        name: 'metric',\n        title: 'Metric',\n        min: 1,\n        aggFilter: ['!std_dev', '!geo_centroid', '!percentiles', '!percentile_ranks', '!derivative', '!serial_diff', '!moving_avg', '!cumulative_sum', '!geo_bounds'],\n        defaults: [{ type: 'count', schema: 'metric' }]\n      }, {\n        group: 'buckets',\n        name: 'group',\n        title: 'Split Group',\n        min: 0,\n        max: 1,\n        aggFilter: ['!geohash_grid', '!filter']\n      }])\n    },\n    implementsRenderComplete: true\n  });\n}\n\n// export the provider so that the visType can be required with Private()\nexports.default = MetricVisProvider;\nmodule.exports = exports['default'];",null]}