{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/area_chart.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/area_chart.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibVisualizationsAreaChartProvider = VislibVisualizationsAreaChartProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _point_series = require('./_point_series');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibVisualizationsAreaChartProvider(Private) {\n\n  var PointSeries = Private(_point_series.VislibVisualizationsPointSeriesProvider);\n\n  var defaults = {\n    mode: 'normal',\n    showCircles: true,\n    radiusRatio: 9,\n    showLines: true,\n    interpolate: 'linear',\n    color: undefined,\n    fillColor: undefined\n  };\n  /**\n   * Area chart visualization\n   *\n   * @class AreaChart\n   * @constructor\n   * @extends Chart\n   * @param handler {Object} Reference to the Handler Class Constructor\n   * @param el {HTMLElement} HTML element to which the chart will be appended\n   * @param chartData {Object} Elasticsearch query results for this specific\n   * chart\n   */\n\n  var AreaChart = function (_PointSeries) {\n    _inherits(AreaChart, _PointSeries);\n\n    function AreaChart(handler, chartEl, chartData, seriesConfigArgs) {\n      _classCallCheck(this, AreaChart);\n\n      var _this = _possibleConstructorReturn(this, (AreaChart.__proto__ || Object.getPrototypeOf(AreaChart)).call(this, handler, chartEl, chartData, seriesConfigArgs));\n\n      _this.seriesConfig = _lodash2.default.defaults(seriesConfigArgs || {}, defaults);\n      _this.isOverlapping = _this.seriesConfig.mode !== 'stacked';\n      if (_this.isOverlapping) {\n\n        // Default opacity should return to 0.6 on mouseout\n        var defaultOpacity = 0.6;\n        _this.seriesConfig.defaultOpacity = defaultOpacity;\n        handler.highlight = function (element) {\n          var label = this.getAttribute('data-label');\n          if (!label) return;\n\n          var highlightOpacity = 0.8;\n          var highlightElements = (0, _jquery2.default)('[data-label]', element.parentNode).filter(function (els, el) {\n            return '' + (0, _jquery2.default)(el).data('label') === label;\n          });\n          (0, _jquery2.default)('[data-label]', element.parentNode).not(highlightElements).css('opacity', defaultOpacity / 2); // half of the default opacity\n          highlightElements.css('opacity', highlightOpacity);\n        };\n        handler.unHighlight = function (element) {\n          (0, _jquery2.default)('[data-label]', element).css('opacity', defaultOpacity);\n\n          //The legend should keep max opacity\n          (0, _jquery2.default)('[data-label]', (0, _jquery2.default)(element).siblings()).css('opacity', 1);\n        };\n      }\n\n      return _this;\n    }\n\n    _createClass(AreaChart, [{\n      key: 'addPath',\n      value: function addPath(svg, data) {\n        var ordered = this.handler.data.get('ordered');\n        var isTimeSeries = ordered && ordered.date;\n        var isOverlapping = this.isOverlapping;\n        var color = this.handler.data.getColorFunc();\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var interpolate = this.seriesConfig.interpolate;\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n\n        // Data layers\n        var layer = svg.append('g').attr('class', function (d, i) {\n          return 'series series-' + i;\n        });\n\n        // Append path\n        var path = layer.append('path').attr('data-label', data.label).style('fill', function () {\n          return color(data.label);\n        }).style('stroke', function () {\n          return color(data.label);\n        }).classed('overlap_area', function () {\n          return isOverlapping;\n        }).attr('clip-path', 'url(#' + this.baseChart.clipPathId + ')');\n\n        function x(d) {\n          if (isTimeSeries) {\n            return xScale(d.x);\n          }\n          return xScale(d.x) + xScale.rangeBand() / 2;\n        }\n\n        function y1(d) {\n          var y0 = d.y0 || 0;\n          var y = d.y || 0;\n          return yScale(y0 + y);\n        }\n\n        function y0(d) {\n          var y0 = d.y0 || 0;\n          return yScale(y0);\n        }\n\n        function getArea() {\n          if (isHorizontal) {\n            return _d2.default.svg.area().x(x).y0(y0).y1(y1);\n          } else {\n            return _d2.default.svg.area().y(x).x0(y0).x1(y1);\n          }\n        }\n\n        // update\n        path.attr('d', function () {\n          var area = getArea().defined(function (d) {\n            return !_lodash2.default.isNull(d.y);\n          }).interpolate(interpolate);\n          return area(data.values.filter(function (d) {\n            return !_lodash2.default.isNull(d.y);\n          }));\n        }).style('stroke-width', '1px');\n\n        return path;\n      }\n\n      /**\n       * Adds SVG circles to area chart\n       *\n       * @method addCircles\n       * @param svg {HTMLElement} SVG to which circles are appended\n       * @param data {Array} Chart data array\n       * @returns {D3.UpdateSelection} SVG with circles added\n       */\n\n    }, {\n      key: 'addCircles',\n      value: function addCircles(svg, data) {\n        var color = this.handler.data.getColorFunc();\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var ordered = this.handler.data.get('ordered');\n        var circleRadius = 12;\n        var circleStrokeWidth = 0;\n        var tooltip = this.baseChart.tooltip;\n        var isTooltip = this.handler.visConfig.get('tooltip.show');\n        var isOverlapping = this.isOverlapping;\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n\n        var layer = svg.append('g').attr('class', 'points area').attr('clip-path', 'url(#' + this.baseChart.clipPathId + ')');\n\n        // append the circles\n        var circles = layer.selectAll('circles').data(function appendData() {\n          return data.values.filter(function isZeroOrNull(d) {\n            return d.y !== 0 && !_lodash2.default.isNull(d.y);\n          });\n        });\n\n        // exit\n        circles.exit().remove();\n\n        // enter\n        circles.enter().append('circle').attr('data-label', data.label).attr('stroke', function () {\n          return color(data.label);\n        }).attr('fill', 'transparent').attr('stroke-width', circleStrokeWidth);\n\n        function cx(d) {\n          if (ordered && ordered.date) {\n            return xScale(d.x);\n          }\n          return xScale(d.x) + xScale.rangeBand() / 2;\n        }\n\n        function cy(d) {\n          var y = d.y || 0;\n          if (isOverlapping) {\n            return yScale(y);\n          }\n          return yScale(d.y0 + y);\n        }\n\n        // update\n        circles.attr('cx', isHorizontal ? cx : cy).attr('cy', isHorizontal ? cy : cx).attr('r', circleRadius);\n\n        // Add tooltip\n        if (isTooltip) {\n          circles.call(tooltip.render());\n        }\n\n        return circles;\n      }\n    }, {\n      key: 'addPathEvents',\n      value: function addPathEvents(path) {\n        var events = this.events;\n        if (this.handler.visConfig.get('enableHover')) {\n          var hover = events.addHoverEvent();\n          var mouseout = events.addMouseoutEvent();\n          path.call(hover).call(mouseout);\n        }\n      }\n\n      /**\n       * Renders d3 visualization\n       *\n       * @method draw\n       * @returns {Function} Creates the area chart\n       */\n\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n\n        return function (selection) {\n          selection.each(function () {\n            var svg = self.chartEl.append('g');\n            svg.data([self.chartData]);\n\n            var path = self.addPath(svg, self.chartData);\n            self.addPathEvents(path);\n            var circles = self.addCircles(svg, self.chartData);\n            self.addCircleEvents(circles);\n\n            self.events.emit('rendered', {\n              chart: self.chartData\n            });\n\n            return svg;\n          });\n        };\n      }\n    }]);\n\n    return AreaChart;\n  }(PointSeries);\n\n  return AreaChart;\n}",null]}