{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/line_chart.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/line_chart.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibVisualizationsLineChartProvider = VislibVisualizationsLineChartProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _point_series = require('./_point_series');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibVisualizationsLineChartProvider(Private) {\n\n  var PointSeries = Private(_point_series.VislibVisualizationsPointSeriesProvider);\n\n  var defaults = {\n    mode: 'normal',\n    showCircles: true,\n    radiusRatio: 9,\n    showLines: true,\n    interpolate: 'linear',\n    lineWidth: 2,\n    color: undefined,\n    fillColor: undefined\n  };\n  /**\n   * Line Chart Visualization\n   *\n   * @class LineChart\n   * @constructor\n   * @extends Chart\n   * @param handler {Object} Reference to the Handler Class Constructor\n   * @param el {HTMLElement} HTML element to which the chart will be appended\n   * @param chartData {Object} Elasticsearch query results for this specific chart\n   */\n\n  var LineChart = function (_PointSeries) {\n    _inherits(LineChart, _PointSeries);\n\n    function LineChart(handler, chartEl, chartData, seriesConfigArgs) {\n      _classCallCheck(this, LineChart);\n\n      var _this = _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, handler, chartEl, chartData, seriesConfigArgs));\n\n      _this.seriesConfig = _lodash2.default.defaults(seriesConfigArgs || {}, defaults);\n      return _this;\n    }\n\n    _createClass(LineChart, [{\n      key: 'addCircles',\n      value: function addCircles(svg, data) {\n        var self = this;\n        var showCircles = this.seriesConfig.showCircles;\n        var color = this.handler.data.getColorFunc();\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var ordered = this.handler.data.get('ordered');\n        var tooltip = this.baseChart.tooltip;\n        var isTooltip = this.handler.visConfig.get('tooltip.show');\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n        var lineWidth = this.seriesConfig.lineWidth;\n\n        var radii = this.baseChart.radii;\n\n        var radiusStep = (radii.max - radii.min || radii.max * 100) / Math.pow(this.seriesConfig.radiusRatio, 2);\n\n        var layer = svg.append('g').attr('class', 'points line').attr('clip-path', 'url(#' + this.baseChart.clipPathId + ')');\n\n        var circles = layer.selectAll('circle').data(function appendData() {\n          return data.values.filter(function (d) {\n            return !_lodash2.default.isNull(d.y);\n          });\n        });\n\n        circles.exit().remove();\n\n        function cx(d) {\n          if (ordered && ordered.date) {\n            return xScale(d.x);\n          }\n          return xScale(d.x) + xScale.rangeBand() / 2;\n        }\n\n        function cy(d) {\n          var y0 = d.y0 || 0;\n          var y = d.y || 0;\n          return yScale(y0 + y);\n        }\n\n        function cColor(d) {\n          return color(d.series);\n        }\n\n        function colorCircle(d) {\n          var parent = _d2.default.select(this).node().parentNode;\n          var lengthOfParent = _d2.default.select(parent).data()[0].length;\n          var isVisible = lengthOfParent === 1;\n\n          // If only 1 point exists, show circle\n          if (!showCircles && !isVisible) return 'none';\n          return cColor(d);\n        }\n\n        function getCircleRadiusFn(modifier) {\n          return function getCircleRadius(d) {\n            var width = self.baseChart.chartConfig.width;\n            var height = self.baseChart.chartConfig.height;\n            var circleRadius = (d.z - radii.min) / radiusStep;\n            var baseMagicNumber = 2;\n\n            var base = circleRadius ? Math.sqrt(circleRadius + baseMagicNumber) + lineWidth : lineWidth;\n            return _lodash2.default.min([base, width, height]) + (modifier || 0);\n          };\n        }\n\n        circles.enter().append('circle').attr('r', getCircleRadiusFn()).attr('fill-opacity', this.seriesConfig.drawLinesBetweenPoints ? 1 : 0.7).attr('cx', isHorizontal ? cx : cy).attr('cy', isHorizontal ? cy : cx).attr('class', 'circle-decoration').attr('data-label', data.label).attr('fill', colorCircle);\n\n        circles.enter().append('circle').attr('r', getCircleRadiusFn(10)).attr('cx', isHorizontal ? cx : cy).attr('cy', isHorizontal ? cy : cx).attr('fill', 'transparent').attr('class', 'circle').attr('data-label', data.label).attr('stroke', cColor).attr('stroke-width', 0);\n\n        if (isTooltip) {\n          circles.call(tooltip.render());\n        }\n\n        return circles;\n      }\n\n      /**\n       * Adds path to SVG\n       *\n       * @method addLines\n       * @param svg {HTMLElement} SVG to which path are appended\n       * @param data {Array} Array of object data points\n       * @returns {D3.UpdateSelection} SVG with paths added\n       */\n\n    }, {\n      key: 'addLine',\n      value: function addLine(svg, data) {\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var color = this.handler.data.getColorFunc();\n        var ordered = this.handler.data.get('ordered');\n        var lineWidth = this.seriesConfig.lineWidth;\n        var interpolate = this.seriesConfig.interpolate;\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n\n        var line = svg.append('g').attr('class', 'pathgroup lines').attr('clip-path', 'url(#' + this.baseChart.clipPathId + ')');\n\n        function cx(d) {\n          if (ordered && ordered.date) {\n            return xScale(d.x);\n          }\n          return xScale(d.x) + xScale.rangeBand() / 2;\n        }\n\n        function cy(d) {\n          var y = d.y || 0;\n          var y0 = d.y0 || 0;\n          return yScale(y0 + y);\n        }\n\n        line.append('path').attr('data-label', data.label).attr('d', function () {\n          var d3Line = _d2.default.svg.line().defined(function (d) {\n            return !_lodash2.default.isNull(d.y);\n          }).interpolate(interpolate).x(isHorizontal ? cx : cy).y(isHorizontal ? cy : cx);\n          return d3Line(data.values.filter(function (d) {\n            return !_lodash2.default.isNull(d.y);\n          }));\n        }).attr('fill', 'none').attr('stroke', function () {\n          return color(data.label);\n        }).attr('stroke-width', lineWidth);\n\n        return line;\n      }\n\n      /**\n       * Renders d3 visualization\n       *\n       * @method draw\n       * @returns {Function} Creates the line chart\n       */\n\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n\n        return function (selection) {\n          selection.each(function () {\n\n            var svg = self.chartEl.append('g');\n            svg.data([self.chartData]);\n\n            if (self.seriesConfig.drawLinesBetweenPoints) {\n              self.addLine(svg, self.chartData);\n            }\n            var circles = self.addCircles(svg, self.chartData);\n            self.addCircleEvents(circles);\n\n            self.events.emit('rendered', {\n              chart: self.chartData\n            });\n\n            return svg;\n          });\n        };\n      }\n    }]);\n\n    return LineChart;\n  }(PointSeries);\n\n  return LineChart;\n}",null]}