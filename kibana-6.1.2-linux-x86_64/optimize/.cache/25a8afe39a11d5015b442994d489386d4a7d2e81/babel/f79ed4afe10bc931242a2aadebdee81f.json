{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/watch_multi/watch_multi.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/watch_multi/watch_multi.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').config(function ($provide) {\n\n  $provide.decorator('$rootScope', function ($delegate) {\n    /**\n     * Watch multiple expressions with a single callback. Along\n     * with making code simpler it also merges all of the watcher\n     * handlers within a single tick.\n     *\n     * # expression format\n     * expressions can be specified in one of the following ways:\n     * 1. string that evaluates to a value on scope. Creates a regular $watch\n     *    expression.\n     *     'someScopeValue.prop' === $scope.$watch('someScopeValue.prop', fn);\n     *\n     * 2. #1 prefixed with '[]', which uses $watchCollection rather than $watch.\n     *     '[]expr' === $scope.$watchCollection('expr', fn);\n     *\n     * 3. #1 prefixed with '=', which uses $watch with objectEquality turned on\n     *     '=expr' === $scope.$watch('expr', fn, true);\n     *\n     * 4. a function that will be called, like a normal function water\n     *\n     * 5. an object with any of the properties:\n     *   `get`: the getter called on each iteration\n     *   `deep`: a flag to turn on objectEquality in $watch\n     *   `fn`: the watch registration function ($scope.$watch or $scope.$watchCollection)\n     *\n     * @param  {array[string|function|obj]} expressions - the list of expressions to $watch\n     * @param  {Function} fn - the callback function\n     * @return {Function} - an unwatch function, just like the return value of $watch\n     */\n    $delegate.constructor.prototype.$watchMulti = function (expressions, fn) {\n      if (!Array.isArray(expressions)) throw new TypeError('expected an array of expressions to watch');\n      if (!_lodash2.default.isFunction(fn)) throw new TypeError('expected a function that is triggered on each watch');\n\n      var $scope = this;\n      var vals = new Array(expressions.length);\n      var prev = new Array(expressions.length);\n      var fire = false;\n      var init = 0;\n      var neededInits = expressions.length;\n\n      // first, register all of the multi-watchers\n      var unwatchers = expressions.map(function (expr, i) {\n        expr = normalizeExpression($scope, expr);\n        if (!expr) return;\n\n        return expr.fn.call($scope, expr.get, function (newVal, oldVal) {\n          if (newVal === oldVal) {\n            init += 1;\n          }\n\n          vals[i] = newVal;\n          prev[i] = oldVal;\n          fire = true;\n        }, expr.deep);\n      });\n\n      // then, the watcher that checks to see if any of\n      // the other watchers triggered this cycle\n      var flip = false;\n      unwatchers.push($scope.$watch(function () {\n        if (init < neededInits) return init;\n\n        if (fire) {\n          fire = false;\n          flip = !flip;\n        }\n        return flip;\n      }, function () {\n        if (init < neededInits) return false;\n\n        fn(vals.slice(0), prev.slice(0));\n        vals.forEach(function (v, i) {\n          prev[i] = v;\n        });\n      }));\n\n      return _lodash2.default.partial(_lodash2.default.callEach, unwatchers);\n    };\n\n    function normalizeExpression($scope, expr) {\n      if (!expr) return;\n      var norm = {\n        fn: $scope.$watch,\n        deep: false\n      };\n\n      if (_lodash2.default.isFunction(expr)) return _lodash2.default.assign(norm, { get: expr });\n      if (_lodash2.default.isObject(expr)) return _lodash2.default.assign(norm, expr);\n      if (!_lodash2.default.isString(expr)) return;\n\n      if (expr.substr(0, 2) === '[]') {\n        return _lodash2.default.assign(norm, {\n          fn: $scope.$watchCollection,\n          get: expr.substr(2)\n        });\n      }\n\n      if (expr.charAt(0) === '=') {\n        return _lodash2.default.assign(norm, {\n          deep: true,\n          get: expr.substr(1)\n        });\n      }\n\n      return _lodash2.default.assign(norm, { get: expr });\n    }\n\n    return $delegate;\n  });\n});",null]}