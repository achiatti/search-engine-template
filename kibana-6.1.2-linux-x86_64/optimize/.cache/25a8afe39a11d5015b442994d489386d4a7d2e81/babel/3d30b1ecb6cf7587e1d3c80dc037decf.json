{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/vis_types/timeseries/config.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/vis_types/timeseries/config.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactSelect = require('react-select');\n\nvar _reactSelect2 = _interopRequireDefault(_reactSelect);\n\nvar _data_format_picker = require('../../data_format_picker');\n\nvar _data_format_picker2 = _interopRequireDefault(_data_format_picker);\n\nvar _create_select_handler = require('../../lib/create_select_handler');\n\nvar _create_select_handler2 = _interopRequireDefault(_create_select_handler);\n\nvar _yes_no = require('../../yes_no');\n\nvar _yes_no2 = _interopRequireDefault(_yes_no);\n\nvar _create_text_handler = require('../../lib/create_text_handler');\n\nvar _create_text_handler2 = _interopRequireDefault(_create_text_handler);\n\nvar _index_pattern = require('../../index_pattern');\n\nvar _services = require('ui_framework/services');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction TimeseriesConfig(props) {\n  var handleSelectChange = (0, _create_select_handler2.default)(props.onChange);\n  var handleTextChange = (0, _create_text_handler2.default)(props.onChange);\n\n  var defaults = {\n    fill: '',\n    line_width: '',\n    point_size: '',\n    value_template: '{{value}}',\n    offset_time: '',\n    split_color_mode: 'gradient',\n    axis_min: '',\n    axis_max: '',\n    stacked: 'none',\n    steps: 0\n  };\n  var model = _extends({}, defaults, props.model);\n  var htmlId = (0, _services.htmlIdGenerator)();\n\n  var stackedOptions = [{ label: 'None', value: 'none' }, { label: 'Stacked', value: 'stacked' }, { label: 'Percent', value: 'percent' }];\n\n  var positionOptions = [{ label: 'Right', value: 'right' }, { label: 'Left', value: 'left' }];\n\n  var chartTypeOptions = [{ label: 'Bar', value: 'bar' }, { label: 'Line', value: 'line' }];\n\n  var splitColorOptions = [{ label: 'Gradient', value: 'gradient' }, { label: 'Rainbow', value: 'rainbow' }];\n\n  var type = void 0;\n  if (model.chart_type === 'line') {\n    type = _react2.default.createElement(\n      'div',\n      { className: 'vis_editor__series_config-row' },\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('chartType') },\n        'Chart Type'\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__item' },\n        _react2.default.createElement(_reactSelect2.default, {\n          inputProps: { id: htmlId('chartType') },\n          clearable: false,\n          options: chartTypeOptions,\n          value: model.chart_type,\n          onChange: handleSelectChange('chart_type')\n        })\n      ),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('stacked') },\n        'Stacked'\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__item' },\n        _react2.default.createElement(_reactSelect2.default, {\n          inputProps: { id: htmlId('stacked') },\n          clearable: false,\n          options: stackedOptions,\n          value: model.stacked,\n          onChange: handleSelectChange('stacked')\n        })\n      ),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('fill') },\n        'Fill (0 to 1)'\n      ),\n      _react2.default.createElement('input', {\n        id: htmlId('fill'),\n        className: 'vis_editor__input-grows',\n        type: 'number',\n        step: '0.1',\n        onChange: handleTextChange('fill'),\n        value: model.fill\n      }),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('lineWidth') },\n        'Line Width'\n      ),\n      _react2.default.createElement('input', {\n        id: htmlId('lineWidth'),\n        className: 'vis_editor__input-grows',\n        type: 'number',\n        onChange: handleTextChange('line_width'),\n        value: model.line_width\n      }),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('pointSize') },\n        'Point Size'\n      ),\n      _react2.default.createElement('input', {\n        id: htmlId('pointSize'),\n        className: 'vis_editor__input-grows',\n        type: 'number',\n        onChange: handleTextChange('point_size'),\n        value: model.point_size\n      }),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__label' },\n        'Steps'\n      ),\n      _react2.default.createElement(_yes_no2.default, {\n        value: model.steps,\n        name: 'steps',\n        onChange: props.onChange\n      })\n    );\n  }\n  if (model.chart_type === 'bar') {\n    type = _react2.default.createElement(\n      'div',\n      { className: 'vis_editor__series_config-row' },\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('chartType') },\n        'Chart Type'\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__item' },\n        _react2.default.createElement(_reactSelect2.default, {\n          inputProps: { id: htmlId('chartType') },\n          clearable: false,\n          options: chartTypeOptions,\n          value: model.chart_type,\n          onChange: handleSelectChange('chart_type')\n        })\n      ),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('stacked') },\n        'Stacked'\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__item' },\n        _react2.default.createElement(_reactSelect2.default, {\n          inputProps: { id: htmlId('stacked') },\n          clearable: false,\n          options: stackedOptions,\n          value: model.stacked,\n          onChange: handleSelectChange('stacked')\n        })\n      ),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('fill') },\n        'Fill (0 to 1)'\n      ),\n      _react2.default.createElement('input', {\n        id: htmlId('fill'),\n        className: 'vis_editor__input-grows',\n        type: 'number',\n        step: '0.5',\n        onChange: handleTextChange('fill'),\n        value: model.fill\n      }),\n      _react2.default.createElement(\n        'label',\n        { className: 'vis_editor__label', htmlFor: htmlId('lineWidth') },\n        'Line Width'\n      ),\n      _react2.default.createElement('input', {\n        id: htmlId('lineWidth'),\n        className: 'vis_editor__input-grows',\n        type: 'number',\n        onChange: handleTextChange('line_width'),\n        value: model.line_width\n      })\n    );\n  }\n\n  var disableSeperateYaxis = model.seperate_axis ? false : true;\n\n  return _react2.default.createElement(\n    'div',\n    null,\n    _react2.default.createElement(\n      'div',\n      { className: 'vis_editor__series_config-container' },\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__series_config-row' },\n        _react2.default.createElement(_data_format_picker2.default, {\n          onChange: handleSelectChange('formatter'),\n          value: model.formatter\n        }),\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('template') },\n          'Template (eg.',\n          _react2.default.createElement(\n            'code',\n            null,\n            '{{value}}/s'\n          ),\n          ')'\n        ),\n        _react2.default.createElement('input', {\n          id: htmlId('template'),\n          className: 'vis_editor__input-grows',\n          onChange: handleTextChange('value_template'),\n          value: model.value_template\n        })\n      ),\n      type,\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__series_config-row' },\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('offset') },\n          'Offset series time by (1m, 1h, 1w, 1d)'\n        ),\n        _react2.default.createElement('input', {\n          id: htmlId('offset'),\n          className: 'vis_editor__input-grows',\n          type: 'text',\n          onChange: handleTextChange('offset_time'),\n          value: model.offset_time\n        }),\n        _react2.default.createElement(\n          'div',\n          { className: 'vis_editor__label' },\n          'Hide in Legend'\n        ),\n        _react2.default.createElement(_yes_no2.default, {\n          value: model.hide_in_legend,\n          name: 'hide_in_legend',\n          onChange: props.onChange\n        }),\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('splitColor') },\n          'Split Color Theme'\n        ),\n        _react2.default.createElement(\n          'div',\n          { className: 'vis_editor__row_item' },\n          _react2.default.createElement(_reactSelect2.default, {\n            inputProps: { id: htmlId('splitColor') },\n            clearable: false,\n            options: splitColorOptions,\n            value: model.split_color_mode,\n            onChange: handleSelectChange('split_color_mode')\n          })\n        )\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__series_config-row' },\n        _react2.default.createElement(\n          'div',\n          { className: 'vis_editor__label' },\n          'Separate Axis'\n        ),\n        _react2.default.createElement(_yes_no2.default, {\n          value: model.seperate_axis,\n          name: 'seperate_axis',\n          onChange: props.onChange\n        }),\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('axisMin') },\n          'Axis Min'\n        ),\n        _react2.default.createElement('input', {\n          id: htmlId('axisMin'),\n          className: 'vis_editor__input-grows',\n          type: 'number',\n          disabled: disableSeperateYaxis,\n          onChange: handleTextChange('axis_min'),\n          value: model.axis_min\n        }),\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('axisMax') },\n          'Axis Max'\n        ),\n        _react2.default.createElement('input', {\n          id: htmlId('axisMax'),\n          className: 'vis_editor__input-grows',\n          type: 'number',\n          disabled: disableSeperateYaxis,\n          onChange: handleTextChange('axis_max'),\n          value: model.axis_max\n        }),\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('axisPos') },\n          'Axis Position'\n        ),\n        _react2.default.createElement(\n          'div',\n          { className: 'vis_editor__row_item' },\n          _react2.default.createElement(_reactSelect2.default, {\n            inputProps: { id: htmlId('axisPos') },\n            clearable: false,\n            disabled: disableSeperateYaxis,\n            options: positionOptions,\n            value: model.axis_position,\n            onChange: handleSelectChange('axis_position')\n          })\n        )\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__series_config-row' },\n        _react2.default.createElement(\n          'div',\n          { className: 'vis_editor__label' },\n          'Override Index Pattern'\n        ),\n        _react2.default.createElement(_yes_no2.default, {\n          value: model.override_index_pattern,\n          name: 'override_index_pattern',\n          onChange: props.onChange\n        }),\n        _react2.default.createElement(_index_pattern.IndexPattern, _extends({}, props, {\n          prefix: 'series_',\n          className: 'vis_editor__row_item vis_editor__row',\n          disabled: !model.override_index_pattern,\n          'with-interval': true\n        }))\n      ),\n      _react2.default.createElement(\n        'div',\n        { className: 'vis_editor__series_config-row' },\n        _react2.default.createElement(\n          'label',\n          { className: 'vis_editor__label', htmlFor: htmlId('series_filter') },\n          'Filter'\n        ),\n        _react2.default.createElement('input', {\n          id: htmlId('series_filter'),\n          className: 'vis_editor__input-grows',\n          type: 'text',\n          onChange: handleTextChange('filter'),\n          value: model.filter\n        })\n      )\n    )\n  );\n}\n\nTimeseriesConfig.propTypes = {\n  fields: _propTypes2.default.object,\n  model: _propTypes2.default.object,\n  onChange: _propTypes2.default.func\n};\n\nexports.default = TimeseriesConfig;\nmodule.exports = exports['default'];",null]}