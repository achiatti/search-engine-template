{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/kb/api.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/kb/api.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _ = require('lodash');\nvar url_pattern_matcher = require('../autocomplete/url_pattern_matcher');\nvar url_params = require('../autocomplete/url_params');\nvar body_completer = require('../autocomplete/body_completer');\n\n/**\n *\n * @param urlParametrizedComponentFactories a dictionary of factory functions\n * that will be used as fallback for parametrized path part (i.e., {indices} )\n * see url_pattern_matcher.UrlPatternMatcher\n * @constructor\n * @param bodyParametrizedComponentFactories same as urlParametrizedComponentFactories but used for body compilation\n */\nfunction Api(urlParametrizedComponentFactories, bodyParametrizedComponentFactories) {\n  this.globalRules = {};\n  this.endpoints = {};\n  this.urlPatternMatcher = new url_pattern_matcher.UrlPatternMatcher(urlParametrizedComponentFactories);\n  this.globalBodyComponentFactories = bodyParametrizedComponentFactories;\n  this.name = \"\";\n}\n\n(function (cls) {\n  cls.addGlobalAutocompleteRules = function (parentNode, rules) {\n    this.globalRules[parentNode] = body_completer.compileBodyDescription(\"GLOBAL.\" + parentNode, rules, this.globalBodyComponentFactories);\n  };\n\n  cls.getGlobalAutocompleteComponents = function (term, throwOnMissing) {\n    var result = this.globalRules[term];\n    if (_.isUndefined(result) && (throwOnMissing || _.isUndefined(throwOnMissing))) {\n      throw new Error(\"failed to resolve global components for  ['\" + term + \"']\");\n    }\n    return result;\n  };\n\n  cls.addEndpointDescription = function (endpoint, description) {\n\n    var copiedDescription = {};\n    _.extend(copiedDescription, description || {});\n    _.defaults(copiedDescription, {\n      id: endpoint,\n      patterns: [endpoint],\n      methods: ['GET']\n    });\n    _.each(copiedDescription.patterns, function (p) {\n      this.urlPatternMatcher.addEndpoint(p, copiedDescription);\n    }, this);\n\n    copiedDescription.paramsAutocomplete = new url_params.UrlParams(copiedDescription.url_params);\n    copiedDescription.bodyAutocompleteRootComponents = body_completer.compileBodyDescription(copiedDescription.id, copiedDescription.data_autocomplete_rules, this.globalBodyComponentFactories);\n\n    this.endpoints[endpoint] = copiedDescription;\n  };\n\n  cls.getEndpointDescriptionByEndpoint = function (endpoint) {\n    return this.endpoints[endpoint];\n  };\n\n  cls.getTopLevelUrlCompleteComponents = function () {\n    return this.urlPatternMatcher.getTopLevelComponents();\n  };\n\n  cls.getUnmatchedEndpointComponents = function () {\n    return body_completer.globalsOnlyAutocompleteComponents();\n  };\n\n  cls.clear = function () {\n    this.endpoints = {};\n    this.globalRules = {};\n  };\n})(Api.prototype);\n\nexports.default = Api;\nmodule.exports = exports['default'];",null]}