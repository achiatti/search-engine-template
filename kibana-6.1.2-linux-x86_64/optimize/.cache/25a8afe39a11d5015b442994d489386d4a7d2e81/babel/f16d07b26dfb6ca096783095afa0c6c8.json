{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/notify/notify.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/notify/notify.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notify = undefined;\n\nvar _modules = require('ui/modules');\n\nvar _notifier = require('ui/notify/notifier');\n\nrequire('ui/notify/directives');\n\nvar _metadata = require('ui/metadata');\n\nvar _module = _modules.uiModules.get('kibana/notify');\nvar notify = exports.notify = new _notifier.Notifier();\n\n_module.factory('createNotifier', function () {\n  return function (opts) {\n    return new _notifier.Notifier(opts);\n  };\n});\n\n_module.factory('Notifier', function () {\n  return _notifier.Notifier;\n});\n\n// teach Notifier how to use angular interval services\n_module.run(function (config, $interval, $compile) {\n  _notifier.Notifier.applyConfig({\n    setInterval: $interval,\n    clearInterval: $interval.cancel\n  });\n  applyConfig(config);\n  _notifier.Notifier.$compile = $compile;\n});\n\n// if kibana is not included then the notify service can't\n// expect access to config (since it's dependent on kibana)\nif (!!_metadata.metadata.kbnIndex) {\n  require('ui/config');\n  _module.run(function (config) {\n    config.watchAll(function () {\n      return applyConfig(config);\n    });\n  });\n}\n\nfunction applyConfig(config) {\n  _notifier.Notifier.applyConfig({\n    bannerLifetime: config.get('notifications:lifetime:banner'),\n    errorLifetime: config.get('notifications:lifetime:error'),\n    warningLifetime: config.get('notifications:lifetime:warning'),\n    infoLifetime: config.get('notifications:lifetime:info')\n  });\n  notify.banner(config.get('notifications:banner'));\n}\n\nwindow.onerror = function (err, url, line) {\n  notify.fatal(new Error(err + ' (' + url + ':' + line + ')'));\n  return true;\n};\n\nif (window.addEventListener) {\n  var notifier = new _notifier.Notifier({\n    location: 'Promise'\n  });\n\n  window.addEventListener('unhandledrejection', function (e) {\n    notifier.log('Detected an unhandled Promise rejection.\\n' + e.reason);\n  });\n}",null]}