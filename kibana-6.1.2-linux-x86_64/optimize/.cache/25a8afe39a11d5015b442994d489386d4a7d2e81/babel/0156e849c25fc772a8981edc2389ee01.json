{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis_config.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis_config.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibLibAxisConfigProvider = VislibLibAxisConfigProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _scale_modes = require('./scale_modes');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VislibLibAxisConfigProvider() {\n\n  var defaults = {\n    show: true,\n    type: 'value',\n    elSelector: '.axis-wrapper-{pos} .axis-div',\n    position: 'left',\n    scale: {\n      type: 'linear',\n      expandLastBucket: true,\n      inverted: false,\n      setYExtents: null,\n      defaultYExtents: null,\n      min: null,\n      max: null,\n      mode: _scale_modes.SCALE_MODES.NORMAL\n    },\n    style: {\n      color: '#ddd',\n      lineWidth: '1px',\n      opacity: 1,\n      tickColor: '#ddd',\n      tickWidth: '1px',\n      tickLength: '6px',\n      rangePadding: 0.1,\n      rangeOuterPadding: 0\n    },\n    labels: {\n      axisFormatter: null,\n      show: true,\n      rotate: 0,\n      rotateAnchor: 'center',\n      filter: false,\n      color: '#ddd',\n      font: '\"Open Sans\", \"Lato\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontSize: '8pt',\n      truncate: 100\n    },\n    title: {\n      text: '',\n      elSelector: '.axis-wrapper-{pos} .axis-div'\n    }\n  };\n\n  var categoryDefaults = {\n    type: 'category',\n    position: 'bottom'\n  };\n\n  var valueDefaults = {\n    labels: {\n      axisFormatter: _d2.default.format('n')\n    }\n  };\n\n  var horizontalDefaults = {\n    labels: {\n      rotate: 0,\n      rotateAnchor: 'end',\n      filter: true,\n      truncate: 0\n    }\n  };\n\n  var verticalDefaults = {\n    labels: {\n      rotateAnchor: 'middle'\n    }\n  };\n\n  var AxisConfig = function () {\n    function AxisConfig(chartConfig, axisConfigArgs) {\n      _classCallCheck(this, AxisConfig);\n\n      var typeDefaults = axisConfigArgs.type === 'category' ? categoryDefaults : valueDefaults;\n      // _.defaultsDeep mutates axisConfigArgs nested values so we clone it first\n      var axisConfigArgsClone = _lodash2.default.cloneDeep(axisConfigArgs);\n      var isCategoryAxis = axisConfigArgsClone.type === 'category';\n      var isHorizontal = axisConfigArgsClone.position && ['top', 'bottom'].includes(axisConfigArgsClone.position);\n\n      _lodash2.default.merge(typeDefaults, isHorizontal || isCategoryAxis ? horizontalDefaults : verticalDefaults);\n      this._values = _lodash2.default.defaultsDeep({}, axisConfigArgsClone, typeDefaults, defaults);\n\n      this._values.elSelector = this._values.elSelector.replace('{pos}', this._values.position);\n      this._values.rootEl = chartConfig.get('el');\n\n      this.data = chartConfig.data;\n      if (isCategoryAxis) {\n        if (!this._values.values) {\n          this.values = this.data.xValues(chartConfig.get('orderBucketsBySum', false));\n          this.ordered = this.data.get('ordered');\n        } else {\n          this.values = this._values.values;\n        }\n        if (!this._values.labels.axisFormatter) {\n          this._values.labels.axisFormatter = this.data.data.xAxisFormatter || this.data.get('xAxisFormatter');\n        }\n      }\n\n      if (this.get('type') === 'value') {\n        var isWiggleOrSilhouette = this.get('scale.mode') === _scale_modes.SCALE_MODES.WIGGLE || this.get('scale.mode') === _scale_modes.SCALE_MODES.SILHOUETTE;\n        // if show was not explicitly set and wiggle or silhouette option was checked\n        if (isWiggleOrSilhouette) {\n          this._values.scale.defaultYExtents = false;\n\n          if (!axisConfigArgs.show) {\n            this._values.show = false;\n            this._values.title.show = true;\n          }\n        }\n\n        // override axisFormatter (to replicate current behaviour)\n        if (this.isPercentage()) {\n          this._values.labels.axisFormatter = _d2.default.format('%');\n        }\n\n        if (this.isLogScale()) {\n          this._values.labels.filter = true;\n        }\n      }\n\n      if (axisConfigArgs.title == null || axisConfigArgs.title.text == null) {\n        var label = isCategoryAxis ? 'xAxisLabel' : 'yAxisLabel';\n        this.set('title.text', this.data.get(label));\n      }\n\n      // horizontal axis with ordinal scale should have labels rotated (so we can fit more)\n      // unless explicitly overriden by user\n      if (this.isHorizontal() && this.isOrdinal()) {\n        this._values.labels.filter = _lodash2.default.get(axisConfigArgs, 'labels.filter', false);\n        this._values.labels.rotate = _lodash2.default.get(axisConfigArgs, 'labels.rotate', 90);\n        this._values.labels.truncate = _lodash2.default.get(axisConfigArgs, 'labels.truncate', 100);\n      }\n\n      if (this.get('type') === 'category' && !this.isHorizontal()) {\n        this._values.scale.inverted = _lodash2.default.get(axisConfigArgs, 'scale.inverted', true);\n      }\n\n      var offset = void 0;\n      var stacked = true;\n      switch (this.get('scale.mode')) {\n        case _scale_modes.SCALE_MODES.NORMAL:\n          offset = 'zero';\n          stacked = false;\n          break;\n        case _scale_modes.SCALE_MODES.GROUPED:\n          offset = 'group';\n          stacked = false;\n          break;\n        case _scale_modes.SCALE_MODES.PERCENTAGE:\n          offset = 'expand';\n          break;\n        default:\n          offset = this.get('scale.mode');\n      }\n      this.set('scale.offset', _lodash2.default.get(axisConfigArgs, 'scale.offset', offset));\n      /* axis.scale.stacked means that axis stacking function should be run */\n      this.set('scale.stacked', stacked);\n    }\n\n    _createClass(AxisConfig, [{\n      key: 'get',\n      value: function get(property, defaults) {\n        if (typeof defaults === 'undefined' && !_lodash2.default.has(this._values, property)) {\n          throw new Error('Accessing invalid config property: ' + property);\n        }\n        var val = _lodash2.default.get(this._values, property, defaults);\n        if (val == null && defaults != null) return defaults;\n        return val;\n      }\n    }, {\n      key: 'set',\n      value: function set(property, value) {\n        return _lodash2.default.set(this._values, property, value);\n      }\n    }, {\n      key: 'isHorizontal',\n      value: function isHorizontal() {\n        return this._values.position === 'top' || this._values.position === 'bottom';\n      }\n    }, {\n      key: 'isOrdinal',\n      value: function isOrdinal() {\n        return !!this.values && !this.isTimeDomain();\n      }\n    }, {\n      key: 'isTimeDomain',\n      value: function isTimeDomain() {\n        return this.ordered && this.ordered.date;\n      }\n    }, {\n      key: 'isPercentage',\n      value: function isPercentage() {\n        return this._values.scale.mode === _scale_modes.SCALE_MODES.PERCENTAGE;\n      }\n    }, {\n      key: 'isUserDefined',\n      value: function isUserDefined() {\n        return this._values.scale.setYExtents;\n      }\n    }, {\n      key: 'isYExtents',\n      value: function isYExtents() {\n        return this._values.scale.defaultYExtents;\n      }\n    }, {\n      key: 'isLogScale',\n      value: function isLogScale() {\n        return this.getScaleType() === 'log';\n      }\n    }, {\n      key: 'getScaleType',\n      value: function getScaleType() {\n        return this._values.scale.type;\n      }\n    }]);\n\n    return AxisConfig;\n  }();\n\n  return AxisConfig;\n}",null]}