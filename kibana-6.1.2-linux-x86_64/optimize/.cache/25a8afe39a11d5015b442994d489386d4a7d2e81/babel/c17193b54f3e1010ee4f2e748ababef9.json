{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/handler.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/handler.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VisHandlerProvider = VisHandlerProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _markdownIt = require('markdown-it');\n\nvar _markdownIt2 = _interopRequireDefault(_markdownIt);\n\nvar _errors = require('ui/errors');\n\nvar _binder = require('ui/binder');\n\nvar _layout = require('./layout/layout');\n\nvar _chart_title = require('./chart_title');\n\nvar _alerts = require('./alerts');\n\nvar _axis = require('./axis/axis');\n\nvar _chart_grid = require('./chart_grid');\n\nvar _vis_types = require('../visualizations/vis_types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar markdownIt = new _markdownIt2.default({\n  html: false,\n  linkify: true\n});\n\nfunction VisHandlerProvider(Private) {\n  var chartTypes = Private(_vis_types.VislibVisualizationsVisTypesProvider);\n  var Layout = Private(_layout.VislibLibLayoutLayoutProvider);\n  var ChartTitle = Private(_chart_title.VislibLibChartTitleProvider);\n  var Alerts = Private(_alerts.VislibLibAlertsProvider);\n  var Axis = Private(_axis.VislibLibAxisProvider);\n  var Grid = Private(_chart_grid.VislibGridProvider);\n\n  /**\n   * Handles building all the components of the visualization\n   *\n   * @class Handler\n   * @constructor\n   * @param vis {Object} Reference to the Vis Class Constructor\n   * @param opts {Object} Reference to Visualization constructors needed to\n   * create the visualization\n   */\n\n  var Handler = function () {\n    function Handler(vis, visConfig) {\n      _classCallCheck(this, Handler);\n\n      this.el = visConfig.get('el');\n      this.ChartClass = chartTypes[visConfig.get('type')];\n      this.charts = [];\n\n      this.vis = vis;\n      this.visConfig = visConfig;\n      this.data = visConfig.data;\n\n      this.categoryAxes = visConfig.get('categoryAxes').map(function (axisArgs) {\n        return new Axis(visConfig, axisArgs);\n      });\n      this.valueAxes = visConfig.get('valueAxes').map(function (axisArgs) {\n        return new Axis(visConfig, axisArgs);\n      });\n      this.chartTitle = new ChartTitle(visConfig);\n      this.alerts = new Alerts(this, visConfig.get('alerts'));\n      this.grid = new Grid(this, visConfig.get('grid'));\n\n      if (visConfig.get('type') === 'point_series') {\n        this.data.stackData(this);\n      }\n\n      if (visConfig.get('resize', false)) {\n        this.resize = visConfig.get('resize');\n      }\n\n      this.layout = new Layout(visConfig);\n      this.binder = new _binder.Binder();\n      this.renderArray = _lodash2.default.filter([this.layout, this.chartTitle, this.alerts], Boolean);\n\n      this.renderArray = this.renderArray.concat(this.valueAxes)\n      // category axes need to render in reverse order https://github.com/elastic/kibana/issues/13551\n      .concat(this.categoryAxes.slice().reverse());\n\n      // memoize so that the same function is returned every time,\n      // allowing us to remove/re-add the same function\n      this.getProxyHandler = _lodash2.default.memoize(function (event) {\n        var self = this;\n        return function (e) {\n          self.vis.emit(event, e);\n        };\n      });\n\n      /**\n       * Enables events, i.e. binds specific events to the chart\n       * object(s) `on` method. For example, `click` or `mousedown` events.\n       *\n       * @method enable\n       * @param event {String} Event type\n       * @param chart {Object} Chart\n       * @returns {*}\n       */\n      this.enable = this.chartEventProxyToggle('on');\n\n      /**\n       * Disables events for all charts\n       *\n       * @method disable\n       * @param event {String} Event type\n       * @param chart {Object} Chart\n       * @returns {*}\n       */\n      this.disable = this.chartEventProxyToggle('off');\n    }\n    /**\n     * Validates whether data is actually present in the data object\n     * used to render the Vis. Throws a no results error if data is not\n     * present.\n     *\n     * @private\n     */\n\n\n    _createClass(Handler, [{\n      key: '_validateData',\n      value: function _validateData() {\n        var dataType = this.data.type;\n\n        if (!dataType) {\n          throw new _errors.NoResults();\n        }\n      }\n\n      /**\n       * Renders the constructors that create the visualization,\n       * including the chart constructor\n       *\n       * @method render\n       * @returns {HTMLElement} With the visualization child element\n       */\n\n    }, {\n      key: 'render',\n      value: function render() {\n        if (this.visConfig.get('error', null)) return this.error(this.visConfig.get('error'));\n\n        var self = this;\n        var binder = this.binder,\n            _charts = this.charts,\n            charts = _charts === undefined ? [] : _charts;\n\n        var selection = _d2.default.select(this.el);\n\n        selection.selectAll('*').remove();\n\n        this._validateData();\n        this.renderArray.forEach(function (property) {\n          if (typeof property.render === 'function') {\n            property.render();\n          }\n        });\n\n        // render the chart(s)\n        var loadedCount = 0;\n        var chartSelection = selection.selectAll('.chart');\n        chartSelection.each(function (chartData) {\n          var chart = new self.ChartClass(self, this, chartData);\n\n          self.vis.activeEvents().forEach(function (event) {\n            self.enable(event, chart);\n          });\n\n          binder.on(chart.events, 'rendered', function () {\n            loadedCount++;\n            if (loadedCount === chartSelection.length) {\n              // events from all charts are propagated to vis, we only need to fire renderComplete once they all finish\n              self.vis.emit('renderComplete');\n            }\n          });\n\n          charts.push(chart);\n          chart.render();\n        });\n      }\n    }, {\n      key: 'chartEventProxyToggle',\n      value: function chartEventProxyToggle(method) {\n        return function (event, chart) {\n          var proxyHandler = this.getProxyHandler(event);\n\n          _lodash2.default.each(chart ? [chart] : this.charts, function (chart) {\n            chart.events[method](event, proxyHandler);\n          });\n        };\n      }\n\n      /**\n       * Removes all DOM elements from the HTML element provided\n       *\n       * @method removeAll\n       * @param el {HTMLElement} Reference to the HTML Element that\n       * contains the chart\n       * @returns {D3.Selection|D3.Transition.Transition} With the chart\n       * child element removed\n       */\n\n    }, {\n      key: 'removeAll',\n      value: function removeAll(el) {\n        return _d2.default.select(el).selectAll('*').remove();\n      }\n\n      /**\n       * Displays an error message in the DOM\n       *\n       * @method error\n       * @param message {String} Error message to display\n       * @returns {HTMLElement} Displays the input message\n       */\n\n    }, {\n      key: 'error',\n      value: function error(message) {\n        this.removeAll(this.el);\n\n        var div = _d2.default.select(this.el).append('div')\n        // class name needs `chart` in it for the polling checkSize function\n        // to continuously call render on resize\n        .attr('class', 'visualize-error chart error');\n\n        if (message === 'No results found') {\n          div.append('div').attr('class', 'text-center visualize-error visualize-chart').append('div').attr('class', 'item top').append('div').attr('class', 'item').append('h2').html('<i class=\"fa fa-meh-o\"></i>').append('h4').text(message);\n\n          div.append('div').attr('class', 'item bottom');\n        } else {\n          div.append('h4').text(markdownIt.renderInline(message));\n        }\n\n        (0, _jquery2.default)(this.el).trigger('renderComplete');\n        return div;\n      }\n\n      /**\n       * Destroys all the charts in the visualization\n       *\n       * @method destroy\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.binder.destroy();\n\n        this.renderArray.forEach(function (renderable) {\n          if (_lodash2.default.isFunction(renderable.destroy)) {\n            renderable.destroy();\n          }\n        });\n\n        this.charts.splice(0).forEach(function (chart) {\n          if (_lodash2.default.isFunction(chart.destroy)) {\n            chart.destroy();\n          }\n        });\n      }\n    }]);\n\n    return Handler;\n  }();\n\n  return Handler;\n}",null]}