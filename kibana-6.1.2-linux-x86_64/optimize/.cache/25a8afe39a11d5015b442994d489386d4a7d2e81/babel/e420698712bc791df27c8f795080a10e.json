{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/directives/global_nav/app_switcher/app_switcher.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/directives/global_nav/app_switcher/app_switcher.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _dom_location = require('ui/dom_location');\n\nvar _url = require('url');\n\nvar _modules = require('ui/modules');\n\nvar _app_switcher = require('./app_switcher.html');\n\nvar _app_switcher2 = _interopRequireDefault(_app_switcher);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').provider('appSwitcherEnsureNavigation', function () {\n  var forceNavigation = false;\n\n  this.forceNavigation = function (val) {\n    forceNavigation = !!val;\n  };\n\n  this.$get = ['Private', function (Private) {\n    var domLocation = Private(_dom_location.DomLocationProvider);\n\n    return function (event, link) {\n      if (link.disabled) {\n        event.preventDefault();\n      }\n\n      if (!forceNavigation || event.isDefaultPrevented() || event.altKey || event.metaKey || event.ctrlKey) {\n        return;\n      }\n\n      var toParsed = (0, _url.parse)(event.delegateTarget.href);\n      var fromParsed = (0, _url.parse)(domLocation.href);\n      var sameProto = toParsed.protocol === fromParsed.protocol;\n      var sameHost = toParsed.host === fromParsed.host;\n      var samePath = toParsed.path === fromParsed.path;\n\n      if (sameProto && sameHost && samePath) {\n        toParsed.hash && domLocation.reload();\n\n        // event.preventDefault() keeps the browser from seeing the new url as an update\n        // and even setting window.location does not mimic that behavior, so instead\n        // we use stopPropagation() to prevent angular from seeing the click and\n        // starting a digest cycle/attempting to handle it in the router.\n        event.stopPropagation();\n      }\n    };\n  }];\n}).directive('appSwitcher', function () {\n  return {\n    restrict: 'E',\n    scope: {\n      chrome: '='\n    },\n    template: _app_switcher2.default,\n    controllerAs: 'switcher',\n    controller: function controller($scope, appSwitcherEnsureNavigation, globalNavState) {\n      if (!$scope.chrome || !$scope.chrome.getNavLinks) {\n        throw new TypeError('appSwitcher directive requires the \"chrome\" config-object');\n      }\n\n      this.links = $scope.chrome.getNavLinks();\n\n      // links don't cause full-navigation events in certain scenarios\n      // so we force them when needed\n      this.ensureNavigation = appSwitcherEnsureNavigation;\n\n      this.getTooltip = function (link) {\n        // If the sidebar is open then we don't need to show the title because\n        // it will already be visible.\n        if (globalNavState.isOpen()) {\n          return link.tooltip;\n        }\n        return link.tooltip ? link.title + ' - ' + link.tooltip : link.title;\n      };\n    }\n  };\n});",null]}