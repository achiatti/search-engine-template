{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/registry/_registry.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/registry/_registry.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uiRegistry = uiRegistry;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _indexed_array = require('ui/indexed_array');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar notPropsOptNames = _indexed_array.IndexedArray.OPT_NAMES.concat('constructor', 'invokeProviders');\n\n/**\n * Create a registry, which is just a Private module provider.\n *\n * The registry allows modifying the values it will provide\n * using the #register method.\n *\n * To access these modules, pass the registry to the Private\n * module loader.\n *\n * # Examples\n *\n * + register a module\n * ```js\n * let registry = require('ui/registry/vis_types');\n * registry.add(function InjectablePrivateModule($http, Promise) {\n *   ...\n * })\n * ```\n *\n * + get all registered modules\n * ```js\n * let visTypes = Private(RegistryVisTypesProvider);\n * ```\n *\n *\n * @param  {object} [spec] - an object describing the properties of\n *                         the registry to create. Any property specified\n *                         that is not listed below will be mixed into the\n *                         final IndexedArray object.\n *\n * # init\n * @param {Function} [spec.constructor] - an injectable function that is called when\n *                                      the registry is first instanciated by the app.\n *\n * # IndexedArray params\n * @param {array[String]} [spec.index] - passed to the IndexedArray constructor\n * @param {array[String]} [spec.group] - passed to the IndexedArray constructor\n * @param {array[String]} [spec.order] - passed to the IndexedArray constructor\n * @param {array[String]} [spec.initialSet] - passed to the IndexedArray constructor\n * @param {array[String]} [spec.immutable] - passed to the IndexedArray constructor\n *\n * @return {[type]}      [description]\n */\nfunction uiRegistry(spec) {\n  spec = spec || {};\n\n  var constructor = _lodash2.default.has(spec, 'constructor') && spec.constructor;\n  var invokeProviders = _lodash2.default.has(spec, 'invokeProviders') && spec.invokeProviders;\n  var iaOpts = _lodash2.default.defaults(_lodash2.default.pick(spec, _indexed_array.IndexedArray.OPT_NAMES), { index: ['name'] });\n  var props = _lodash2.default.omit(spec, notPropsOptNames);\n  var providers = [];\n\n  /**\n   * This is the Private module that will be instantiated by\n   *\n   * @tag:PrivateModule\n   * @return {IndexedArray} - an indexed array containing the values\n   *                          that were registered, the registry spec\n   *                          defines how things will be indexed.\n   */\n  var registry = function registry(Private, $injector) {\n    // call the registered providers to get their values\n    iaOpts.initialSet = invokeProviders ? $injector.invoke(invokeProviders, undefined, { providers: providers }) : providers.map(Private);\n\n    // index all of the modules\n    var modules = new _indexed_array.IndexedArray(iaOpts);\n\n    // mixin other props\n    _lodash2.default.assign(modules, props);\n\n    // construct\n    if (constructor) {\n      modules = $injector.invoke(constructor, modules) || modules;\n    }\n\n    return modules;\n  };\n\n  registry.displayName = '[registry ' + props.name + ']';\n\n  registry.register = function (privateModule) {\n    providers.push(privateModule);\n    return registry;\n  };\n\n  return registry;\n}",null]}