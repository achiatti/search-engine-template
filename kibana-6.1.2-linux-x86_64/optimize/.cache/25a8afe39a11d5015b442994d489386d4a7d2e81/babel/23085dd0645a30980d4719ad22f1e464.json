{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/prepend_path.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/prepend_path.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prependPath = prependPath;\n\nvar _url = require('url');\n\nvar _lodash = require('lodash');\n\n/**\n *\n * @param {string} relativePath - a relative path that must start with a \"/\".\n * @param {string} newPath - the new path to prefix. ex: 'xyz'\n * @return {string} the url with the basePath prepended. ex. '/xyz/app/kibana#/management'. If\n * the relative path isn't in the right format (e.g. doesn't start with a \"/\") the relativePath is returned\n * unchanged.\n */\nfunction prependPath(relativePath) {\n  var newPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (!relativePath || !(0, _lodash.isString)(relativePath)) {\n    return relativePath;\n  }\n\n  var parsed = (0, _url.parse)(relativePath, true, true);\n  if (!parsed.host && parsed.pathname) {\n    if (parsed.pathname[0] === '/') {\n      parsed.pathname = newPath + parsed.pathname;\n    }\n  }\n\n  return (0, _url.format)({\n    protocol: parsed.protocol,\n    host: parsed.host,\n    pathname: parsed.pathname,\n    query: parsed.query,\n    hash: parsed.hash\n  });\n}",null]}