{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/gauges/meter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/gauges/meter.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.MeterGaugeProvider = MeterGaugeProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _heatmap_color = require('ui/vislib/components/color/heatmap_color');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction MeterGaugeProvider() {\n\n  var defaultConfig = {\n    showTooltip: true,\n    percentageMode: true,\n    maxAngle: 2 * Math.PI * 1.3,\n    minAngle: 2 * Math.PI * 0.7,\n    innerSpace: 5,\n    extents: [0, 10000],\n    scale: {\n      show: true,\n      color: '#666',\n      width: 2,\n      ticks: 10,\n      tickLength: 8\n    },\n    labels: {\n      show: true,\n      color: '#666'\n    },\n    style: {\n      bgWidth: 0.5,\n      width: 0.9\n    }\n  };\n\n  var MeterGauge = function () {\n    function MeterGauge(gaugeChart) {\n      _classCallCheck(this, MeterGauge);\n\n      this.gaugeChart = gaugeChart;\n      this.gaugeConfig = gaugeChart.gaugeConfig;\n      this.gaugeConfig = _lodash2.default.defaultsDeep(this.gaugeConfig, defaultConfig);\n\n      this.gaugeChart.handler.visConfig.set('legend', {\n        labels: this.getLabels(),\n        colors: this.getColors()\n      });\n\n      var colors = this.gaugeChart.handler.visConfig.get('legend.colors', null);\n      if (colors) {\n        this.gaugeChart.handler.vis.uiState.setSilent('vis.defaultColors', null);\n        this.gaugeChart.handler.vis.uiState.setSilent('vis.defaultColors', colors);\n      }\n\n      this.colorFunc = this.gaugeChart.handler.data.getColorFunc();\n    }\n\n    _createClass(MeterGauge, [{\n      key: 'getLabels',\n      value: function getLabels() {\n        var isPercentageMode = this.gaugeConfig.percentageMode;\n        var colorsRange = this.gaugeConfig.colorsRange;\n        var max = _lodash2.default.last(colorsRange).to;\n        var labels = [];\n        colorsRange.forEach(function (range) {\n          var from = isPercentageMode ? Math.round(100 * range.from / max) : range.from;\n          var to = isPercentageMode ? Math.round(100 * range.to / max) : range.to;\n          labels.push(from + ' - ' + to);\n        });\n\n        return labels;\n      }\n    }, {\n      key: 'getColors',\n      value: function getColors() {\n        var invertColors = this.gaugeConfig.invertColors;\n        var colorSchema = this.gaugeConfig.colorSchema;\n        var colorsRange = this.gaugeConfig.colorsRange;\n        var labels = this.getLabels();\n        var colors = {};\n        for (var i = 0; i < labels.length; i += 1) {\n          var divider = Math.max(colorsRange.length - 1, 1);\n          var val = invertColors ? 1 - i / divider : i / divider;\n          colors[labels[i]] = (0, _heatmap_color.getHeatmapColors)(val, colorSchema);\n        }\n        return colors;\n      }\n    }, {\n      key: 'getBucket',\n      value: function getBucket(val) {\n        var bucket = _lodash2.default.findIndex(this.gaugeConfig.colorsRange, function (range) {\n          return range.from <= val && range.to > val;\n        });\n\n        if (bucket === -1) {\n          if (val < this.gaugeConfig.colorsRange[0].from) bucket = 0;else bucket = this.gaugeConfig.colorsRange.length - 1;\n        }\n\n        return bucket;\n      }\n    }, {\n      key: 'getLabel',\n      value: function getLabel(val) {\n        var bucket = this.getBucket(val);\n        var labels = this.gaugeChart.handler.visConfig.get('legend.labels');\n        return labels[bucket];\n      }\n    }, {\n      key: 'getColorBucket',\n      value: function getColorBucket(val) {\n        var bucket = this.getBucket(val);\n        var labels = this.gaugeChart.handler.visConfig.get('legend.labels');\n        return this.colorFunc(labels[bucket]);\n      }\n    }, {\n      key: 'drawScale',\n      value: function drawScale(svg, radius, angle) {\n        var _this = this;\n\n        var scaleWidth = this.gaugeConfig.scale.width;\n        var tickLength = this.gaugeConfig.scale.tickLength;\n        var scaleTicks = this.gaugeConfig.scale.ticks;\n\n        var scale = svg.append('g');\n\n        this.gaugeConfig.colorsRange.forEach(function (range) {\n          var color = _this.getColorBucket(range.from);\n\n          var scaleArc = _d2.default.svg.arc().startAngle(angle(range.from)).endAngle(angle(range.to)).innerRadius(radius).outerRadius(radius + scaleWidth);\n\n          scale.append('path').attr('d', scaleArc).style('stroke', color).style('fill', color);\n        });\n\n        var extents = angle.domain();\n        for (var i = 0; i <= scaleTicks; i++) {\n          var val = i * (extents[1] - extents[0]) / scaleTicks;\n          var tickAngle = angle(val) - Math.PI / 2;\n          var x0 = Math.cos(tickAngle) * radius;\n          var x1 = Math.cos(tickAngle) * (radius - tickLength);\n          var y0 = Math.sin(tickAngle) * radius;\n          var y1 = Math.sin(tickAngle) * (radius - tickLength);\n          var color = this.getColorBucket(val);\n          scale.append('line').attr('x1', x0).attr('x2', x1).attr('y1', y0).attr('y2', y1).style('stroke-width', scaleWidth).style('stroke', color);\n        }\n\n        return scale;\n      }\n    }, {\n      key: 'drawGauge',\n      value: function drawGauge(svg, data, width, height) {\n        var _this2 = this;\n\n        var self = this;\n        var marginFactor = 0.95;\n        var tooltip = this.gaugeChart.tooltip;\n        var isTooltip = this.gaugeChart.handler.visConfig.get('addTooltip');\n        var isDisplayWarning = this.gaugeChart.handler.visConfig.get('isDisplayWarning', false);\n        var maxAngle = this.gaugeConfig.maxAngle;\n        var minAngle = this.gaugeConfig.minAngle;\n        var angleFactor = this.gaugeConfig.gaugeType === 'Arc' ? 0.75 : 1;\n        var maxRadius = Math.min(width, height / angleFactor) / 2 * marginFactor;\n\n        var extendRange = this.gaugeConfig.extendRange;\n        var maxY = _lodash2.default.max(data.values, 'y').y;\n        var min = this.gaugeConfig.colorsRange[0].from;\n        var max = _lodash2.default.last(this.gaugeConfig.colorsRange).to;\n        var angle = _d2.default.scale.linear().range([minAngle, maxAngle]).domain([min, extendRange && max < maxY ? maxY : max]);\n        var radius = _d2.default.scale.linear().range([0, maxRadius]).domain([this.gaugeConfig.innerSpace + 1, 0]);\n\n        var totalWidth = Math.abs(radius(0) - radius(1));\n        var bgPadding = totalWidth * (1 - this.gaugeConfig.style.bgWidth) / 2;\n        var gaugePadding = totalWidth * (1 - this.gaugeConfig.style.width) / 2;\n        var arc = _d2.default.svg.arc().startAngle(minAngle).endAngle(function (d) {\n          return Math.max(0, Math.min(maxAngle, angle(Math.max(min, d.y))));\n        }).innerRadius(function (d, i, j) {\n          return Math.max(0, radius(j + 1) + gaugePadding);\n        }).outerRadius(function (d, i, j) {\n          return Math.max(0, radius(j) - gaugePadding);\n        });\n\n        var bgArc = _d2.default.svg.arc().startAngle(minAngle).endAngle(maxAngle).innerRadius(function (d, i, j) {\n          return Math.max(0, radius(j + 1) + bgPadding);\n        }).outerRadius(function (d, i, j) {\n          return Math.max(0, radius(j) - bgPadding);\n        });\n\n        var gaugeHolders = svg.selectAll('path').data([data]).enter().append('g').attr('data-label', function (d) {\n          return _this2.getLabel(d.values[0].y);\n        });\n\n        var gauges = gaugeHolders.selectAll('g').data(function (d) {\n          return d.values;\n        }).enter();\n\n        gauges.append('path').attr('d', bgArc).style('fill', this.gaugeConfig.style.bgFill);\n\n        var series = gauges.append('path').attr('d', arc).style('fill', function (d) {\n          return self.getColorBucket(Math.max(min, d.y));\n        });\n\n        var smallContainer = svg.node().getBBox().height < 70;\n        var hiddenLabels = smallContainer;\n\n        if (this.gaugeConfig.labels.show) {\n          svg.append('text').attr('class', 'chart-label').text(data.label).attr('y', -30).attr('style', 'dominant-baseline: central; text-anchor: middle;').style('display', function () {\n            var textLength = this.getBBox().width;\n            var textTooLong = textLength > maxRadius;\n            if (textTooLong) {\n              hiddenLabels = true;\n            }\n            return smallContainer || textTooLong ? 'none' : 'initial';\n          });\n\n          svg.append('text').attr('class', 'chart-label').text(this.gaugeConfig.style.subText).attr('y', 20).attr('style', 'dominant-baseline: central; text-anchor: middle;').style('display', function () {\n            var textLength = this.getBBox().width;\n            var textTooLong = textLength > maxRadius;\n            if (textTooLong) {\n              hiddenLabels = true;\n            }\n            return smallContainer || textTooLong ? 'none' : 'initial';\n          });\n        }\n\n        gauges.append('text').attr('class', 'chart-label').attr('y', -5).text(function (d) {\n          if (_this2.gaugeConfig.percentageMode) {\n            var percentage = Math.round(100 * (d.y - min) / (max - min));\n            return percentage + '%';\n          }\n          if (_lodash2.default.has(d, 'aggConfigResult.aggConfig')) {\n            var fieldFormatter = d.aggConfigResult.aggConfig.fieldFormatter('text');\n            return fieldFormatter(d.y);\n          }\n          return d.y;\n        }).attr('style', 'dominant-baseline: central;').style('text-anchor', 'middle').style('font-size', '2em').style('display', function () {\n          var textLength = this.getBBox().width;\n          var textTooLong = textLength > maxRadius;\n          if (textTooLong) {\n            hiddenLabels = true;\n          }\n          return textTooLong ? 'none' : 'initial';\n        });\n\n        if (this.gaugeConfig.scale.show) {\n          this.drawScale(svg, radius(1), angle);\n        }\n\n        if (isTooltip) {\n          series.each(function () {\n            var gauge = _d2.default.select(this);\n            gauge.call(tooltip.render());\n          });\n        }\n\n        if (hiddenLabels && isDisplayWarning) {\n          this.gaugeChart.handler.alerts.show('Some labels were hidden due to size constraints');\n        }\n\n        return series;\n      }\n    }]);\n\n    return MeterGauge;\n  }();\n\n  return MeterGauge;\n}",null]}