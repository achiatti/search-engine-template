{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/time_buckets/calc_auto_interval.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/time_buckets/calc_auto_interval.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimeBucketsCalcAutoIntervalProvider = TimeBucketsCalcAutoIntervalProvider;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction TimeBucketsCalcAutoIntervalProvider() {\n  // these are the rounding rules used by roundInterval()\n\n  var roundingRules = [[(0, _moment.duration)(500, 'ms'), (0, _moment.duration)(100, 'ms')], [(0, _moment.duration)(5, 'second'), (0, _moment.duration)(1, 'second')], [(0, _moment.duration)(7.5, 'second'), (0, _moment.duration)(5, 'second')], [(0, _moment.duration)(15, 'second'), (0, _moment.duration)(10, 'second')], [(0, _moment.duration)(45, 'second'), (0, _moment.duration)(30, 'second')], [(0, _moment.duration)(3, 'minute'), (0, _moment.duration)(1, 'minute')], [(0, _moment.duration)(9, 'minute'), (0, _moment.duration)(5, 'minute')], [(0, _moment.duration)(20, 'minute'), (0, _moment.duration)(10, 'minute')], [(0, _moment.duration)(45, 'minute'), (0, _moment.duration)(30, 'minute')], [(0, _moment.duration)(2, 'hour'), (0, _moment.duration)(1, 'hour')], [(0, _moment.duration)(6, 'hour'), (0, _moment.duration)(3, 'hour')], [(0, _moment.duration)(24, 'hour'), (0, _moment.duration)(12, 'hour')], [(0, _moment.duration)(1, 'week'), (0, _moment.duration)(1, 'd')], [(0, _moment.duration)(3, 'week'), (0, _moment.duration)(1, 'week')], [(0, _moment.duration)(1, 'year'), (0, _moment.duration)(1, 'month')], [Infinity, (0, _moment.duration)(1, 'year')]];\n\n  var revRoundingRules = roundingRules.slice(0).reverse();\n\n  function find(rules, check, last) {\n    function pick(buckets, duration) {\n      var target = duration / buckets;\n      var lastResp = void 0;\n\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        var resp = check(rule[0], rule[1], target);\n\n        if (resp == null) {\n          if (!last) continue;\n          if (lastResp) return lastResp;\n          break;\n        }\n\n        if (!last) return resp;\n        lastResp = resp;\n      }\n\n      // fallback to just a number of milliseconds, ensure ms is >= 1\n      var ms = Math.max(Math.floor(target), 1);\n      return _moment2.default.duration(ms, 'ms');\n    }\n\n    return function (buckets, duration) {\n      var interval = pick(buckets, duration);\n      if (interval) return _moment2.default.duration(interval._data);\n    };\n  }\n\n  return {\n    near: find(revRoundingRules, function near(bound, interval, target) {\n      if (bound > target) return interval;\n    }, true),\n\n    lessThan: find(revRoundingRules, function (bound, interval, target) {\n      if (interval < target) return interval;\n    }),\n\n    atLeast: find(revRoundingRules, function atLeast(bound, interval, target) {\n      if (interval <= target) return interval;\n    })\n  };\n}",null]}