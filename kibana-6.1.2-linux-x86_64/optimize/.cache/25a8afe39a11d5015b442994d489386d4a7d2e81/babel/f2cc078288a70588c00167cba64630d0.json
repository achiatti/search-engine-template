{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/typeahead/typeahead.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/typeahead/typeahead.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/typeahead/typeahead.less');\n\nrequire('ui/typeahead/_input');\n\nrequire('ui/typeahead/_items');\n\nvar _modules = require('ui/modules');\n\nvar _services = require('ui_framework/services');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar typeahead = _modules.uiModules.get('kibana/typeahead');\n\ntypeahead.directive('kbnTypeahead', function () {\n  return {\n    restrict: 'A',\n    scope: {\n      historyKey: '@kbnTypeahead',\n      onSelect: '&'\n    },\n    controllerAs: 'typeahead',\n\n    controller: function controller($scope, PersistedLog, config) {\n      var self = this;\n      self.query = '';\n      self.hidden = true;\n      self.focused = false;\n      self.mousedOver = false;\n\n      self.setInputModel = function (model) {\n        $scope.inputModel = model;\n\n        // watch for changes to the query parameter, delegate to typeaheadCtrl\n        $scope.$watch('inputModel.$viewValue', self.filterItemsByQuery);\n      };\n\n      self.setHidden = function (hidden) {\n        self.hidden = !!hidden;\n      };\n\n      self.setFocused = function (focused) {\n        self.focused = !!focused;\n      };\n\n      self.setMouseover = function (mousedOver) {\n        self.mousedOver = !!mousedOver;\n      };\n\n      // activation methods\n      self.activateItem = function (item) {\n        self.active = item;\n      };\n\n      self.getActiveIndex = function () {\n        if (!self.active) {\n          return;\n        }\n\n        return $scope.filteredItems.indexOf(self.active);\n      };\n\n      self.getItems = function () {\n        return $scope.filteredItems;\n      };\n\n      self.activateNext = function () {\n        var index = self.getActiveIndex();\n        if (index == null) {\n          index = 0;\n        } else if (index < $scope.filteredItems.length - 1) {\n          ++index;\n        }\n\n        self.activateItem($scope.filteredItems[index]);\n      };\n\n      self.activatePrev = function () {\n        var index = self.getActiveIndex();\n\n        if (index > 0 && index != null) {\n          --index;\n        } else if (index === 0) {\n          self.active = false;\n          return;\n        }\n\n        self.activateItem($scope.filteredItems[index]);\n      };\n\n      self.isActive = function (item) {\n        return item === self.active;\n      };\n\n      // selection methods\n      self.selectItem = function (item, ev) {\n        self.hidden = true;\n        self.active = false;\n        $scope.inputModel.$setViewValue(item);\n        $scope.inputModel.$render();\n        self.persistEntry();\n\n        if (ev && ev.type === 'click') {\n          $scope.onSelect();\n        }\n      };\n\n      self.persistEntry = function () {\n        if ($scope.inputModel.$viewValue.length) {\n          // push selection into the history\n          $scope.items = self.history.add($scope.inputModel.$viewValue);\n        }\n      };\n\n      self.selectActive = function () {\n        if (self.active) {\n          self.selectItem(self.active);\n        }\n      };\n\n      self.keypressHandler = function (ev) {\n        var keyCode = ev.which || ev.keyCode;\n\n        if (self.focused) {\n          self.hidden = false;\n        }\n\n        // hide on escape\n        if (_lodash2.default.contains([_services.comboBoxKeyCodes.ESCAPE], keyCode)) {\n          self.hidden = true;\n          self.active = false;\n        }\n\n        // change selection with arrow up/down\n        // on down key, attempt to load all items if none are loaded\n        if (_lodash2.default.contains([_services.comboBoxKeyCodes.DOWN], keyCode) && $scope.filteredItems.length === 0) {\n          $scope.filteredItems = $scope.items;\n          $scope.$digest();\n        } else if (_lodash2.default.contains([_services.comboBoxKeyCodes.UP, _services.comboBoxKeyCodes.DOWN], keyCode)) {\n          if (self.isVisible() && $scope.filteredItems.length) {\n            ev.preventDefault();\n\n            if (keyCode === _services.comboBoxKeyCodes.DOWN) {\n              self.activateNext();\n            } else {\n              self.activatePrev();\n            }\n          }\n        }\n\n        // persist selection on enter, when not selecting from the list\n        if (_lodash2.default.contains([_services.comboBoxKeyCodes.ENTER], keyCode)) {\n          if (!self.active) {\n            self.persistEntry();\n          }\n        }\n\n        // select on enter or tab\n        if (_lodash2.default.contains([_services.comboBoxKeyCodes.ENTER, _services.comboBoxKeyCodes.TAB], keyCode)) {\n          self.selectActive();\n          self.hidden = true;\n        }\n      };\n\n      self.filterItemsByQuery = function (query) {\n        // cache query so we can call it again if needed\n        if (query) {\n          self.query = query;\n        }\n\n        // if the query is empty, clear the list items\n        if (!self.query.length) {\n          $scope.filteredItems = [];\n          return;\n        }\n\n        // update the filteredItems using the query\n        var beginningMatches = $scope.items.filter(function (item) {\n          return item.indexOf(query) === 0;\n        });\n\n        var otherMatches = $scope.items.filter(function (item) {\n          return item.indexOf(query) > 0;\n        });\n\n        $scope.filteredItems = beginningMatches.concat(otherMatches);\n      };\n\n      self.isVisible = function () {\n        return !self.hidden && $scope.filteredItems.length > 0 && (self.focused || self.mousedOver);\n      };\n\n      $scope.$watch('historyKey', function () {\n        self.history = new PersistedLog('typeahead:' + $scope.historyKey, {\n          maxLength: config.get('history:limit'),\n          filterDuplicates: true\n        });\n\n        $scope.items = self.history.get();\n        $scope.filteredItems = [];\n      });\n\n      // handle updates to parent scope history\n      $scope.$watch('items', function () {\n        if (self.query) {\n          self.filterItemsByQuery(self.query);\n        }\n      });\n\n      // watch for changes to the filtered item list\n      $scope.$watch('filteredItems', function (filteredItems) {\n\n        // if list is empty, or active item is missing, unset active item\n        if (!filteredItems.length || !_lodash2.default.contains(filteredItems, self.active)) {\n          self.active = false;\n        }\n      });\n    },\n\n    link: function link($scope, $el, attrs) {\n      if (!_lodash2.default.has(attrs, 'onSelect')) {\n        throw new Error('on-select must be defined');\n      }\n\n      $scope.$watch('typeahead.isVisible()', function (vis) {\n        $el.toggleClass('visible', vis);\n      });\n    }\n  };\n});",null]}