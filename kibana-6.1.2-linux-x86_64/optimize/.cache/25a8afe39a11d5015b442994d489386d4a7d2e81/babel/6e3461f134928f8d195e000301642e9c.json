{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/point_series/_get_series.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/point_series/_get_series.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PointSeriesGetSeriesProvider = PointSeriesGetSeriesProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _get_point = require('ui/agg_response/point_series/_get_point');\n\nvar _add_to_siri = require('ui/agg_response/point_series/_add_to_siri');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction PointSeriesGetSeriesProvider(Private) {\n  var getPoint = Private(_get_point.PointSeriesGetPointProvider);\n  var addToSiri = Private(_add_to_siri.PointSeriesAddToSiriProvider);\n\n  return function getSeries(rows, chart) {\n    var aspects = chart.aspects;\n    var multiY = Array.isArray(aspects.y);\n    var yScale = chart.yScale;\n    var partGetPoint = _lodash2.default.partial(getPoint, aspects.x, aspects.series, yScale);\n\n    var series = (0, _lodash2.default)(rows).transform(function (series, row) {\n      if (!multiY) {\n        var point = partGetPoint(row, aspects.y, aspects.z);\n        if (point) addToSiri(series, point, point.series, point.series, aspects.y.agg);\n        return;\n      }\n\n      aspects.y.forEach(function (y) {\n        var point = partGetPoint(row, y, aspects.z);\n        if (!point) return;\n\n        // use the point's y-axis as it's series by default,\n        // but augment that with series aspect if it's actually\n        // available\n        var seriesId = y.agg.id;\n        var seriesLabel = y.col.title;\n\n        if (aspects.series) {\n          var prefix = point.series ? point.series + ': ' : '';\n          seriesId = prefix + seriesId;\n          seriesLabel = prefix + seriesLabel;\n        }\n\n        addToSiri(series, point, seriesId, seriesLabel, y.agg);\n      });\n    }, new Map()).thru(function (series) {\n      return [].concat(_toConsumableArray(series.values()));\n    }).value();\n\n    if (multiY) {\n      series = _lodash2.default.sortBy(series, function (siri) {\n        var firstVal = siri.values[0];\n        var y = void 0;\n\n        if (firstVal) {\n          var agg = firstVal.aggConfigResult.aggConfig;\n          y = _lodash2.default.find(aspects.y, function (y) {\n            return y.agg === agg;\n          });\n        }\n\n        return y ? y.i : series.length;\n      });\n    }\n\n    return series;\n  };\n}",null]}