{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/column_chart.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/point_series/column_chart.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibVisualizationsColumnChartProvider = VislibVisualizationsColumnChartProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _point_series = require('./_point_series');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibVisualizationsColumnChartProvider(Private) {\n\n  var PointSeries = Private(_point_series.VislibVisualizationsPointSeriesProvider);\n\n  var defaults = {\n    mode: 'normal',\n    showTooltip: true,\n    color: undefined,\n    fillColor: undefined\n  };\n\n  /**\n   * Histogram intervals are not always equal widths, e.g, monthly time intervals.\n   * It is more visually appealing to vary bar width so that gutter width is constant.\n   */\n  function datumWidth(defaultWidth, datum, nextDatum, scale, gutterWidth) {\n    var groupCount = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n    var datumWidth = defaultWidth;\n    if (nextDatum) {\n      datumWidth = (scale(nextDatum.x) - scale(datum.x) - gutterWidth) / groupCount;\n      // To handle data-sets with holes, do not let width be larger than default.\n      if (datumWidth > defaultWidth) {\n        datumWidth = defaultWidth;\n      }\n    }\n    return datumWidth;\n  }\n\n  /**\n   * Vertical Bar Chart Visualization: renders vertical and/or stacked bars\n   *\n   * @class ColumnChart\n   * @constructor\n   * @extends Chart\n   * @param handler {Object} Reference to the Handler Class Constructor\n   * @param el {HTMLElement} HTML element to which the chart will be appended\n   * @param chartData {Object} Elasticsearch query results for this specific chart\n   */\n\n  var ColumnChart = function (_PointSeries) {\n    _inherits(ColumnChart, _PointSeries);\n\n    function ColumnChart(handler, chartEl, chartData, seriesConfigArgs) {\n      _classCallCheck(this, ColumnChart);\n\n      var _this = _possibleConstructorReturn(this, (ColumnChart.__proto__ || Object.getPrototypeOf(ColumnChart)).call(this, handler, chartEl, chartData, seriesConfigArgs));\n\n      _this.seriesConfig = _lodash2.default.defaults(seriesConfigArgs || {}, defaults);\n      return _this;\n    }\n\n    _createClass(ColumnChart, [{\n      key: 'addBars',\n      value: function addBars(svg, data) {\n        var self = this;\n        var color = this.handler.data.getColorFunc();\n        var tooltip = this.baseChart.tooltip;\n        var isTooltip = this.handler.visConfig.get('tooltip.show');\n\n        var layer = svg.append('g').attr('class', 'series histogram').attr('clip-path', 'url(#' + this.baseChart.clipPathId + ')');\n\n        var bars = layer.selectAll('rect').data(data.values.filter(function (d) {\n          return !_lodash2.default.isNull(d.y);\n        }));\n\n        bars.exit().remove();\n\n        bars.enter().append('rect').attr('data-label', data.label).attr('fill', function () {\n          return color(data.label);\n        }).attr('stroke', function () {\n          return color(data.label);\n        });\n\n        self.updateBars(bars);\n\n        // Add tooltip\n        if (isTooltip) {\n          bars.call(tooltip.render());\n        }\n\n        return bars;\n      }\n\n      /**\n       * Determines whether bars are grouped or stacked and updates the D3\n       * selection\n       *\n       * @method updateBars\n       * @param bars {D3.UpdateSelection} SVG with rect added\n       * @returns {D3.UpdateSelection}\n       */\n\n    }, {\n      key: 'updateBars',\n      value: function updateBars(bars) {\n        if (this.seriesConfig.mode === 'stacked') {\n          return this.addStackedBars(bars);\n        }\n        return this.addGroupedBars(bars);\n      }\n\n      /**\n       * Adds stacked bars to column chart visualization\n       *\n       * @method addStackedBars\n       * @param bars {D3.UpdateSelection} SVG with rect added\n       * @returns {D3.UpdateSelection}\n       */\n\n    }, {\n      key: 'addStackedBars',\n      value: function addStackedBars(bars) {\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n        var isTimeScale = this.getCategoryAxis().axisConfig.isTimeDomain();\n        var yMin = yScale.domain()[0];\n        var gutterSpacingPercentage = 0.15;\n        var groupCount = this.getGroupedCount();\n        var groupNum = this.getGroupedNum(this.chartData);\n        var barWidth = void 0;\n        var gutterWidth = void 0;\n\n        if (isTimeScale) {\n          var _handler$data$get = this.handler.data.get('ordered'),\n              min = _handler$data$get.min,\n              interval = _handler$data$get.interval;\n\n          var intervalWidth = xScale(min + interval) - xScale(min);\n          intervalWidth = Math.abs(intervalWidth);\n\n          gutterWidth = intervalWidth * gutterSpacingPercentage;\n          barWidth = (intervalWidth - gutterWidth) / groupCount;\n        }\n\n        function x(d, i) {\n          if (isTimeScale) {\n            return xScale(d.x) + datumWidth(barWidth, d, bars.data()[i + 1], xScale, gutterWidth, groupCount) * groupNum;\n          }\n          return xScale(d.x) + xScale.rangeBand() / groupCount * groupNum;\n        }\n\n        function y(d) {\n          if (isHorizontal && d.y < 0 || !isHorizontal && d.y > 0) {\n            return yScale(d.y0);\n          }\n          return yScale(d.y0 + d.y);\n        }\n\n        function widthFunc(d, i) {\n          if (isTimeScale) {\n            return datumWidth(barWidth, d, bars.data()[i + 1], xScale, gutterWidth, groupCount);\n          }\n          return xScale.rangeBand() / groupCount;\n        }\n\n        function heightFunc(d) {\n          // for split bars or for one series,\n          // last series will have d.y0 = 0\n          if (d.y0 === 0 && yMin > 0) {\n            return yScale(yMin) - yScale(d.y);\n          }\n\n          return Math.abs(yScale(d.y0) - yScale(d.y0 + d.y));\n        }\n\n        // update\n        bars.attr('x', isHorizontal ? x : y).attr('width', isHorizontal ? widthFunc : heightFunc).attr('y', isHorizontal ? y : x).attr('height', isHorizontal ? heightFunc : widthFunc);\n\n        return bars;\n      }\n\n      /**\n       * Adds grouped bars to column chart visualization\n       *\n       * @method addGroupedBars\n       * @param bars {D3.UpdateSelection} SVG with rect added\n       * @returns {D3.UpdateSelection}\n       */\n\n    }, {\n      key: 'addGroupedBars',\n      value: function addGroupedBars(bars) {\n        var xScale = this.getCategoryAxis().getScale();\n        var yScale = this.getValueAxis().getScale();\n        var groupCount = this.getGroupedCount();\n        var groupNum = this.getGroupedNum(this.chartData);\n        var gutterSpacingPercentage = 0.15;\n        var isTimeScale = this.getCategoryAxis().axisConfig.isTimeDomain();\n        var isHorizontal = this.getCategoryAxis().axisConfig.isHorizontal();\n        var isLogScale = this.getValueAxis().axisConfig.isLogScale();\n        var barWidth = void 0;\n        var gutterWidth = void 0;\n\n        if (isTimeScale) {\n          var _handler$data$get2 = this.handler.data.get('ordered'),\n              min = _handler$data$get2.min,\n              interval = _handler$data$get2.interval;\n\n          var intervalWidth = xScale(min + interval) - xScale(min);\n          intervalWidth = Math.abs(intervalWidth);\n\n          gutterWidth = intervalWidth * gutterSpacingPercentage;\n          barWidth = (intervalWidth - gutterWidth) / groupCount;\n        }\n\n        function x(d, i) {\n          if (isTimeScale) {\n            return xScale(d.x) + datumWidth(barWidth, d, bars.data()[i + 1], xScale, gutterWidth, groupCount) * groupNum;\n          }\n          return xScale(d.x) + xScale.rangeBand() / groupCount * groupNum;\n        }\n\n        function y(d) {\n          if (isHorizontal && d.y < 0 || !isHorizontal && d.y > 0) {\n            return yScale(0);\n          }\n\n          return yScale(d.y);\n        }\n\n        function widthFunc(d, i) {\n          if (isTimeScale) {\n            return datumWidth(barWidth, d, bars.data()[i + 1], xScale, gutterWidth, groupCount);\n          }\n          return xScale.rangeBand() / groupCount;\n        }\n\n        function heightFunc(d) {\n          var baseValue = isLogScale ? 1 : 0;\n          return Math.abs(yScale(baseValue) - yScale(d.y));\n        }\n\n        // update\n        bars.attr('x', isHorizontal ? x : y).attr('width', isHorizontal ? widthFunc : heightFunc).attr('y', isHorizontal ? y : x).attr('height', isHorizontal ? heightFunc : widthFunc);\n\n        return bars;\n      }\n\n      /**\n       * Renders d3 visualization\n       *\n       * @method draw\n       * @returns {Function} Creates the vertical bar chart\n       */\n\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n\n        return function (selection) {\n          selection.each(function () {\n            var svg = self.chartEl.append('g');\n            svg.data([self.chartData]);\n\n            var bars = self.addBars(svg, self.chartData);\n            self.addCircleEvents(bars);\n\n            self.events.emit('rendered', {\n              chart: self.chartData\n            });\n\n            return svg;\n          });\n        };\n      }\n    }]);\n\n    return ColumnChart;\n  }(PointSeries);\n\n  return ColumnChart;\n}",null]}