{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg_params.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg_params.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _agg_select = require('./agg_select.html');\n\nvar _agg_select2 = _interopRequireDefault(_agg_select);\n\nvar _advanced_toggle = require('./advanced_toggle.html');\n\nvar _advanced_toggle2 = _interopRequireDefault(_advanced_toggle);\n\nrequire('ui/filters/match_any');\n\nrequire('./agg_param');\n\nvar _index = require('ui/agg_types/index');\n\nvar _modules = require('ui/modules');\n\nvar _agg_params = require('./agg_params.html');\n\nvar _agg_params2 = _interopRequireDefault(_agg_params);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/visualize').directive('visEditorAggParams', function ($compile, $parse, Private) {\n  var aggTypes = Private(_index.AggTypesIndexProvider);\n\n  return {\n    restrict: 'E',\n    template: _agg_params2.default,\n    scope: true,\n    link: function link($scope, $el, attr) {\n      $scope.$bind('agg', attr.agg);\n      $scope.$bind('groupName', attr.groupName);\n\n      $scope.aggTypeOptions = aggTypes.byType[$scope.groupName];\n      $scope.advancedToggled = false;\n\n      // We set up this watch prior to adding the controls below, because when the controls are added,\n      // there is a possibility that the agg type can be automatically selected (if there is only one)\n      $scope.$watch('agg.type', updateAggParamEditor);\n\n      // this will contain the controls for the schema (rows or columns?), which are unrelated to\n      // controls for the agg, which is why they are first\n      addSchemaEditor();\n\n      // allow selection of an aggregation\n      addAggSelector();\n\n      function addSchemaEditor() {\n        var $schemaEditor = (0, _jquery2.default)('<div>').addClass('schemaEditors').appendTo($el);\n\n        if ($scope.agg.schema.editor) {\n          $schemaEditor.append($scope.agg.schema.editor);\n          $compile($schemaEditor)($scope.$new());\n        }\n      }\n\n      function addAggSelector() {\n        var $aggSelect = (0, _jquery2.default)(_agg_select2.default).appendTo($el);\n        $compile($aggSelect)($scope);\n      }\n\n      // params for the selected agg, these are rebuilt every time the agg in $aggSelect changes\n      var $aggParamEditors = void 0; //  container for agg type param editors\n      var $aggParamEditorsScope = void 0;\n\n      function updateAggParamEditor() {\n        if ($aggParamEditors) {\n          $aggParamEditors.remove();\n          $aggParamEditors = null;\n        }\n\n        // if there's an old scope, destroy it\n        if ($aggParamEditorsScope) {\n          $aggParamEditorsScope.$destroy();\n          $aggParamEditorsScope = null;\n        }\n\n        if (!$scope.agg || !$scope.agg.type) {\n          return;\n        }\n\n        // create child scope, used in the editors\n        $aggParamEditorsScope = $scope.$new();\n        $aggParamEditorsScope.indexedFields = $scope.agg.getFieldOptions();\n        var aggParamHTML = {\n          basic: [],\n          advanced: []\n        };\n\n        // build collection of agg params html\n        $scope.agg.type.params.forEach(function (param, i) {\n          var aggParam = void 0;\n          var fields = void 0;\n          if ($scope.agg.schema.hideCustomLabel && param.name === 'customLabel') {\n            return;\n          }\n          // if field param exists, compute allowed fields\n          if (param.name === 'field') {\n            fields = $aggParamEditorsScope.indexedFields;\n          } else if (param.type === 'field') {\n            fields = $aggParamEditorsScope[param.name + 'Options'] = param.getFieldOptions($scope.agg);\n          }\n\n          if (fields) {\n            var hasIndexedFields = fields.length > 0;\n            var isExtraParam = i > 0;\n            if (!hasIndexedFields && isExtraParam) {\n              // don't draw the rest of the options if there are no indexed fields.\n              return;\n            }\n          }\n\n          var type = 'basic';\n          if (param.advanced) type = 'advanced';\n\n          if (aggParam = getAggParamHTML(param, i)) {\n            aggParamHTML[type].push(aggParam);\n          }\n        });\n\n        // compile the paramEditors html elements\n        var paramEditors = aggParamHTML.basic;\n\n        if (aggParamHTML.advanced.length) {\n          paramEditors.push((0, _jquery2.default)(_advanced_toggle2.default).get(0));\n          paramEditors = paramEditors.concat(aggParamHTML.advanced);\n        }\n\n        $aggParamEditors = (0, _jquery2.default)(paramEditors).appendTo($el);\n        $compile($aggParamEditors)($aggParamEditorsScope);\n      }\n\n      // build HTML editor given an aggParam and index\n      function getAggParamHTML(param, idx) {\n        // don't show params without an editor\n        if (!param.editor) {\n          return;\n        }\n\n        var attrs = {\n          'agg-param': 'agg.type.params[' + idx + ']'\n        };\n\n        if (param.advanced) {\n          attrs['ng-show'] = 'advancedToggled';\n        }\n\n        return (0, _jquery2.default)('<vis-agg-param-editor>').attr(attrs).append(param.editor).get(0);\n      }\n    }\n  };\n});",null]}