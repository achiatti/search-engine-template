{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_get.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_get.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexPatternsGetProvider = IndexPatternsGetProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _saved_objects = require('ui/saved_objects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction IndexPatternsGetProvider(Private) {\n  var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n\n  // many places may require the id list, so we will cache it separately\n  // didn't incorporate with the indexPattern cache to prevent id collisions.\n  var cachedIdPromise = void 0;\n\n  var get = function get(field) {\n    if (field === 'id' && cachedIdPromise) {\n      // return a clone of the cached response\n      return cachedIdPromise.then(function (cachedResp) {\n        return _lodash2.default.clone(cachedResp);\n      });\n    }\n\n    var promise = savedObjectsClient.find({\n      type: 'index-pattern',\n      fields: [],\n      perPage: 10000\n    }).then(function (resp) {\n      return resp.savedObjects.map(function (obj) {\n        return _lodash2.default.get(obj, field);\n      });\n    });\n\n    if (field === 'id') {\n      cachedIdPromise = promise;\n    }\n\n    // ensure that the response stays pristine by cloning it here too\n    return promise.then(function (resp) {\n      return _lodash2.default.clone(resp);\n    });\n  };\n\n  return function (field) {\n    var getter = get.bind(get, field);\n    if (field === 'id') {\n      getter.clearCache = function () {\n        cachedIdPromise = null;\n      };\n    }\n    return getter;\n  };\n}",null]}