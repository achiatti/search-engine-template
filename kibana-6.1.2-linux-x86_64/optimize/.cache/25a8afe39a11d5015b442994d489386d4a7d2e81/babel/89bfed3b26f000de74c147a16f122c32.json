{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/field.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/param_types/field.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldParamTypeProvider = FieldParamTypeProvider;\n\nvar _errors = require('ui/errors');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _field = require('../controls/field.html');\n\nvar _field2 = _interopRequireDefault(_field);\n\nvar _base = require('./base');\n\nrequire('ui/filters/field_type');\n\nvar _indexed_array = require('ui/indexed_array');\n\nvar _notifier = require('ui/notify/notifier');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction FieldParamTypeProvider(Private, $filter) {\n  var BaseParamType = Private(_base.BaseParamTypeProvider);\n  var notifier = new _notifier.Notifier();\n\n  _lodash2.default.class(FieldParamType).inherits(BaseParamType);\n  function FieldParamType(config) {\n    FieldParamType.Super.call(this, config);\n  }\n\n  FieldParamType.prototype.editor = _field2.default;\n  FieldParamType.prototype.scriptable = true;\n  FieldParamType.prototype.filterFieldTypes = '*';\n  // retain only the fields with the aggregatable property if the onlyAggregatable option is true\n  FieldParamType.prototype.onlyAggregatable = true;\n\n  /**\n   * Called to serialize values for saving an aggConfig object\n   *\n   * @param  {field} field - the field that was selected\n   * @return {string}\n   */\n  FieldParamType.prototype.serialize = function (field) {\n    return field.name;\n  };\n\n  /**\n   * Get the options for this field from the indexPattern\n   */\n  FieldParamType.prototype.getFieldOptions = function (aggConfig) {\n    var indexPattern = aggConfig.getIndexPattern();\n    var fields = indexPattern.fields.raw;\n\n    if (this.onlyAggregatable) {\n      fields = fields.filter(function (f) {\n        return f.aggregatable;\n      });\n    }\n\n    if (!this.scriptable) {\n      fields = fields.filter(function (field) {\n        return !field.scripted;\n      });\n    }\n\n    if (this.filterFieldTypes) {\n      var filters = this.filterFieldTypes;\n      if (_lodash2.default.isFunction(this.filterFieldTypes)) {\n        filters = this.filterFieldTypes.bind(this, aggConfig.vis);\n      }\n      fields = $filter('fieldType')(fields, filters);\n      fields = $filter('orderBy')(fields, ['type', 'name']);\n    }\n\n    return new _indexed_array.IndexedArray({\n      index: ['name'],\n      group: ['type'],\n      initialSet: fields\n    });\n  };\n\n  /**\n   * Called to read values from a database record into the\n   * aggConfig object\n   *\n   * @param  {string} fieldName\n   * @return {field}\n   */\n  FieldParamType.prototype.deserialize = function (fieldName, aggConfig) {\n    var field = aggConfig.getIndexPattern().fields.byName[fieldName];\n\n    if (!field) {\n      throw new _errors.SavedObjectNotFound('index-pattern-field', fieldName);\n    }\n\n    var validField = this.getFieldOptions(aggConfig).byName[fieldName];\n    if (!validField) {\n      notifier.error('Saved \"field\" parameter is now invalid. Please select a new field.');\n    }\n\n    return validField;\n  };\n\n  /**\n   * Write the aggregation parameter.\n   *\n   * @param  {AggConfig} aggConfig - the entire configuration for this agg\n   * @param  {object} output - the result of calling write on all of the aggregations\n   *                         parameters.\n   * @param  {object} output.params - the final object that will be included as the params\n   *                               for the agg\n   * @return {undefined}\n   */\n  FieldParamType.prototype.write = function (aggConfig, output) {\n    var field = aggConfig.getField();\n\n    if (!field) {\n      throw new TypeError('\"field\" is a required parameter');\n    }\n\n    if (field.scripted) {\n      output.params.script = {\n        inline: field.script,\n        lang: field.lang\n      };\n    } else {\n      output.params.field = field.name;\n    }\n  };\n\n  return FieldParamType;\n}",null]}