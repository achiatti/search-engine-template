{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/routes/breadcrumbs.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/routes/breadcrumbs.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePathToBreadcrumbs = parsePathToBreadcrumbs;\n\nvar _lodash = require('lodash');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n *  Take a path (from $location.path() usually) and parse\n *  it's segments into a list of breadcrumbs\n *\n *  @param  {string} path\n *  @return {Array<Breadcrumb>}\n */\nfunction parsePathToBreadcrumbs(path) {\n  return (0, _lodash.trim)(path, '/').split('/').reduce(function (acc, id, i, parts) {\n    return [].concat(_toConsumableArray(acc), [{\n      id: id,\n      display: (0, _lodash.startCase)(id),\n      href: i === 0 ? '#/' + id : acc[i - 1].href + '/' + id,\n      current: i === parts.length - 1\n    }]);\n  }, []);\n}",null]}