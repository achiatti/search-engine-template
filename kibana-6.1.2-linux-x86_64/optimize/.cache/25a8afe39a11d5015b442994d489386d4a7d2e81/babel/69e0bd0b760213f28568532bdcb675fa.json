{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/url.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/url.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KbnUrlProvider = KbnUrlProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/filters/uriescape');\n\nrequire('ui/filters/rison');\n\nvar _modules = require('ui/modules');\n\nvar _app_state = require('ui/state_management/app_state');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana/url').service('kbnUrl', function (Private) {\n  return Private(KbnUrlProvider);\n});\n\nfunction KbnUrlProvider($injector, $location, $rootScope, $parse, Private) {\n  /**\n   *  the `kbnUrl` service was created to smooth over some of the\n   *  inconsistent behavior that occurs when modifying the url via\n   *  the `$location` api. In general it is recommended that you use\n   *  the `kbnUrl` service any time you want to modify the url.\n   *\n   *  \"features\" that `kbnUrl` does it's best to guarantee, which\n   *  are not guaranteed with the `$location` service:\n   *   - calling `kbnUrl.change()` with a url that resolves to the current\n   *     route will force a full transition (rather than just updating the\n   *     properties of the $route object)\n   *\n   *  Additional features of `kbnUrl`\n   *   - parameterized urls\n   *   - easily include an app state with the url\n   *\n   *  @type {KbnUrl}\n   */\n  var self = this;\n\n  /**\n   * Navigate to a url\n   *\n   * @param  {String} url - the new url, can be a template. See #eval\n   * @param  {Object} [paramObj] - optional set of parameters for the url template\n   * @return {undefined}\n   */\n  self.change = function (url, paramObj, appState) {\n    self._changeLocation('url', url, paramObj, false, appState);\n  };\n\n  /**\n   * Same as #change except only changes the url's path,\n   * leaving the search string and such intact\n   *\n   * @param  {String} path - the new path, can be a template. See #eval\n   * @param  {Object} [paramObj] - optional set of parameters for the path template\n   * @return {undefined}\n   */\n  self.changePath = function (path, paramObj) {\n    self._changeLocation('path', path, paramObj);\n  };\n\n  /**\n   * Same as #change except that it removes the current url from history\n   *\n   * @param  {String} url - the new url, can be a template. See #eval\n   * @param  {Object} [paramObj] - optional set of parameters for the url template\n   * @return {undefined}\n   */\n  self.redirect = function (url, paramObj, appState) {\n    self._changeLocation('url', url, paramObj, true, appState);\n  };\n\n  /**\n   * Same as #redirect except only changes the url's path,\n   * leaving the search string and such intact\n   *\n   * @param  {String} path - the new path, can be a template. See #eval\n   * @param  {Object} [paramObj] - optional set of parameters for the path template\n   * @return {undefined}\n   */\n  self.redirectPath = function (path, paramObj) {\n    self._changeLocation('path', path, paramObj, true);\n  };\n\n  /**\n   * Evaluate a url template. templates can contain double-curly wrapped\n   * expressions that are evaluated in the context of the paramObj\n   *\n   * @param  {String} template - the url template to evaluate\n   * @param  {Object} [paramObj] - the variables to expose to the template\n   * @return {String} - the evaluated result\n   * @throws {Error} If any of the expressions can't be parsed.\n   */\n  self.eval = function (template, paramObj) {\n    paramObj = paramObj || {};\n\n    return template.replace(/\\{\\{([^\\}]+)\\}\\}/g, function (match, expr) {\n      // remove filters\n      var key = expr.split('|')[0].trim();\n\n      // verify that the expression can be evaluated\n      var p = $parse(key)(paramObj);\n\n      // if evaluation can't be made, throw\n      if (_lodash2.default.isUndefined(p)) {\n        throw new Error('Replacement failed, unresolved expression: ' + expr);\n      }\n\n      // append uriescape filter if not included\n      if (expr.indexOf('uriescape') === -1) {\n        expr += '|uriescape';\n      }\n\n      return $parse(expr)(paramObj);\n    });\n  };\n\n  /**\n   * convert an object's route to an href, compatible with\n   * window.location.href= and <a href=\"\">\n   *\n   * @param  {Object} obj - any object that list's it's routes at obj.routes{}\n   * @param  {string} route - the route name\n   * @return {string} - the computed href\n   */\n  self.getRouteHref = function (obj, route) {\n    return '#' + self.getRouteUrl(obj, route);\n  };\n\n  /**\n   * convert an object's route to a url, compatible with url.change() or $location.url()\n   *\n   * @param  {Object} obj - any object that list's it's routes at obj.routes{}\n   * @param  {string} route - the route name\n   * @return {string} - the computed url\n   */\n  self.getRouteUrl = function (obj, route) {\n    var template = obj && obj.routes && obj.routes[route];\n    if (template) return self.eval(template, obj);\n  };\n\n  /**\n   * Similar to getRouteUrl, supports objects which list their routes,\n   * and redirects to the named route. See #redirect\n   *\n   * @param  {Object} obj - any object that list's it's routes at obj.routes{}\n   * @param  {string} route - the route name\n   * @return {undefined}\n   */\n  self.redirectToRoute = function (obj, route) {\n    self.redirect(self.getRouteUrl(obj, route));\n  };\n\n  /**\n   * Similar to getRouteUrl, supports objects which list their routes,\n   * and changes the url to the named route. See #change\n   *\n   * @param  {Object} obj - any object that list's it's routes at obj.routes{}\n   * @param  {string} route - the route name\n   * @return {undefined}\n   */\n  self.changeToRoute = function (obj, route) {\n    self.change(self.getRouteUrl(obj, route));\n  };\n\n  /**\n   * Removes the given parameter from the url. Does so without modifying the browser\n   * history.\n   * @param param\n   */\n  self.removeParam = function (param) {\n    $location.search(param, null).replace();\n  };\n\n  /////\n  // private api\n  /////\n  var reloading = void 0;\n\n  self._changeLocation = function (type, url, paramObj, replace, appState) {\n    var prev = {\n      path: $location.path(),\n      search: $location.search()\n    };\n\n    url = self.eval(url, paramObj);\n    $location[type](url);\n    if (replace) $location.replace();\n\n    if (appState) {\n      $location.search(appState.getQueryParamName(), appState.toQueryParam());\n    }\n\n    var next = {\n      path: $location.path(),\n      search: $location.search()\n    };\n\n    if ($injector.has('$route')) {\n      var $route = $injector.get('$route');\n\n      if (self._shouldForceReload(next, prev, $route)) {\n        var _appState = Private(_app_state.AppStateProvider).getAppState();\n        if (_appState) _appState.destroy();\n\n        reloading = $rootScope.$on('$locationChangeSuccess', function () {\n          // call the \"unlisten\" function returned by $on\n          reloading();\n          reloading = false;\n\n          $route.reload();\n        });\n      }\n    }\n  };\n\n  // determine if the router will automatically reload the route\n  self._shouldForceReload = function (next, prev, $route) {\n    if (reloading) return false;\n\n    var route = $route.current && $route.current.$$route;\n    if (!route) return false;\n\n    // for the purposes of determining whether the router will\n    // automatically be reloading, '' and '/' are equal\n    var nextPath = next.path || '/';\n    var prevPath = prev.path || '/';\n    if (nextPath !== prevPath) return false;\n\n    var reloadOnSearch = route.reloadOnSearch;\n    var searchSame = _lodash2.default.isEqual(next.search, prev.search);\n    return reloadOnSearch && searchSame || !reloadOnSearch;\n  };\n}",null]}