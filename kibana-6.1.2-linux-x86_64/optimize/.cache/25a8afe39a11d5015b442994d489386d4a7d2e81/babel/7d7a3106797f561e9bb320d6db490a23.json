{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/theme.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/theme.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (chrome, internals) {\n  /**\n   * ui/chrome Theme API\n   *\n   *   Logo\n   *     Set the background for the logo and small logo in the navbar.\n   *     When the app is in the \"small\" category, a modified version of the\n   *     logo is displayed that is 45px wide.\n   *     eg. 'url(/plugins/app/logo.png) center no-repeat'\n   *\n   *   Brand\n   *     Similar to a logo, but is just text with styles to make it stick out.\n   */\n\n  /**\n   * @param {string|object} item - brand key to set, or object to apply\n   * @param {mixed} val - value to put on the brand item\n   * @return {chrome}\n   */\n  chrome.setBrand = function (item, val) {\n    internals.brand = internals.brand || {};\n\n    // allow objects to be passed in\n    if (_lodash2.default.isPlainObject(item)) {\n      internals.brand = _lodash2.default.clone(item);\n    } else {\n      internals.brand[item] = val;\n    }\n\n    return chrome;\n  };\n\n  /**\n   * @return {string} - the brand text\n   */\n  chrome.getBrand = function (item) {\n    if (!internals.brand) return;\n    return internals.brand[item];\n  };\n\n  /**\n   * Adds a class to the application node\n   * @param {string} - the class name to add\n   * @return {chrome}\n   */\n  chrome.addApplicationClass = function (val) {\n    var classes = internals.applicationClasses || [];\n    classes.push(val);\n    classes = _lodash2.default.uniq(classes);\n\n    internals.applicationClasses = classes;\n    return chrome;\n  };\n\n  /**\n   * Removes a class from the application node. Note: this only\n   * removes classes that were added via the addApplicationClass method\n   * @param  {string|[string]} - class or classes to be removed\n   * @return {chrome}\n   */\n  chrome.removeApplicationClass = function (val) {\n    var classesToRemove = [].concat(val || []);\n    var classes = internals.applicationClasses || [];\n    _lodash2.default.pull.apply(_lodash2.default, [classes].concat(_toConsumableArray(classesToRemove)));\n\n    internals.applicationClasses = classes;\n    return chrome;\n  };\n\n  /**\n   * @return {string} - a space delimited string of the classes added by the\n   * addApplicationClass method\n   */\n  chrome.getApplicationClasses = function () {\n    return internals.applicationClasses.join(' ');\n  };\n};\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// eslint-disable-next-line @elastic/kibana-custom/no-default-export\n\n\nmodule.exports = exports['default'];",null]}