{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/resize_checker/resize_checker.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/resize_checker/resize_checker.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.ResizeCheckerProvider = ResizeCheckerProvider;\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _resizeObserverPolyfill = require('resize-observer-polyfill');\n\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);\n\nvar _lodash = require('lodash');\n\nvar _events = require('ui/events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction ResizeCheckerProvider(Private) {\n  var EventEmitter = Private(_events.EventsProvider);\n\n  function validateElArg(el) {\n    // the ResizeChecker historically accepted jquery elements,\n    // so we wrap in jQuery then extract the element\n    var $el = (0, _jquery2.default)(el);\n\n    if ($el.size() !== 1) {\n      throw new TypeError('ResizeChecker must be constructed with a single DOM element.');\n    }\n\n    return $el.get(0);\n  }\n\n  function getSize(el) {\n    return [el.clientWidth, el.clientHeight];\n  }\n\n  /**\n   *  ResizeChecker receives an element and emits a \"resize\"\n   *  event every time it changes size. Used by the vislib to re-render\n   *  visualizations on resize as well as the console for the\n   *  same reason, but for the editors.\n   */\n  return function (_EventEmitter) {\n    _inherits(ResizeChecker, _EventEmitter);\n\n    function ResizeChecker(el) {\n      _classCallCheck(this, ResizeChecker);\n\n      var _this = _possibleConstructorReturn(this, (ResizeChecker.__proto__ || Object.getPrototypeOf(ResizeChecker)).call(this));\n\n      _this._el = validateElArg(el);\n\n      // the width and height of the element that we expect to see\n      // on the next resize notification. If it matches the size at\n      // the time of the notifications then it we will be ignored.\n      _this._expectedSize = getSize(_this._el);\n\n      _this._observer = new _resizeObserverPolyfill2.default(function () {\n        if (_this._expectedSize) {\n          var sameSize = (0, _lodash.isEqual)(getSize(_this._el), _this._expectedSize);\n          _this._expectedSize = null;\n\n          if (sameSize) {\n            // don't trigger resize notification if the size is what we expect\n            return;\n          }\n        }\n\n        _this.emit('resize');\n      });\n\n      _this._observer.observe(_this._el);\n      return _this;\n    }\n\n    /**\n     *  Run a function and ignore all resizes that occur\n     *  while it's running.\n     *\n     *  @return {undefined}\n     */\n\n\n    _createClass(ResizeChecker, [{\n      key: 'modifySizeWithoutTriggeringResize',\n      value: function modifySizeWithoutTriggeringResize(block) {\n        try {\n          block();\n        } finally {\n          this._expectedSize = getSize(this._el);\n        }\n      }\n\n      /**\n      * Tell the ResizeChecker to shutdown, stop listenings, and never\n      * emit another resize event.\n      *\n      * Cleans up it's listeners and timers.\n      *\n      * @method destroy\n      * @return {void}\n      */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        if (this._destroyed) return;\n        this._destroyed = true;\n\n        this._observer.disconnect();\n        this._observer = null;\n        this._expectedSize = null;\n        this._el = null;\n        this.removeAllListeners();\n      }\n    }]);\n\n    return ResizeChecker;\n  }(EventEmitter);\n}",null]}