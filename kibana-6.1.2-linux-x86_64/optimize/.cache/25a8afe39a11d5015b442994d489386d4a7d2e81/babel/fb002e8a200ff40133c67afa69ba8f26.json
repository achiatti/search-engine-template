{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kbn_top_nav/kbn_top_nav_controller.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kbn_top_nav/kbn_top_nav_controller.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.KbnTopNavControllerProvider = KbnTopNavControllerProvider;\n\nvar _lodash = require('lodash');\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nvar _filter = require('ui/chrome/config/filter.html');\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _interval = require('ui/chrome/config/interval.html');\n\nvar _interval2 = _interopRequireDefault(_interval);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction KbnTopNavControllerProvider($compile) {\n  return function () {\n    function KbnTopNavController() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      _classCallCheck(this, KbnTopNavController);\n\n      if (opts instanceof KbnTopNavController) {\n        return opts;\n      }\n\n      this.opts = [];\n      this.menuItems = [];\n      this.currentKey = null;\n      this.templates = {\n        interval: _interval2.default,\n        filter: _filter2.default\n      };\n      this.locals = new Map();\n\n      this.addItems(opts);\n    }\n\n    _createClass(KbnTopNavController, [{\n      key: 'isVisible',\n      value: function isVisible() {\n        return _chrome2.default.getVisible();\n      }\n    }, {\n      key: 'addItems',\n      value: function addItems(rawOpts) {\n        var _this = this;\n\n        if (!(0, _lodash.isArray)(rawOpts)) rawOpts = [rawOpts];\n\n        rawOpts.forEach(function (rawOpt) {\n          var opt = _this._applyOptDefault(rawOpt);\n          if (!opt.key) throw new TypeError('KbnTopNav: menu items must have a key');\n          _this.opts.push(opt);\n          if (!opt.hideButton()) _this.menuItems.push(opt);\n          if (opt.template) _this.templates[opt.key] = opt.template;\n          if (opt.locals) {\n            _this.locals.set(opt.key, opt.locals);\n          }\n        });\n      }\n\n      // change the current key and rerender\n\n    }, {\n      key: 'setCurrent',\n      value: function setCurrent(key) {\n        if (key && !this.templates.hasOwnProperty(key)) {\n          throw new TypeError('KbnTopNav: unknown template key \"' + key + '\"');\n        }\n\n        this.currentKey = key || null;\n        this._render();\n      }\n\n      // little usability helpers\n\n    }, {\n      key: 'getCurrent',\n      value: function getCurrent() {\n        return this.currentKey;\n      }\n    }, {\n      key: 'isCurrent',\n      value: function isCurrent(key) {\n        return this.getCurrent() === key;\n      }\n    }, {\n      key: 'open',\n      value: function open(key) {\n        this.setCurrent(key);\n      }\n    }, {\n      key: 'close',\n      value: function close(key) {\n        (!key || this.isCurrent(key)) && this.setCurrent(null);\n      }\n    }, {\n      key: 'toggle',\n      value: function toggle(key) {\n        this.setCurrent(this.isCurrent(key) ? null : key);\n      }\n    }, {\n      key: 'click',\n      value: function click(key) {\n        this.handleClick(this.getItem(key));\n      }\n    }, {\n      key: 'getItem',\n      value: function getItem(key) {\n        return this.menuItems.find(function (i) {\n          return i.key === key;\n        });\n      }\n    }, {\n      key: 'handleClick',\n      value: function handleClick(menuItem) {\n        if (menuItem.disableButton()) {\n          return false;\n        }\n        menuItem.run(menuItem, this);\n      }\n      // apply the defaults to individual options\n\n    }, {\n      key: '_applyOptDefault',\n      value: function _applyOptDefault() {\n        var _this2 = this;\n\n        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var defaultedOpt = _extends({\n          label: (0, _lodash.capitalize)(opt.key),\n          hasFunction: !!opt.run,\n          description: opt.run ? opt.key : 'Toggle ' + opt.key + ' view',\n          run: function run(item) {\n            return _this2.toggle(item.key);\n          }\n        }, opt);\n\n        defaultedOpt.hideButton = (0, _lodash.isFunction)(opt.hideButton) ? opt.hideButton : function () {\n          return !!opt.hideButton;\n        };\n        defaultedOpt.disableButton = (0, _lodash.isFunction)(opt.disableButton) ? opt.disableButton : function () {\n          return !!opt.disableButton;\n        };\n        defaultedOpt.tooltip = (0, _lodash.isFunction)(opt.tooltip) ? opt.tooltip : function () {\n          return opt.tooltip;\n        };\n\n        return defaultedOpt;\n      }\n\n      // enable actual rendering\n\n    }, {\n      key: '_link',\n      value: function _link($scope, $element) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this._render();\n      }\n\n      // render the current template to the $element if possible\n      // function is idempotent\n\n    }, {\n      key: '_render',\n      value: function _render() {\n        var $scope = this.$scope,\n            $element = this.$element,\n            rendered = this.rendered,\n            currentKey = this.currentKey;\n\n        var templateToRender = currentKey && this.templates[currentKey];\n\n        if (rendered) {\n          if (rendered.key !== currentKey) {\n            // we have an invalid render, clear it\n            rendered.$childScope.$destroy();\n            rendered.$el.remove();\n            this.rendered = null;\n          } else {\n            // our previous render is still valid, keep it\n            return;\n          }\n        }\n\n        if (!templateToRender || !$scope || !$element) {\n          // we either have nothing to render, or we can't render\n          return;\n        }\n\n        var $childScope = $scope.$new();\n        if (this.locals.has(currentKey)) {\n          Object.assign($childScope, this.locals.get(currentKey));\n        }\n        var $el = $element.find('#template_wrapper').html(templateToRender).contents();\n        $compile($el)($childScope);\n\n        this.rendered = { $childScope: $childScope, $el: $el, key: currentKey };\n      }\n    }]);\n\n    return KbnTopNavController;\n  }();\n}",null]}