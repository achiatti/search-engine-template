{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/scaled_circles.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/scaled_circles.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScaledCirclesMarkers = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _events = require('events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ScaledCirclesMarkers = exports.ScaledCirclesMarkers = function (_EventEmitter) {\n  _inherits(ScaledCirclesMarkers, _EventEmitter);\n\n  function ScaledCirclesMarkers(featureCollection, options, targetZoom, kibanaMap) {\n    _classCallCheck(this, ScaledCirclesMarkers);\n\n    var _this = _possibleConstructorReturn(this, (ScaledCirclesMarkers.__proto__ || Object.getPrototypeOf(ScaledCirclesMarkers)).call(this));\n\n    _this._geohashGeoJson = featureCollection;\n    _this._zoom = targetZoom;\n\n    _this._valueFormatter = options.valueFormatter;\n    _this._tooltipFormatter = options.tooltipFormatter;\n\n    _this._legendColors = null;\n    _this._legendQuantizer = null;\n\n    _this._popups = [];\n\n    var layerOptions = {\n      pointToLayer: _this.getMarkerFunction(),\n      style: _this.getStyleFunction(),\n      onEachFeature: function onEachFeature(feature, layer) {\n        _this._bindPopup(feature, layer);\n      }\n    };\n    // Filter leafletlayer on client when results are not filtered on the server\n    if (!options.isFilteredByCollar) {\n      layerOptions.filter = function (feature) {\n        var bucketRectBounds = _lodash2.default.get(feature, 'properties.rectangle');\n        return kibanaMap.isInside(bucketRectBounds);\n      };\n    }\n    _this._leafletLayer = _leaflet2.default.geoJson(null, layerOptions);\n\n    _this._leafletLayer.addData(_this._geohashGeoJson);\n    return _this;\n  }\n\n  _createClass(ScaledCirclesMarkers, [{\n    key: 'getLeafletLayer',\n    value: function getLeafletLayer() {\n      return this._leafletLayer;\n    }\n  }, {\n    key: 'getStyleFunction',\n    value: function getStyleFunction() {\n      var min = _lodash2.default.get(this._geohashGeoJson, 'properties.min', 0);\n      var max = _lodash2.default.get(this._geohashGeoJson, 'properties.max', 1);\n\n      var quantizeDomain = min !== max ? [min, max] : _d2.default.scale.quantize().domain();\n      this._legendColors = makeCircleMarkerLegendColors(min, max);\n      this._legendQuantizer = _d2.default.scale.quantize().domain(quantizeDomain).range(this._legendColors);\n\n      return makeStyleFunction(min, max, this._legendColors, quantizeDomain);\n    }\n  }, {\n    key: 'movePointer',\n    value: function movePointer() {}\n  }, {\n    key: 'getLabel',\n    value: function getLabel() {\n      if (this._popups.length) {\n        return this._popups[0].feature.properties.aggConfigResult.aggConfig.makeLabel();\n      }\n      return '';\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents(jqueryDiv) {\n      var _this2 = this;\n\n      if (!this._legendColors || !this._legendQuantizer) {\n        return;\n      }\n\n      var titleText = this.getLabel();\n      var $title = (0, _jquery2.default)('<div>').addClass('tilemap-legend-title').text(titleText);\n      jqueryDiv.append($title);\n\n      this._legendColors.forEach(function (color) {\n        var labelText = _this2._legendQuantizer.invertExtent(color).map(_this2._valueFormatter).join(' – ');\n\n        var label = (0, _jquery2.default)('<div>');\n        var icon = (0, _jquery2.default)('<i>').css({\n          background: color,\n          'border-color': makeColorDarker(color)\n        });\n\n        var text = (0, _jquery2.default)('<span>').text(labelText);\n        label.append(icon);\n        label.append(text);\n\n        jqueryDiv.append(label);\n      });\n    }\n\n    /**\n     * Binds popup and events to each feature on map\n     *\n     * @method bindPopup\n     * @param feature {Object}\n     * @param layer {Object}\n     * return {undefined}\n     */\n\n  }, {\n    key: '_bindPopup',\n    value: function _bindPopup(feature, layer) {\n      var _this3 = this;\n\n      var popup = layer.on({\n        mouseover: function mouseover(e) {\n          var layer = e.target;\n          // bring layer to front if not older browser\n          if (!_leaflet2.default.Browser.ie && !_leaflet2.default.Browser.opera) {\n            layer.bringToFront();\n          }\n          _this3._showTooltip(feature);\n        },\n        mouseout: function mouseout() {\n          _this3.emit('hideTooltip');\n        }\n      });\n\n      this._popups.push(popup);\n    }\n\n    /**\n     * Checks if event latlng is within bounds of mapData\n     * features and shows tooltip for that feature\n     *\n     * @method _showTooltip\n     * @param feature {LeafletFeature}\n     * @param latLng? {Leaflet latLng}\n     * @return undefined\n     */\n\n  }, {\n    key: '_showTooltip',\n    value: function _showTooltip(feature, latLng) {\n\n      var lat = _lodash2.default.get(feature, 'geometry.coordinates.1');\n      var lng = _lodash2.default.get(feature, 'geometry.coordinates.0');\n      latLng = latLng || _leaflet2.default.latLng(lat, lng);\n\n      var content = this._tooltipFormatter(feature);\n      if (!content) {\n        return;\n      }\n\n      this.emit('showTooltip', {\n        content: content,\n        position: latLng\n      });\n    }\n  }, {\n    key: 'getMarkerFunction',\n    value: function getMarkerFunction() {\n      var _this4 = this;\n\n      var scaleFactor = 0.6;\n      return function (feature, latlng) {\n        var value = feature.properties.value;\n        var scaledRadius = _this4._radiusScale(value) * scaleFactor;\n        return _leaflet2.default.circleMarker(latlng).setRadius(scaledRadius);\n      };\n    }\n\n    /**\n     * radiusScale returns a number for scaled circle markers\n     * for relative sizing of markers\n     *\n     * @method _radiusScale\n     * @param value {Number}\n     * @return {Number}\n     */\n\n  }, {\n    key: '_radiusScale',\n    value: function _radiusScale(value) {\n\n      //magic numbers\n      var precisionBiasBase = 5;\n      var precisionBiasNumerator = 200;\n\n      var precision = _lodash2.default.max(this._geohashGeoJson.features.map(function (feature) {\n        return String(feature.properties.geohash).length;\n      }));\n\n      var pct = Math.abs(value) / Math.abs(this._geohashGeoJson.properties.max);\n      var zoomRadius = 0.5 * Math.pow(2, this._zoom);\n      var precisionScale = precisionBiasNumerator / Math.pow(precisionBiasBase, precision);\n\n      // square root value percentage\n      return Math.pow(pct, 0.5) * zoomRadius * precisionScale;\n    }\n  }, {\n    key: 'getBounds',\n    value: function getBounds() {\n      return this._leafletLayer.getBounds();\n    }\n  }]);\n\n  return ScaledCirclesMarkers;\n}(_events.EventEmitter);\n\n/**\n * d3 quantize scale returns a hex color, used for marker fill color\n *\n * @method quantizeLegendColors\n * return {undefined}\n */\n\n\nfunction makeCircleMarkerLegendColors(min, max) {\n  var reds1 = ['#ff6128'];\n  var reds3 = ['#fecc5c', '#fd8d3c', '#e31a1c'];\n  var reds5 = ['#fed976', '#feb24c', '#fd8d3c', '#f03b20', '#bd0026'];\n  var bottomCutoff = 2;\n  var middleCutoff = 24;\n  var legendColors = void 0;\n  if (max - min <= bottomCutoff) {\n    legendColors = reds1;\n  } else if (max - min <= middleCutoff) {\n    legendColors = reds3;\n  } else {\n    legendColors = reds5;\n  }\n  return legendColors;\n}\n\nfunction makeColorDarker(color) {\n  var amount = 1.3; //magic number, carry over from earlier\n  return _d2.default.hcl(color).darker(amount).toString();\n}\n\nfunction makeStyleFunction(min, max, legendColors, quantizeDomain) {\n  var legendQuantizer = _d2.default.scale.quantize().domain(quantizeDomain).range(legendColors);\n  return function (feature) {\n    var value = _lodash2.default.get(feature, 'properties.value');\n    var color = legendQuantizer(value);\n    return {\n      fillColor: color,\n      color: makeColorDarker(color),\n      weight: 1.5,\n      opacity: 1,\n      fillOpacity: 0.75\n    };\n  };\n}",null]}