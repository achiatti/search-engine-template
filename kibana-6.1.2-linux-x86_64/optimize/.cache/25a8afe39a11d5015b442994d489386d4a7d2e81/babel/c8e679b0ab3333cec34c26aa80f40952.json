{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/query_parameters/actions.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/context/query_parameters/actions.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryParameterActionsProvider = QueryParameterActionsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _filter_manager = require('ui/filter_manager');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction QueryParameterActionsProvider(courier, Private) {\n  var _this = this;\n\n  var filterManager = Private(_filter_manager.FilterManagerProvider);\n\n  var setPredecessorCount = function setPredecessorCount(state) {\n    return function (predecessorCount) {\n      return state.queryParameters.predecessorCount = clamp(_constants.MIN_CONTEXT_SIZE, _constants.MAX_CONTEXT_SIZE, predecessorCount);\n    };\n  };\n\n  var increasePredecessorCount = function increasePredecessorCount(state) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state.queryParameters.defaultStepSize;\n      return setPredecessorCount(state)(state.queryParameters.predecessorCount + value);\n    };\n  };\n\n  var setSuccessorCount = function setSuccessorCount(state) {\n    return function (successorCount) {\n      return state.queryParameters.successorCount = clamp(_constants.MIN_CONTEXT_SIZE, _constants.MAX_CONTEXT_SIZE, successorCount);\n    };\n  };\n\n  var increaseSuccessorCount = function increaseSuccessorCount(state) {\n    return function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state.queryParameters.defaultStepSize;\n      return setSuccessorCount(state)(state.queryParameters.successorCount + value);\n    };\n  };\n\n  var setQueryParameters = function setQueryParameters(state) {\n    return function (queryParameters) {\n      return Object.assign(state.queryParameters, _lodash2.default.pick(queryParameters, _constants.QUERY_PARAMETER_KEYS));\n    };\n  };\n\n  var addFilter = function addFilter(state) {\n    return function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(field, values, operation) {\n        var indexPatternId, indexPattern;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                indexPatternId = state.queryParameters.indexPatternId;\n\n                filterManager.add(field, values, operation, indexPatternId);\n                _context.next = 4;\n                return courier.indexPatterns.get(indexPatternId);\n\n              case 4:\n                indexPattern = _context.sent;\n\n                indexPattern.popularizeField(field.name, 1);\n\n              case 6:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this);\n      }));\n\n      return function (_x3, _x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  };\n\n  return {\n    addFilter: addFilter,\n    increasePredecessorCount: increasePredecessorCount,\n    increaseSuccessorCount: increaseSuccessorCount,\n    setPredecessorCount: setPredecessorCount,\n    setQueryParameters: setQueryParameters,\n    setSuccessorCount: setSuccessorCount\n  };\n}\n\nfunction clamp(minimum, maximum, value) {\n  return Math.max(Math.min(maximum, value), minimum);\n}",null]}