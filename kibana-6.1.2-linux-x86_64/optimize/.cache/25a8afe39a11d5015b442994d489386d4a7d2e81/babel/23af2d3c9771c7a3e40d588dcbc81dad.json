{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/table_vis/public/table_vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/table_vis/public/table_vis.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('plugins/table_vis/table_vis.less');\n\nrequire('plugins/table_vis/table_vis_controller');\n\nrequire('plugins/table_vis/table_vis_params');\n\nrequire('ui/agg_table');\n\nrequire('ui/agg_table/agg_table_group');\n\nvar _vis_factory = require('ui/vis/vis_factory');\n\nvar _vis_category = require('ui/vis/vis_category');\n\nvar _schemas = require('ui/vis/editors/default/schemas');\n\nvar _table_vis = require('plugins/table_vis/table_vis.html');\n\nvar _table_vis2 = _interopRequireDefault(_table_vis);\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _iconTable = require('./images/icon-table.svg');\n\nvar _iconTable2 = _interopRequireDefault(_iconTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// we need to load the css ourselves\n\n// we also need to load the controller and used by the template\n\n// our params are a bit complex so we will manage them with a directive\n\n// require the directives that we use as well\n\n// register the provider with the visTypes registry\n_vis_types.VisTypesRegistryProvider.register(TableVisTypeProvider);\n\n// define the TableVisType\nfunction TableVisTypeProvider(Private) {\n  var VisFactory = Private(_vis_factory.VisFactoryProvider);\n  var Schemas = Private(_schemas.VisSchemasProvider);\n\n  // define the TableVisController which is used in the template\n  // by angular's ng-controller directive\n\n  // return the visType object, which kibana will use to display and configure new\n  // Vis object of this type.\n  return VisFactory.createAngularVisualization({\n    type: 'table',\n    name: 'table',\n    title: 'Data Table',\n    image: _iconTable2.default,\n    description: 'Display values in a table',\n    category: _vis_category.CATEGORY.DATA,\n    visConfig: {\n      defaults: {\n        perPage: 10,\n        showPartialRows: false,\n        showMeticsAtAllLevels: false,\n        sort: {\n          columnIndex: null,\n          direction: null\n        },\n        showTotal: false,\n        totalFunc: 'sum'\n      },\n      template: _table_vis2.default\n    },\n    editorConfig: {\n      optionsTemplate: '<table-vis-params></table-vis-params>',\n      schemas: new Schemas([{\n        group: 'metrics',\n        name: 'metric',\n        title: 'Metric',\n        aggFilter: ['!geo_centroid', '!geo_bounds'],\n        min: 1,\n        defaults: [{ type: 'count', schema: 'metric' }]\n      }, {\n        group: 'buckets',\n        name: 'bucket',\n        title: 'Split Rows',\n        aggFilter: ['!filter']\n      }, {\n        group: 'buckets',\n        name: 'split',\n        title: 'Split Table',\n        aggFilter: ['!filter']\n      }])\n    },\n    responseHandlerConfig: {\n      asAggConfigResults: true\n    },\n    hierarchicalData: function hierarchicalData(vis) {\n      return Boolean(vis.params.showPartialRows || vis.params.showMeticsAtAllLevels);\n    }\n  });\n}\n\nexports.default = TableVisTypeProvider;\nmodule.exports = exports['default'];",null]}