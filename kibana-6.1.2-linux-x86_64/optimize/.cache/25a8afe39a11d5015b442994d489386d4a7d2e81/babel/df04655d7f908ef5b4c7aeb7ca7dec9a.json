{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/wizard/wizard.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/visualize/wizard/wizard.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nrequire('plugins/kibana/visualize/saved_visualizations/saved_visualizations');\n\nrequire('ui/directives/saved_object_finder');\n\nrequire('ui/directives/paginated_selectable_list');\n\nrequire('plugins/kibana/discover/saved_searches/saved_searches');\n\nrequire('./wizard.less');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _vis_category = require('ui/vis/vis_category');\n\nvar _dashboard_constants = require('plugins/kibana/dashboard/dashboard_constants');\n\nvar _visualize_constants = require('../visualize_constants');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _modules = require('ui/modules');\n\nvar _step_ = require('./step_1.html');\n\nvar _step_2 = _interopRequireDefault(_step_);\n\nvar _step_3 = require('./step_2.html');\n\nvar _step_4 = _interopRequireDefault(_step_3);\n\nvar _saved_objects = require('ui/saved_objects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _module = _modules.uiModules.get('app/visualize', ['kibana/courier']);\n\n/********\n/** Wizard Step 1\n/********/\n\n// Redirect old route to new route.\n_routes2.default.when('/visualize/step/1', {\n  redirectTo: _visualize_constants.VisualizeConstants.WIZARD_STEP_1_PAGE_PATH\n});\n\n_routes2.default.when(_visualize_constants.VisualizeConstants.WIZARD_STEP_1_PAGE_PATH, {\n  template: _step_2.default,\n  controller: 'VisualizeWizardStep1'\n});\n\n_module.controller('VisualizeWizardStep1', function ($scope, $route, kbnUrl, timefilter, Private, config) {\n  var _visTypeCategoryToHum;\n\n  timefilter.enabled = false;\n\n  var visTypeCategoryToHumanReadableMap = (_visTypeCategoryToHum = {}, _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.BASIC, 'Basic Charts'), _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.DATA, 'Data'), _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.GRAPHIC, 'Graphic'), _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.MAP, 'Maps'), _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.OTHER, 'Other'), _defineProperty(_visTypeCategoryToHum, _vis_category.CATEGORY.TIME, 'Time Series'), _visTypeCategoryToHum);\n\n  var addToDashMode = $route.current.params[_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM];\n  kbnUrl.removeParam(_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM);\n\n  var visTypes = Private(_vis_types.VisTypesRegistryProvider);\n  var isLabsEnabled = config.get('visualize:enableLabs');\n  $scope.toggleLabView = function () {\n    $route.current.params.lab = !$route.current.params.lab;\n    $route.updateParams($route.current.params);\n    $route.reload();\n  };\n\n  var categoryToVisTypesMap = {};\n\n  visTypes.forEach(function (visType) {\n\n    var categoryName = visType.category;\n\n    if (categoryName === _vis_category.CATEGORY.HIDDEN) {\n      return;\n    }\n\n    if (!isLabsEnabled && visType.stage === 'lab') {\n      return;\n    }\n\n    // Create category object if it doesn't exist yet.\n    if (!categoryToVisTypesMap[categoryName]) {\n      categoryToVisTypesMap[categoryName] = {\n        label: visTypeCategoryToHumanReadableMap[categoryName],\n        list: []\n      };\n    }\n\n    var categoryVisTypes = categoryToVisTypesMap[categoryName];\n\n    // Add the visType to the list and sort them by their title.\n    categoryVisTypes.list = _lodash2.default.sortBy(categoryVisTypes.list.concat(visType), function (type) {\n      return type.title;\n    });\n  });\n\n  // Sort the categories alphabetically.\n  var sortedVisTypeCategories = Object.values(categoryToVisTypesMap).sort(function (a, b) {\n    var other = _vis_category.CATEGORY.OTHER.toLowerCase();\n\n    // Put \"other\" category at the end of the list.\n    var labelA = a.label.toLowerCase();\n    if (labelA === other) return 1;\n\n    var labelB = b.label.toLowerCase();\n    if (labelB === other) return -1;\n\n    if (labelA < labelB) return -1;\n    if (labelA > labelB) return 1;\n    return 0;\n  });\n\n  $scope.searchTerm = '';\n\n  $scope.filteredVisTypeCategories = [];\n\n  $scope.$watch('searchTerm', function () {\n    function getVisTypeCategories() {\n      var normalizedSearchTerm = $scope.searchTerm.toLowerCase().trim();\n\n      var filteredVisTypeCategories = sortedVisTypeCategories.map(function (category) {\n        // Include entire category if the category matches the search term.\n        if (category.label.toLowerCase().includes(normalizedSearchTerm)) {\n          return category;\n        }\n\n        // Otherwise, return just the vis types in the category which match.\n        var filteredVisTypes = category.list.filter(function (visType) {\n          return visType.title.toLowerCase().includes(normalizedSearchTerm);\n        });\n\n        return {\n          label: category.label,\n          list: filteredVisTypes\n        };\n      });\n\n      return filteredVisTypeCategories.filter(function (category) {\n        return category.list.length;\n      });\n    }\n\n    $scope.filteredVisTypeCategories = getVisTypeCategories();\n  });\n\n  $scope.getVisTypeId = function (type) {\n    return _lodash2.default.camelCase(type.name);\n  };\n\n  $scope.getVisTypeTooltip = function (type) {\n    //to not clutter the tooltip, just only notify if labs or experimental.\n    //labs is more important in this regard.\n    var prefix = '';\n    if (type.stage === 'lab') {\n      prefix = '(Lab)';\n    } else if (type.stage === 'experimental') {\n      prefix = '(Experimental)';\n    }\n    return prefix + ' ' + type.description;\n  };\n\n  $scope.getVisTypeTooltipPosition = function (index) {\n    // Tooltips should appear on the bottom by default, unless they're on the last row. This is a\n    // cheap workaround to automatically positioning the tooltip so that it won't disappear off\n    // the edge of the screen.\n    if (index === $scope.filteredVisTypeCategories.length - 1) {\n      return 'top';\n    }\n\n    return 'bottom';\n  };\n\n  $scope.getVisTypeUrl = function (visType) {\n    var baseUrl = visType.requiresSearch && visType.options.showIndexSelection ? '#' + _visualize_constants.VisualizeConstants.WIZARD_STEP_2_PAGE_PATH + '?' : '#' + _visualize_constants.VisualizeConstants.CREATE_PATH + '?';\n\n    var params = ['type=' + encodeURIComponent(visType.name)];\n\n    if (addToDashMode) {\n      params.push(_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM);\n    }\n\n    return baseUrl + params.join('&');\n  };\n});\n\n/********\n/** Wizard Step 2\n/********/\n\n// Redirect old route to new route.\n// NOTE: Accessing this route directly means the user has entered into the wizard UX without\n// selecting a Visualization type in step 1. So we want to redirect them to step 1, not step 2.\n_routes2.default.when('/visualize/step/2', {\n  redirectTo: _visualize_constants.VisualizeConstants.WIZARD_STEP_1_PAGE_PATH\n});\n\n_routes2.default.when(_visualize_constants.VisualizeConstants.WIZARD_STEP_2_PAGE_PATH, {\n  template: _step_4.default,\n  controller: 'VisualizeWizardStep2',\n  resolve: {\n    indexPatterns: function indexPatterns(Private) {\n      var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n\n      return savedObjectsClient.find({\n        type: 'index-pattern',\n        fields: ['title'],\n        perPage: 10000\n      }).then(function (response) {\n        return response.savedObjects;\n      });\n    }\n  }\n});\n\n_module.controller('VisualizeWizardStep2', function ($route, $scope, timefilter, kbnUrl) {\n  var type = $route.current.params.type;\n  var addToDashMode = $route.current.params[_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM];\n  kbnUrl.removeParam(_dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM);\n\n  $scope.step2WithSearchUrl = function (hit) {\n    if (addToDashMode) {\n      return kbnUrl.eval('#' + _visualize_constants.VisualizeConstants.CREATE_PATH + '?type={{type}}&savedSearchId={{id}}' + ('&' + _dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM), { type: type, id: hit.id });\n    }\n\n    return kbnUrl.eval('#' + _visualize_constants.VisualizeConstants.CREATE_PATH + '?type={{type}}&savedSearchId={{id}}', { type: type, id: hit.id });\n  };\n\n  timefilter.enabled = false;\n\n  $scope.indexPattern = {\n    selection: null,\n    list: $route.current.locals.indexPatterns\n  };\n\n  $scope.makeUrl = function (pattern) {\n    if (!pattern) return;\n\n    if (addToDashMode) {\n      return '#' + _visualize_constants.VisualizeConstants.CREATE_PATH + ('?' + _dashboard_constants.DashboardConstants.ADD_VISUALIZATION_TO_DASHBOARD_MODE_PARAM) + ('&type=' + type + '&indexPattern=' + pattern.id);\n    }\n\n    return '#' + _visualize_constants.VisualizeConstants.CREATE_PATH + '?type=' + type + '&indexPattern=' + pattern.id;\n  };\n});",null]}