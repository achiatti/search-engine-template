{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/lib/filter_utils.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/dashboard/lib/filter_utils.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterUtils = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @typedef {Object} QueryFilter\n * @property query_string {Object}\n * @property query_string.query {String}\n */\n\nvar FilterUtils = exports.FilterUtils = function () {\n  function FilterUtils() {\n    _classCallCheck(this, FilterUtils);\n  }\n\n  _createClass(FilterUtils, null, [{\n    key: 'isQueryFilter',\n\n    /**\n     *\n     * @param filter\n     * @returns {Boolean} True if the filter is of the special query type\n     * (e.g. goes in the query input bar), false otherwise (e.g. is in the filter bar).\n     */\n    value: function isQueryFilter(filter) {\n      return filter.query && !filter.meta;\n    }\n\n    /**\n     *\n     * @param {SavedDashboard} dashboard\n     * @returns {Array.<Object>} An array of filters stored with the dashboard. Includes\n     * both query filters and filter bar filters.\n     */\n\n  }, {\n    key: 'getDashboardFilters',\n    value: function getDashboardFilters(dashboard) {\n      return dashboard.searchSource.getOwn('filter');\n    }\n\n    /**\n     * Grabs a saved query to use from the dashboard, or if none exists, creates a default one.\n     * @param {SavedDashboard} dashboard\n     * @returns {QueryFilter}\n     */\n\n  }, {\n    key: 'getQueryFilterForDashboard',\n    value: function getQueryFilterForDashboard(dashboard) {\n      if (dashboard.searchSource.getOwn('query')) {\n        return dashboard.searchSource.getOwn('query');\n      }\n\n      var dashboardFilters = this.getDashboardFilters(dashboard);\n      var dashboardQueryFilter = _lodash2.default.find(dashboardFilters, this.isQueryFilter);\n      return dashboardQueryFilter ? dashboardQueryFilter.query : '';\n    }\n\n    /**\n     * Returns the filters for the dashboard that should appear in the filter bar area.\n     * @param {SavedDashboard} dashboard\n     * @return {Array.<Object>} Array of filters that should appear in the filter bar for the\n     * given dashboard\n     */\n\n  }, {\n    key: 'getFilterBarsForDashboard',\n    value: function getFilterBarsForDashboard(dashboard) {\n      return _lodash2.default.reject(this.getDashboardFilters(dashboard), this.isQueryFilter);\n    }\n\n    /**\n     * Converts the time to a string, if it isn't already.\n     * @param time {string|Moment}\n     * @returns {string}\n     */\n\n  }, {\n    key: 'convertTimeToString',\n    value: function convertTimeToString(time) {\n      return typeof time === 'string' ? time : (0, _moment2.default)(time).toString();\n    }\n\n    /**\n     * Compares the two times, making sure they are in both compared in string format. Absolute times\n     * are sometimes stored as moment objects, but converted to strings when reloaded. Relative times are\n     * strings that are not convertible to moment objects.\n     * @param timeA {string|Moment}\n     * @param timeB {string|Moment}\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'areTimesEqual',\n    value: function areTimesEqual(timeA, timeB) {\n      return this.convertTimeToString(timeA) === this.convertTimeToString(timeB);\n    }\n\n    /**\n     * Depending on how a dashboard is loaded, the filter object may contain a $$hashKey and $state that will throw\n     * off a filter comparison. This removes those variables.\n     * @param filters {Array.<Object>}\n     * @returns {Array.<Object>}\n     */\n\n  }, {\n    key: 'cleanFiltersForComparison',\n    value: function cleanFiltersForComparison(filters) {\n      return _lodash2.default.map(filters, function (filter) {\n        return _lodash2.default.omit(filter, ['$$hashKey', '$state']);\n      });\n    }\n  }]);\n\n  return FilterUtils;\n}();",null]}