{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/doc_table/actions/filter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/doc_table/actions/filter.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addFilter = addFilter;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _kuery = require('ui/kuery');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction addFilter(field) {\n  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var operation = arguments[2];\n  var index = arguments[3];\n  var state = arguments[4];\n  var filterManager = arguments[5];\n\n  var fieldName = _lodash2.default.isObject(field) ? field.name : field;\n\n  if (!Array.isArray(values)) {\n    values = [values];\n  }\n\n  if (state.query.language === 'lucene') {\n    filterManager.add(field, values, operation, index);\n  }\n\n  if (state.query.language === 'kuery') {\n    var negate = operation === '-';\n    var isExistsQuery = fieldName === '_exists_';\n\n    var newQueries = values.map(function (value) {\n      var newQuery = isExistsQuery ? _kuery.nodeTypes.function.buildNode('exists', value) : _kuery.nodeTypes.function.buildNode('is', fieldName, value);\n\n      return negate ? _kuery.nodeTypes.function.buildNode('not', newQuery) : newQuery;\n    });\n\n    var allQueries = _lodash2.default.isEmpty(state.query.query) ? newQueries : [(0, _kuery.fromKueryExpression)(state.query.query)].concat(_toConsumableArray(newQueries));\n\n    state.query = {\n      query: (0, _kuery.toKueryExpression)(_kuery.nodeTypes.function.buildNode('and', allQueries, 'implicit')),\n      language: 'kuery'\n    };\n  }\n}",null]}