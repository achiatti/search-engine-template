{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/accessibility/kbn_ui_ace_keyboard_mode.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/accessibility/kbn_ui_ace_keyboard_mode.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _modules = require('ui/modules');\n\nrequire('./kbn_ui_ace_keyboard_mode.less');\n\nvar _services = require('ui_framework/services');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The `kbn-ui-ace-keyboard-mode` directive should be used on any element, that\n * `ui-ace` is used on. It will prevent the keyboard trap, that ui-ace usually\n * has, i.e. tabbing into the box won't give you any possibilities to leave\n * it via keyboard again, since tab inside the textbox works like a tab character.\n *\n * This directive won't change anything, if the user uses the mouse. But if she\n * tabs to the ace editor, an overlay will be shown, that you have to press Enter\n * to enter editing mode, and that it can be left by pressing Escape again.\n *\n * That way the ui-ace editor won't trap keyboard focus, and won't cause that\n * accessibility issue anymore.\n */\n\nvar aceKeyboardModeId = 0;\n\n_modules.uiModules.get('kibana').factory('kbnUiAceKeyboardModeService', function () {\n  return {\n    initialize: function initialize(scope, element) {\n      var uniqueId = 'uiAceKeyboardHint-' + scope.$id + '-' + aceKeyboardModeId++;\n\n      var hint = _angular2.default.element('<div\\n        class=\"uiAceKeyboardHint\"\\n        id=\"' + uniqueId + '\"\\n        tabindex=\"0\"\\n        role=\"application\"\\n      >\\n        <p class=\"kuiText kuiVerticalRhythmSmall\">\\n          Press Enter to start editing.\\n        </p>\\n        <p class=\"kuiText kuiVerticalRhythmSmall\">\\n          When you&rsquo;re done, press Escape to stop editing.\\n        </p>\\n      </div>\\n    ');\n\n      var uiAceTextbox = element.find('textarea');\n\n      function startEditing() {\n        // We are not using ng-class in the element, so that we won't need to $compile it\n        hint.addClass('uiAceKeyboardHint-isInactive');\n        uiAceTextbox.focus();\n      }\n\n      function enableOverlay() {\n        hint.removeClass('uiAceKeyboardHint-isInactive');\n      }\n\n      hint.keydown(function (ev) {\n        if (ev.keyCode === _services.keyCodes.ENTER) {\n          ev.preventDefault();\n          startEditing();\n        }\n      });\n\n      uiAceTextbox.blur(function () {\n        enableOverlay();\n      });\n\n      uiAceTextbox.keydown(function (ev) {\n        if (ev.keyCode === _services.keyCodes.ESCAPE) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          enableOverlay();\n          hint.focus();\n        }\n      });\n\n      hint.click(startEditing);\n      // Prevent tabbing into the ACE textarea, we now handle all focusing for it\n      uiAceTextbox.attr('tabindex', '-1');\n      element.prepend(hint);\n    }\n  };\n}).directive('kbnUiAceKeyboardMode', function (kbnUiAceKeyboardModeService) {\n  return {\n    restrict: 'A',\n    link: function link(scope, element) {\n      kbnUiAceKeyboardModeService.initialize(scope, element);\n    }\n  };\n});",null]}