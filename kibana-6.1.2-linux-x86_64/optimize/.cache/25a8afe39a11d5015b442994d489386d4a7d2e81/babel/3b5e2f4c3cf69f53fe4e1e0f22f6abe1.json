{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/common/calculate_label.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/common/calculate_label.js","mtime":1515552207084},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = calculateLabel;\n\nvar _lodash = require('lodash');\n\nvar _agg_lookup = require('./agg_lookup');\n\nvar _agg_lookup2 = _interopRequireDefault(_agg_lookup);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar paths = ['cumulative_sum', 'derivative', 'moving_average', 'avg_bucket', 'sum_bucket', 'min_bucket', 'max_bucket', 'std_deviation_bucket', 'variance_bucket', 'sum_of_squares_bucket', 'serial_diff', 'positive_only'];\nfunction calculateLabel(metric, metrics) {\n  if (!metric) return 'Unknown';\n  if (metric.alias) return metric.alias;\n\n  if (metric.type === 'count') return 'Count';\n  if (metric.type === 'calculation') return 'Bucket Script';\n  if (metric.type === 'math') return 'Math';\n  if (metric.type === 'series_agg') return 'Series Agg (' + metric.function + ')';\n  if (metric.type === 'filter_ratio') return 'Filter Ratio';\n  if (metric.type === 'static') return 'Static Value of ' + metric.value;\n\n  if (metric.type === 'percentile_rank') {\n    return _agg_lookup2.default[metric.type] + ' (' + metric.value + ') of ' + metric.field;\n  }\n\n  if ((0, _lodash.includes)(paths, metric.type)) {\n    var additionalLabel = '';\n    var targetMetric = metrics.find(function (m) {\n      return (0, _lodash.startsWith)(metric.field, m.id);\n    });\n    var targetLabel = calculateLabel(targetMetric, metrics);\n    // For percentiles we need to parse the field id to extract the percentile\n    // the user configured in the percentile aggregation and specified in the\n    // submetric they selected. This applies only to pipeline aggs.\n    if (targetMetric && targetMetric.type === 'percentile') {\n      var percentileValueMatch = /\\[([0-9\\.]+)\\]$/;\n      var matches = metric.field.match(percentileValueMatch);\n      if (matches) {\n        additionalLabel += ' (' + matches[1] + ')';\n      }\n    }\n    return _agg_lookup2.default[metric.type] + ' of ' + targetLabel + additionalLabel;\n  }\n\n  return _agg_lookup2.default[metric.type] + ' of ' + metric.field;\n}\nmodule.exports = exports['default'];",null]}