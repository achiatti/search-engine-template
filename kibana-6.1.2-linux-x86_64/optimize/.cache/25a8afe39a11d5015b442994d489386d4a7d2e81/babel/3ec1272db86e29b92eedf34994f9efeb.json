{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/gauge_chart.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/visualizations/gauge_chart.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.GaugeChartProvider = GaugeChartProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _chart = require('./_chart');\n\nvar _gauge_types = require('./gauges/gauge_types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction GaugeChartProvider(Private) {\n\n  var Chart = Private(_chart.VislibVisualizationsChartProvider);\n  var gaugeTypes = Private(_gauge_types.GaugeTypesProvider);\n\n  var GaugeChart = function (_Chart) {\n    _inherits(GaugeChart, _Chart);\n\n    function GaugeChart(handler, chartEl, chartData) {\n      _classCallCheck(this, GaugeChart);\n\n      var _this = _possibleConstructorReturn(this, (GaugeChart.__proto__ || Object.getPrototypeOf(GaugeChart)).call(this, handler, chartEl, chartData));\n\n      _this.gaugeConfig = handler.visConfig.get('gauge', {});\n      _this.gauge = new gaugeTypes[_this.gaugeConfig.type](_this);\n      return _this;\n    }\n\n    _createClass(GaugeChart, [{\n      key: 'addEvents',\n      value: function addEvents(element) {\n        var events = this.events;\n\n        return element.call(events.addHoverEvent()).call(events.addMouseoutEvent()).call(events.addClickEvent());\n      }\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n        var verticalSplit = this.gaugeConfig.verticalSplit;\n\n        return function (selection) {\n          selection.each(function (data) {\n            var div = _d2.default.select(this);\n            var containerMargin = 20;\n            var containerWidth = (0, _jquery2.default)(this).width() - containerMargin;\n            var containerHeight = (0, _jquery2.default)(this).height() - containerMargin;\n            var width = Math.floor(verticalSplit ? (0, _jquery2.default)(this).width() : containerWidth / data.series.length);\n            var height = Math.floor((verticalSplit ? containerHeight / data.series.length : (0, _jquery2.default)(this).height()) - 25);\n\n            if (height < 0 || width < 0) return;\n\n            div.style('text-align', 'center').style('overflow-y', 'auto');\n\n            data.series.forEach(function (series) {\n              var svg = div.append('svg').style('display', 'inline-block').style('overflow', 'hidden').attr('width', width);\n\n              var g = svg.append('g');\n\n              var gauges = self.gauge.drawGauge(g, series, width, height);\n\n              svg.attr('height', height);\n              var transformX = width / 2;\n              var transformY = self.gaugeConfig.gaugeType === 'Arc' ? height / (2 * 0.75) : height / 2;\n              g.attr('transform', 'translate(' + transformX + ', ' + transformY + ')');\n\n              self.addEvents(gauges);\n            });\n\n            div.append('div').attr('class', 'chart-title').style('text-align', 'center').text(data.label || data.yAxisLabel);\n\n            self.events.emit('rendered', {\n              chart: data\n            });\n\n            return div;\n          });\n        };\n      }\n    }]);\n\n    return GaugeChart;\n  }(Chart);\n\n  return GaugeChart;\n}",null]}