{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/number_list/number_list_input.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/number_list/number_list_input.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _key_map = require('ui/utils/key_map');\n\nvar _modules = require('ui/modules');\n\nvar INVALID = {}; // invalid flag\nvar FLOATABLE = /^[\\d\\.e\\-\\+]+$/i;\n\nvar VALIDATION_ERROR = 'numberListRangeAndOrder';\nvar DIRECTIVE_ATTR = 'kbn-number-list-input';\n\n_modules.uiModules.get('kibana').directive('kbnNumberListInput', function ($parse) {\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^kbnNumberList'],\n    link: function link($scope, $el, attrs, controllers) {\n      var ngModelCntr = controllers[0];\n      var numberListCntr = controllers[1];\n\n      var $setModel = $parse(attrs.ngModel).assign;\n      var $repeater = $el.closest('[ng-repeat]');\n\n      var handlers = {\n        up: change(add, 1),\n        'shift-up': change(addTenth, 1),\n\n        down: change(add, -1),\n        'shift-down': change(addTenth, -1),\n\n        tab: go('next'),\n        'shift-tab': go('prev'),\n\n        'shift-enter': numberListCntr.add,\n\n        backspace: removeIfEmpty,\n        delete: removeIfEmpty\n      };\n\n      function removeIfEmpty(event) {\n        if (!ngModelCntr.$viewValue) {\n          $get('prev').focus();\n          numberListCntr.remove($scope.$index);\n          event.preventDefault();\n        }\n\n        return false;\n      }\n\n      function $get(dir) {\n        return $repeater[dir]().find('[' + DIRECTIVE_ATTR + ']');\n      }\n\n      function go(dir) {\n        return function () {\n          var $to = $get(dir);\n          if ($to.size()) $to.focus();else return false;\n        };\n      }\n\n      function idKey(event) {\n        var id = [];\n        if (event.ctrlKey) id.push('ctrl');\n        if (event.shiftKey) id.push('shift');\n        if (event.metaKey) id.push('meta');\n        if (event.altKey) id.push('alt');\n        id.push(_key_map.keyMap[event.keyCode] || event.keyCode);\n        return id.join('-');\n      }\n\n      function add(n, val) {\n        return parse(val + n);\n      }\n\n      function addTenth(n, val, str) {\n        var int = Math.floor(val);\n        var dec = parseInt(str.split('.')[1] || 0, 10);\n        dec = dec + parseInt(n, 10);\n\n        if (dec < 0 || dec > 9) {\n          int += Math.floor(dec / 10);\n          if (dec < 0) {\n            dec = 10 + dec % 10;\n          } else {\n            dec = dec % 10;\n          }\n        }\n\n        return parse(int + '.' + dec);\n      }\n\n      function change(using, mod) {\n        return function () {\n          var str = String(ngModelCntr.$viewValue);\n          var val = parse(str);\n          if (val === INVALID) return;\n\n          var next = using(mod, val, str);\n          if (next === INVALID) return;\n\n          $el.val(next);\n          ngModelCntr.$setViewValue(next);\n        };\n      }\n\n      function onKeydown(event) {\n        var handler = handlers[idKey(event)];\n        if (!handler) return;\n\n        if (handler(event) !== false) {\n          event.preventDefault();\n        }\n\n        $scope.$apply();\n      }\n\n      $el.on('keydown', onKeydown);\n      $scope.$on('$destroy', function () {\n        $el.off('keydown', onKeydown);\n      });\n\n      function parse(viewValue) {\n        var num = viewValue;\n\n        if (typeof num !== 'number' || isNaN(num)) {\n          // parse non-numbers\n          num = String(viewValue || 0).trim();\n          if (!FLOATABLE.test(num)) return INVALID;\n\n          num = parseFloat(num);\n          if (isNaN(num)) return INVALID;\n        }\n\n        var range = numberListCntr.range;\n        if (!range.within(num)) return INVALID;\n\n        if (numberListCntr.validateAscOrder && $scope.$index > 0) {\n          var i = $scope.$index - 1;\n          var list = numberListCntr.getList();\n          var prev = list[i];\n          if (num <= prev) return INVALID;\n        }\n\n        return num;\n      }\n\n      $scope.$watchMulti(['$index', {\n        fn: $scope.$watchCollection,\n        get: function get() {\n          return numberListCntr.getList();\n        }\n      }], function () {\n        var valid = parse(ngModelCntr.$viewValue) !== INVALID;\n        ngModelCntr.$setValidity(VALIDATION_ERROR, valid);\n      });\n\n      function validate(then) {\n        return function (input) {\n          var value = parse(input);\n          var valid = value !== INVALID;\n          value = valid ? value : input;\n          ngModelCntr.$setValidity(VALIDATION_ERROR, valid);\n          then && then(input, value);\n          return value;\n        };\n      }\n\n      ngModelCntr.$parsers.push(validate());\n      ngModelCntr.$formatters.push(validate(function (input, value) {\n        if (input !== value) $setModel($scope, value);\n      }));\n\n      if (parse(ngModelCntr.$viewValue) === INVALID) {\n        ngModelCntr.$setTouched();\n      }\n    }\n  };\n});",null]}