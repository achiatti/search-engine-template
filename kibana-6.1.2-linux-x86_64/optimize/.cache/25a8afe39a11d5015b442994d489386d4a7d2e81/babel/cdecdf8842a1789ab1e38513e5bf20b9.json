{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/kibana_map_layer.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/kibana_map_layer.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KibanaMapLayer = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar KibanaMapLayer = exports.KibanaMapLayer = function (_EventEmitter) {\n  _inherits(KibanaMapLayer, _EventEmitter);\n\n  function KibanaMapLayer() {\n    _classCallCheck(this, KibanaMapLayer);\n\n    var _this = _possibleConstructorReturn(this, (KibanaMapLayer.__proto__ || Object.getPrototypeOf(KibanaMapLayer)).call(this));\n\n    _this._leafletLayer = null;\n    return _this;\n  }\n\n  _createClass(KibanaMapLayer, [{\n    key: 'getBounds',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt('return', this._leafletLayer.getBounds());\n\n              case 1:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBounds() {\n        return _ref.apply(this, arguments);\n      }\n\n      return getBounds;\n    }()\n  }, {\n    key: 'addToLeafletMap',\n    value: function addToLeafletMap(leafletMap) {\n      this._leafletLayer.addTo(leafletMap);\n    }\n  }, {\n    key: 'removeFromLeafletMap',\n    value: function removeFromLeafletMap(leafletMap) {\n      leafletMap.removeLayer(this._leafletLayer);\n    }\n  }, {\n    key: 'appendLegendContents',\n    value: function appendLegendContents() {}\n  }, {\n    key: 'updateExtent',\n    value: function updateExtent() {}\n  }, {\n    key: 'movePointer',\n    value: function movePointer() {}\n  }, {\n    key: 'getAttributions',\n    value: function getAttributions() {\n      return this._attribution;\n    }\n  }]);\n\n  return KibanaMapLayer;\n}(_events.EventEmitter);",null]}