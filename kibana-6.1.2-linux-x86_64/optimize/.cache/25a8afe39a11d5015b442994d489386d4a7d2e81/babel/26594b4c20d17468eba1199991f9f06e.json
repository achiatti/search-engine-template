{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/step_index_pattern/step_index_pattern.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/create_index_pattern_wizard/step_index_pattern/step_index_pattern.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nrequire('./step_index_pattern.less');\n\nvar _step_index_pattern = require('./step_index_pattern.html');\n\nvar _step_index_pattern2 = _interopRequireDefault(_step_index_pattern);\n\nrequire('./append_wildcard');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('apps/management');\n\n_module.directive('stepIndexPattern', function () {\n  return {\n    restrict: 'E',\n    template: _step_index_pattern2.default,\n    replace: true,\n    controllerAs: 'stepIndexPattern',\n    bindToController: true,\n    scope: {\n      fetchExistingIndices: '&',\n      isFetchingExistingIndices: '=',\n      fetchMatchingIndices: '&',\n      isFetchingMatchingIndices: '=',\n      hasIndices: '&',\n      indexPatternName: '=',\n      allIndices: '=',\n      partialMatchingIndices: '=',\n      matchingIndices: '=',\n      goToNextStep: '&'\n    },\n    link: function link(scope) {\n      scope.$watch('stepIndexPattern.allIndices', scope.stepIndexPattern.updateList);\n      scope.$watch('stepIndexPattern.matchingIndices', scope.stepIndexPattern.updateList);\n      scope.$watch('stepIndexPattern.indexPatternName', function () {\n        // Only send the request if there's valid input.\n        if (scope.stepIndexPattern.indexPatternNameForm && scope.stepIndexPattern.indexPatternNameForm.$valid) {\n          scope.stepIndexPattern.fetchMatchingIndices();\n        }\n\n        // If the index pattern name is invalid, we should reflect that state in the list.\n        scope.stepIndexPattern.updateList();\n      });\n      scope.$watchCollection('stepIndexPattern.indexPatternNameForm.$error', function () {\n        // If we immediately replace the input with an invalid string, then only the form state\n        // changes, but not the `indexPatternName` value, so we need to watch both.\n        scope.stepIndexPattern.updateList();\n      });\n    },\n    controller: function controller() {\n      var _this = this;\n\n      this.matchingIndicesListType = 'noMatches';\n      this.canGoToNextStep = function () {\n        return !_this.isFetchingMatchingIndices && !_this.indexPatternNameForm.$invalid && _this.hasExactMatches();\n      };\n\n      var hasInvalidIndexPattern = function hasInvalidIndexPattern() {\n        return _this.indexPatternNameForm && !_this.indexPatternNameForm.$error.required && _this.indexPatternNameForm.$error.indexPattern;\n      };\n\n      var hasNoInput = function hasNoInput() {\n        return !_this.indexPatternName || !_this.indexPatternName.trim();\n      };\n\n      this.hasExactMatches = function () {\n        return _this.matchingIndices.length;\n      };\n\n      var hasPartialMatches = function hasPartialMatches() {\n        return !_this.matchingIndices.length && _this.partialMatchingIndices.length;\n      };\n\n      this.updateList = function () {\n        if (hasInvalidIndexPattern()) {\n          return _this.matchingIndicesListType = 'invalidIndexPattern';\n        }\n\n        if (hasNoInput()) {\n          return _this.matchingIndicesListType = 'noInput';\n        }\n\n        if (_this.hasExactMatches()) {\n          return _this.matchingIndicesListType = 'exactMatches';\n        }\n\n        if (hasPartialMatches()) {\n          return _this.matchingIndicesListType = 'partialMatches';\n        }\n\n        _this.matchingIndicesListType = 'noMatches';\n      };\n    }\n  };\n});",null]}