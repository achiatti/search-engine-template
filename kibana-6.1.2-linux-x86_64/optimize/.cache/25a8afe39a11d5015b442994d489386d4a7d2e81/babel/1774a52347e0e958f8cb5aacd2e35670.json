{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/data_source/_root_search_source.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/data_source/_root_search_source.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RootSearchSourceProvider = RootSearchSourceProvider;\n\nvar _search_source = require('ui/courier/data_source/search_source');\n\nfunction RootSearchSourceProvider(Private, $rootScope, timefilter) {\n  var SearchSource = Private(_search_source.SearchSourceProvider);\n\n  var globalSource = new SearchSource();\n  globalSource.inherits(false); // this is the final source, it has no parents\n  globalSource.filter(function (globalSource) {\n    // dynamic time filter will be called in the _flatten phase of things\n    return timefilter.get(globalSource.get('index'));\n  });\n\n  var appSource = void 0; // set in setAppSource()\n  resetAppSource();\n\n  // when the route changes, clear the appSource\n  $rootScope.$on('$routeChangeStart', resetAppSource);\n\n  /**\n   * Get the current AppSource\n   * @return {Promise} - resolved with the current AppSource\n   */\n  function getAppSource() {\n    return appSource;\n  }\n\n  /**\n   * Set the current AppSource\n   * @param {SearchSource} source - The Source that represents the applications \"root\" search source object\n   */\n  function setAppSource(source) {\n    appSource = source;\n\n    // walk the parent chain until we get to the global source or nothing\n    // that's where we will attach to the globalSource\n    var literalRoot = source;\n    while (literalRoot._parent && literalRoot._parent !== globalSource) {\n      literalRoot = literalRoot._parent;\n    }\n\n    literalRoot.inherits(globalSource);\n  }\n\n  /**\n   * Sets the appSource to be a new, empty, SearchSource\n   * @return {undefined}\n   */\n  function resetAppSource() {\n    setAppSource(new SearchSource());\n  }\n\n  return {\n    get: getAppSource,\n    set: setAppSource,\n\n    getGlobalSource: function getGlobalSource() {\n      return globalSource;\n    }\n  };\n}",null]}