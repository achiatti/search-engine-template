{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/control.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/control/control.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Control = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Control = exports.Control = function () {\n  function Control(controlParams, filterManager) {\n    _classCallCheck(this, Control);\n\n    this.id = controlParams.id;\n    this.options = controlParams.options;\n    this.type = controlParams.type;\n    this.label = controlParams.label ? controlParams.label : controlParams.fieldName;\n    this.filterManager = filterManager;\n    // restore state from kibana filter context\n    this.reset();\n  }\n\n  _createClass(Control, [{\n    key: 'set',\n    value: function set(newValue) {\n      this.value = newValue;\n      this._hasChanged = true;\n      if (this.hasValue()) {\n        this._kbnFilter = this.filterManager.createFilter(this.value);\n      } else {\n        this._kbnFilter = null;\n      }\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._hasChanged = false;\n      this._kbnFilter = null;\n      this.value = this.filterManager.getValueFromFilterBar();\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.set(this.filterManager.getUnsetValue());\n    }\n  }, {\n    key: 'hasChanged',\n    value: function hasChanged() {\n      return this._hasChanged;\n    }\n  }, {\n    key: 'hasKbnFilter',\n    value: function hasKbnFilter() {\n      if (this._kbnFilter) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'getKbnFilter',\n    value: function getKbnFilter() {\n      return this._kbnFilter;\n    }\n  }, {\n    key: 'hasValue',\n    value: function hasValue() {\n      return !_lodash2.default.isEqual(this.value, this.filterManager.getUnsetValue());\n    }\n  }]);\n\n  return Control;\n}();",null]}