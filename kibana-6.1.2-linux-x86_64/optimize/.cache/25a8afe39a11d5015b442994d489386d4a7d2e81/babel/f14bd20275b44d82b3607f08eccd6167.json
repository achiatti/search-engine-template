{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_manager/filter_manager.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_manager/filter_manager.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterManagerProvider = FilterManagerProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _phrase = require('./lib/phrase');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Adds a filter to a passed state\nfunction FilterManagerProvider(Private) {\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n  var filterManager = {};\n\n  filterManager.generate = function (field, values, operation, index) {\n    values = Array.isArray(values) ? values : [values];\n    var fieldName = _lodash2.default.isObject(field) ? field.name : field;\n    var filters = _lodash2.default.flatten([queryFilter.getAppFilters()]);\n    var newFilters = [];\n\n    var negate = operation === '-';\n\n    // TODO: On array fields, negating does not negate the combination, rather all terms\n    _lodash2.default.each(values, function (value) {\n      var filter = void 0;\n      var existing = _lodash2.default.find(filters, function (filter) {\n        if (!filter) return;\n\n        if (fieldName === '_exists_' && filter.exists) {\n          return filter.exists.field === value;\n        }\n\n        if (_lodash2.default.has(filter, 'query.match')) {\n          return filter.query.match[fieldName] && filter.query.match[fieldName].query === value;\n        }\n\n        if (filter.script) {\n          return filter.meta.field === fieldName && filter.script.script.params.value === value;\n        }\n      });\n\n      if (existing) {\n        existing.meta.disabled = false;\n        if (existing.meta.negate !== negate) {\n          queryFilter.invertFilter(existing);\n        }\n        return;\n      }\n\n      switch (fieldName) {\n        case '_exists_':\n          filter = {\n            meta: { negate: negate, index: index },\n            exists: {\n              field: value\n            }\n          };\n          break;\n        default:\n          if (field.scripted) {\n            filter = {\n              meta: { negate: negate, index: index, field: fieldName },\n              script: (0, _phrase.getPhraseScript)(field, value)\n            };\n          } else {\n            filter = { meta: { negate: negate, index: index }, query: { match: {} } };\n            filter.query.match[fieldName] = { query: value, type: 'phrase' };\n          }\n\n          break;\n      }\n\n      newFilters.push(filter);\n    });\n\n    return newFilters;\n  };\n\n  filterManager.add = function (field, values, operation, index) {\n    var newFilters = this.generate(field, values, operation, index);\n    return queryFilter.addFilters(newFilters);\n  };\n\n  return filterManager;\n}",null]}