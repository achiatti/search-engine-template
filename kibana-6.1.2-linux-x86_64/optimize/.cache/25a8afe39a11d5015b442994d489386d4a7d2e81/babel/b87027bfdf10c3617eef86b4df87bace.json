{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/error_url_overflow/error_url_overflow.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/error_url_overflow/error_url_overflow.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _url_overflow_service = require('./url_overflow_service');\n\nObject.keys(_url_overflow_service).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _url_overflow_service[key];\n    }\n  });\n});\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _url = require('ui/url');\n\nrequire('./error_url_overflow.less');\n\nvar _error_url_overflow = require('./error_url_overflow.html');\n\nvar _error_url_overflow2 = _interopRequireDefault(_error_url_overflow);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n_routes2.default.when('/error/url-overflow', {\n  template: _error_url_overflow2.default,\n  controllerAs: 'controller',\n  controller: function OverflowController(Private, config, $scope) {\n    _classCallCheck(this, OverflowController);\n\n    var kbnUrl = Private(_url.KbnUrlProvider);\n    var urlOverflow = Private(_url_overflow_service.UrlOverflowServiceProvider);\n\n    if (!urlOverflow.get()) {\n      kbnUrl.redirectPath('/');\n      return;\n    }\n\n    this.url = urlOverflow.get();\n    this.limit = urlOverflow.failLength();\n    $scope.$on('$destroy', function () {\n      return urlOverflow.clear();\n    });\n  }\n});",null]}