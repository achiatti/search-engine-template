{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_intervals.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_intervals.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexPatternsIntervalsProvider = IndexPatternsIntervalsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _indexed_array = require('ui/indexed_array');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction IndexPatternsIntervalsProvider(timefilter) {\n\n  var intervals = new _indexed_array.IndexedArray({\n    index: ['name'],\n    initialSet: [{\n      name: 'hours',\n      startOf: 'hour',\n      display: 'Hourly'\n    }, {\n      name: 'days',\n      startOf: 'day',\n      display: 'Daily'\n    }, {\n      name: 'weeks',\n      startOf: 'isoWeek',\n      display: 'Weekly'\n    }, {\n      name: 'months',\n      startOf: 'month',\n      display: 'Monthly'\n    }, {\n      name: 'years',\n      startOf: 'year',\n      display: 'Yearly'\n    }]\n  });\n\n  intervals.toIndexList = function (format, interval, a, b, sortDirection) {\n    var bounds = void 0;\n\n    // setup the range that the list will span, return two moment objects that\n    // are in proper order. a and b can be numbers to specify to go before or after now (respectively)\n    // a certain number of times, based on the interval\n    var range = [[a, 'min', 'startOf'], [b, 'max', 'startOf']].map(function (v) {\n      var val = v[0];\n      var bound = v[1];\n      var extend = v[2];\n\n      // grab a bound from the time filter\n      if (val == null) {\n        bounds = bounds || timefilter.getBounds();\n        val = bounds[bound];\n      }\n\n      if (_lodash2.default.isNumeric(val)) val = (0, _moment2.default)().add(val, interval.name);else if (!_moment2.default.isMoment(val)) val = (0, _moment2.default)(val);\n\n      return val.clone().utc()[extend](interval.startOf);\n    }).sort(function (a, b) {\n      return a - b;\n    });\n\n    if (typeof interval === 'string') {\n      interval = _lodash2.default.find(intervals, { name: interval });\n      if (!interval) throw new Error('Interval must be one of ' + _lodash2.default.pluck(intervals, 'name'));\n    }\n\n    var indexList = [];\n    var start = range.shift();\n    // turn stop into milliseconds to that it's not constantly converted by the while condition\n    var stop = range.shift().valueOf();\n\n    var add = sortDirection === 'desc' ? 'unshift' : 'push';\n\n    while (start <= stop) {\n      var index = start.format(format);\n      var next = (0, _moment2.default)(start).add(1, interval.name);\n      var bound = (0, _moment2.default)(next).subtract(1, 'ms');\n\n      var min = start.valueOf();\n      var max = bound.valueOf();\n      indexList[add]({\n        index: index,\n        min: min,\n        max: max\n      });\n\n      start = next;\n    }\n\n    return indexList;\n  };\n\n  return intervals;\n}",null]}