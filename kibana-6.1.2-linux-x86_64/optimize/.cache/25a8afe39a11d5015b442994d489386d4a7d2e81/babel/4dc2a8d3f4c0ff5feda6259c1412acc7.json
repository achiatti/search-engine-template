{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/point_series/_get_aspects.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/point_series/_get_aspects.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PointSeriesGetAspectsProvider = PointSeriesGetAspectsProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _fake_x_aspect = require('ui/agg_response/point_series/_fake_x_aspect');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction PointSeriesGetAspectsProvider(Private) {\n  var fakeXAspect = Private(_fake_x_aspect.PointSeriesFakeXAxisProvider);\n\n  var map = {\n    segment: 'x',\n    metric: 'y',\n    radius: 'z',\n    width: 'width',\n    group: 'series'\n  };\n\n  function columnToAspect(aspects, col, i) {\n    var schema = col.aggConfig.schema.name;\n\n    var name = map[schema];\n    if (!name) throw new TypeError('unknown schema name \"' + schema + '\"');\n\n    var aspect = {\n      i: i,\n      col: col,\n      agg: col.aggConfig\n    };\n\n    if (!aspects[name]) aspects[name] = [];\n    aspects[name].push(aspect);\n  }\n\n  /**\n   * Identify and group the columns based on the aspect of the pointSeries\n   * they represent.\n   *\n   * @param  {array} columns - the list of columns\n   * @return {object} - an object with a key for each aspect (see map). The values\n   *                    may be undefined, a single aspect, or an array of aspects.\n   */\n  return function getAspects(vis, table) {\n    var aspects = (0, _lodash2.default)(table.columns)\n    // write each column into the aspects under it's group\n    .transform(columnToAspect, {})\n    // unwrap groups that only have one value, and validate groups that have more\n    .transform(function (aspects, group, name) {\n      if (name !== 'y' && group.length > 1) {\n        throw new TypeError('Only multiple metrics are supported in point series');\n      }\n\n      aspects[name] = group.length > 1 ? group : group[0];\n    }).value();\n\n    if (!aspects.x) {\n      aspects.x = fakeXAspect(vis);\n    }\n\n    return aspects;\n  };\n}",null]}