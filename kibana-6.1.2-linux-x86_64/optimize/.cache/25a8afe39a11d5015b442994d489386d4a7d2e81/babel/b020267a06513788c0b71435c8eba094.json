{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/vis_controller.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/vis_controller.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VisController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _vis = require('./components/vis/vis');\n\nvar _control_factory = require('./control/control_factory');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VisController = function () {\n  function VisController(el, vis) {\n    _classCallCheck(this, VisController);\n\n    this.el = el;\n    this.vis = vis;\n    this.controls = [];\n\n    this.queryBarUpdateHandler = this.updateControlsFromKbn.bind(this);\n    this.vis.API.queryFilter.on('update', this.queryBarUpdateHandler);\n  }\n\n  _createClass(VisController, [{\n    key: 'render',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(visData, status) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!status.params) {\n                  _context.next = 7;\n                  break;\n                }\n\n                this.controls = [];\n                _context.next = 4;\n                return this.initControls();\n\n              case 4:\n                this.controls = _context.sent;\n\n                this.drawVis();\n                return _context.abrupt('return');\n\n              case 7:\n                return _context.abrupt('return');\n\n              case 8:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function render(_x, _x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.vis.API.queryFilter.off('update', this.queryBarUpdateHandler);\n      (0, _reactDom.unmountComponentAtNode)(this.el);\n    }\n  }, {\n    key: 'drawVis',\n    value: function drawVis() {\n      (0, _reactDom.render)(_react2.default.createElement(_vis.InputControlVis, {\n        updateFiltersOnChange: this.vis.params.updateFiltersOnChange,\n        controls: this.controls,\n        stageFilter: this.stageFilter.bind(this),\n        submitFilters: this.submitFilters.bind(this),\n        resetControls: this.updateControlsFromKbn.bind(this),\n        clearControls: this.clearControls.bind(this),\n        hasChanges: this.hasChanges.bind(this),\n        hasValues: this.hasValues.bind(this)\n      }), this.el);\n    }\n  }, {\n    key: 'initControls',\n    value: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all(this.vis.params.controls.filter(function (controlParams) {\n                  // ignore controls that do not have indexPattern or field\n                  return controlParams.indexPattern && controlParams.fieldName;\n                }).map(function (controlParams) {\n                  var factory = (0, _control_factory.controlFactory)(controlParams);\n                  return factory(controlParams, _this.vis.API);\n                }));\n\n              case 2:\n                return _context2.abrupt('return', _context2.sent);\n\n              case 3:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initControls() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return initControls;\n    }()\n  }, {\n    key: 'stageFilter',\n    value: function stageFilter(controlIndex, newValue) {\n      this.controls[controlIndex].set(newValue);\n      if (this.vis.params.updateFiltersOnChange) {\n        // submit filters on each control change\n        this.submitFilters();\n      } else {\n        // Do not submit filters, just update vis so controls are updated with latest value\n        this.drawVis();\n      }\n    }\n  }, {\n    key: 'submitFilters',\n    value: function submitFilters() {\n      var _this2 = this;\n\n      var stagedControls = this.controls.filter(function (control) {\n        return control.hasChanged();\n      });\n\n      var newFilters = stagedControls.filter(function (control) {\n        return control.hasKbnFilter();\n      }).map(function (control) {\n        return control.getKbnFilter();\n      });\n\n      stagedControls.forEach(function (control) {\n        // to avoid duplicate filters, remove any old filters for control\n        control.filterManager.findFilters().forEach(function (existingFilter) {\n          _this2.vis.API.queryFilter.removeFilter(existingFilter);\n        });\n      });\n\n      this.vis.API.queryFilter.addFilters(newFilters);\n    }\n  }, {\n    key: 'clearControls',\n    value: function clearControls() {\n      this.controls.forEach(function (control) {\n        control.clear();\n      });\n      this.drawVis();\n    }\n  }, {\n    key: 'updateControlsFromKbn',\n    value: function updateControlsFromKbn() {\n      this.controls.forEach(function (control) {\n        control.reset();\n      });\n      this.drawVis();\n    }\n  }, {\n    key: 'hasChanges',\n    value: function hasChanges() {\n      return this.controls.map(function (control) {\n        return control.hasChanged();\n      }).reduce(function (a, b) {\n        return a || b;\n      });\n    }\n  }, {\n    key: 'hasValues',\n    value: function hasValues() {\n      return this.controls.map(function (control) {\n        return control.hasValue();\n      }).reduce(function (a, b) {\n        return a || b;\n      });\n    }\n  }]);\n\n  return VisController;\n}();\n\nexports.VisController = VisController;",null]}