{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/query_string.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/query_string.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryString = undefined;\n\nvar _utils = require('../../../utils');\n\nvar QueryString = exports.QueryString = {};\n\n/*****\n/*** orignally copied from angular, modified our purposes\n/*****/\n\nfunction tryDecodeURIComponent(value) {\n  try {\n    return decodeURIComponent(value);\n  }\n  // Ignore any invalid uri component\n  catch (e) {} // eslint-disable-line no-empty\n}\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * @returns {Object.<string,boolean|Array>}\n */\nQueryString.decode = function (keyValue) {\n  var obj = {};\n  var keyValueParts = void 0;\n  var key = void 0;\n\n  (keyValue || '').split('&').forEach(function (keyValue) {\n    if (keyValue) {\n      keyValueParts = keyValue.split('=');\n      key = tryDecodeURIComponent(keyValueParts[0]);\n      if (key !== void 0) {\n        var val = keyValueParts[1] !== void 0 ? tryDecodeURIComponent(keyValueParts[1]) : true;\n        if (!obj[key]) {\n          obj[key] = val;\n        } else if (Array.isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key], val];\n        }\n      }\n    }\n  });\n  return obj;\n};\n\n/**\n * Creates a queryString out of an object\n * @param  {Object} obj\n * @return {String}\n */\nQueryString.encode = function (obj) {\n  var parts = [];\n  var keys = Object.keys(obj).sort();\n  keys.forEach(function (key) {\n    var value = obj[key];\n    if (Array.isArray(value)) {\n      value.forEach(function (arrayValue) {\n        parts.push(QueryString.param(key, arrayValue));\n      });\n    } else {\n      parts.push(QueryString.param(key, value));\n    }\n  });\n  return parts.length ? parts.join('&') : '';\n};\n\nQueryString.param = function (key, val) {\n  return (0, _utils.encodeQueryComponent)(key, true) + (val === true ? '' : '=' + (0, _utils.encodeQueryComponent)(val, true));\n};\n\n/**\n * Extracts the query string from a url\n * @param  {String} url\n * @return {Object} - returns an object describing the start/end index of the url in the string. The indices will be\n *                    the same if the url does not have a query string\n */\nQueryString.findInUrl = function (url) {\n  var qsStart = url.indexOf('?');\n  var hashStart = url.lastIndexOf('#');\n\n  if (hashStart === -1) {\n    // out of bounds\n    hashStart = url.length;\n  }\n\n  if (qsStart === -1) {\n    qsStart = hashStart;\n  }\n\n  return {\n    start: qsStart,\n    end: hashStart\n  };\n};\n\nQueryString.replaceParamInUrl = function (url, param, newVal) {\n  var loc = QueryString.findInUrl(url);\n  var parsed = QueryString.decode(url.substring(loc.start + 1, loc.end));\n\n  if (newVal != null) {\n    parsed[param] = newVal;\n  } else {\n    delete parsed[param];\n  }\n\n  var chars = url.split('');\n  chars.splice(loc.start, loc.end - loc.start, '?' + QueryString.encode(parsed));\n  return chars.join('');\n};",null]}