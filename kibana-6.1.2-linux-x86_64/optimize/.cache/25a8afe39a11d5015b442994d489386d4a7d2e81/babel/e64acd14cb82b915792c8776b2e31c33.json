{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/metrics/bucket_avg.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/metrics/bucket_avg.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesMetricsBucketAvgProvider = AggTypesMetricsBucketAvgProvider;\n\nvar _lodash = require('lodash');\n\nvar _metric_agg_type = require('ui/agg_types/metrics/metric_agg_type');\n\nvar _make_nested_label = require('./lib/make_nested_label');\n\nvar _sibling_pipeline_agg_helper = require('./lib/sibling_pipeline_agg_helper');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction AggTypesMetricsBucketAvgProvider(Private) {\n  var MetricAggType = Private(_metric_agg_type.AggTypesMetricsMetricAggTypeProvider);\n  var siblingPipelineHelper = Private(_sibling_pipeline_agg_helper.SiblingPipelineAggHelperProvider);\n\n  return new MetricAggType({\n    name: 'avg_bucket',\n    title: 'Average Bucket',\n    makeLabel: function makeLabel(agg) {\n      return (0, _make_nested_label.makeNestedLabel)(agg, 'overall average');\n    },\n    subtype: siblingPipelineHelper.subtype,\n    params: [].concat(_toConsumableArray(siblingPipelineHelper.params())),\n    getFormat: siblingPipelineHelper.getFormat,\n    getValue: function getValue(agg, bucket) {\n      var customMetric = agg.params.customMetric;\n      var scaleMetrics = customMetric.type && customMetric.type.isScalable();\n\n      var value = bucket[agg.id] && bucket[agg.id].value;\n      if (scaleMetrics) {\n        var aggInfo = agg.params.customBucket.write();\n        value *= (0, _lodash.get)(aggInfo, 'bucketInterval.scale', 1);\n      }\n      return value;\n    }\n  });\n}",null]}