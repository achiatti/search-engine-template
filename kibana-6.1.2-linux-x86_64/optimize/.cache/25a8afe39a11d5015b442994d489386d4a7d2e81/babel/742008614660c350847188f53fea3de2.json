{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nrequire('./agg_params');\n\nrequire('./agg_add');\n\nvar _keyboard_move = require('./keyboard_move');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _agg = require('./agg.html');\n\nvar _agg2 = _interopRequireDefault(_agg);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/visualize').directive('visEditorAgg', function ($compile, $parse, $filter, Private, Notifier) {\n  var notify = new Notifier({\n    location: 'visAggGroup'\n  });\n\n  return {\n    restrict: 'A',\n    template: _agg2.default,\n    require: 'form',\n    link: function link($scope, $el, attrs, kbnForm) {\n      $scope.editorOpen = !!$scope.agg.brandNew;\n\n      $scope.$watch('editorOpen', function (open) {\n        // make sure that all of the form inputs are \"touched\"\n        // so that their errors propogate\n        if (!open) kbnForm.$setTouched();\n      });\n\n      $scope.$watchMulti(['$index', 'group.length'], function () {\n        $scope.aggIsTooLow = calcAggIsTooLow();\n      });\n\n      /**\n      * Describe the aggregation, for display in the collapsed agg header\n      * @return {[type]} [description]\n      */\n      $scope.describe = function () {\n        if (!$scope.agg.type.makeLabel) return '';\n        var label = $scope.agg.type.makeLabel($scope.agg);\n        return label ? label : '';\n      };\n\n      $scope.$on('drag-start', function () {\n        $scope.editorWasOpen = $scope.editorOpen;\n        $scope.editorOpen = false;\n        $scope.$emit('agg-drag-start', $scope.agg);\n      });\n\n      $scope.$on('drag-end', function () {\n        $scope.editorOpen = $scope.editorWasOpen;\n        $scope.$emit('agg-drag-end', $scope.agg);\n      });\n\n      /**\n      * Move aggregations down/up in the priority list by pressing arrow keys.\n      */\n      $scope.onPriorityReorder = function (direction) {\n        var positionOffset = direction === _keyboard_move.Direction.down ? 1 : -1;\n\n        var currentPosition = $scope.group.indexOf($scope.agg);\n        var newPosition = Math.max(0, Math.min(currentPosition + positionOffset, $scope.group.length - 1));\n        _lodash2.default.move($scope.group, currentPosition, newPosition);\n        $scope.$emit('agg-reorder');\n      };\n\n      $scope.remove = function (agg) {\n        var aggs = $scope.vis.aggs;\n\n        var index = aggs.indexOf(agg);\n        if (index === -1) return notify.log('already removed');\n\n        aggs.splice(index, 1);\n      };\n\n      $scope.canRemove = function (aggregation) {\n        var metricCount = _lodash2.default.reduce($scope.group, function (count, agg) {\n          return agg.schema.name === aggregation.schema.name ? ++count : count;\n        }, 0);\n\n        // make sure the the number of these aggs is above the min\n        return metricCount > aggregation.schema.min;\n      };\n\n      function calcAggIsTooLow() {\n        if (!$scope.agg.schema.mustBeFirst) {\n          return false;\n        }\n\n        var firstDifferentSchema = _lodash2.default.findIndex($scope.group, function (agg) {\n          return agg.schema !== $scope.agg.schema;\n        });\n\n        if (firstDifferentSchema === -1) {\n          return false;\n        }\n\n        return $scope.$index > firstDifferentSchema;\n      }\n    }\n  };\n});",null]}