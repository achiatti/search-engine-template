{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/share/directives/share.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/share/directives/share.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _url = require('url');\n\nvar _state_hashing = require('ui/state_management/state_hashing');\n\nvar _notifier = require('ui/notify/notifier');\n\nvar _url_shortener = require('../lib/url_shortener');\n\nvar _modules = require('ui/modules');\n\nvar _share = require('ui/share/views/share.html');\n\nvar _share2 = _interopRequireDefault(_share);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = _modules.uiModules.get('kibana');\n\napp.directive('share', function (Private) {\n  var getUnhashableStates = Private(_state_hashing.getUnhashableStatesProvider);\n  var urlShortener = Private(_url_shortener.UrlShortenerProvider);\n\n  return {\n    restrict: 'E',\n    scope: {\n      objectType: '@',\n      objectId: '@',\n      allowEmbed: '@'\n    },\n    template: _share2.default,\n    controllerAs: 'share',\n    controller: function controller($scope, $document, $location) {\n      var _this = this;\n\n      if ($scope.allowEmbed !== 'false' && $scope.allowEmbed !== undefined) {\n        throw new Error('allowEmbed must be \"false\" or undefined');\n      }\n\n      // Default to allowing an embedded IFRAME, unless it's explicitly set to false.\n      this.allowEmbed = $scope.allowEmbed === 'false' ? false : true;\n      this.objectType = $scope.objectType;\n\n      function getOriginalUrl() {\n        // If there is no objectId, then it isn't saved, so it has no original URL.\n        if ($scope.objectId === undefined || $scope.objectId === '') {\n          return;\n        }\n\n        var url = $location.absUrl();\n        // Replace hashes with original RISON values.\n        var unhashedUrl = (0, _state_hashing.unhashUrl)(url, getUnhashableStates());\n\n        var parsedUrl = (0, _url.parse)(unhashedUrl);\n        // Get the Angular route, after the hash, and remove the #.\n        var parsedAppUrl = (0, _url.parse)(parsedUrl.hash.slice(1), true);\n\n        return (0, _url.format)({\n          protocol: parsedUrl.protocol,\n          auth: parsedUrl.auth,\n          host: parsedUrl.host,\n          pathname: parsedUrl.pathname,\n          hash: (0, _url.format)({\n            pathname: parsedAppUrl.pathname,\n            query: {\n              // Add global state to the URL so that the iframe doesn't just show the time range\n              // default.\n              _g: parsedAppUrl.query._g\n            }\n          })\n        });\n      }\n\n      function getSnapshotUrl() {\n        var url = $location.absUrl();\n        // Replace hashes with original RISON values.\n        return (0, _state_hashing.unhashUrl)(url, getUnhashableStates());\n      }\n\n      this.makeUrlEmbeddable = function (url) {\n        var embedQueryParam = '?embed=true';\n        var urlHasQueryString = url.indexOf('?') !== -1;\n        if (urlHasQueryString) {\n          return url.replace('?', embedQueryParam + '&');\n        }\n        return '' + url + embedQueryParam;\n      };\n\n      this.makeIframeTag = function (url) {\n        if (!url) return;\n\n        var embeddableUrl = _this.makeUrlEmbeddable(url);\n        return '<iframe src=\"' + embeddableUrl + '\" height=\"600\" width=\"800\"></iframe>';\n      };\n\n      this.urls = {\n        original: undefined,\n        snapshot: undefined,\n        shortSnapshot: undefined,\n        shortSnapshotIframe: undefined\n      };\n\n      this.urlFlags = {\n        shortSnapshot: false,\n        shortSnapshotIframe: false\n      };\n\n      var updateUrls = function updateUrls() {\n        _this.urls = {\n          original: getOriginalUrl(),\n          snapshot: getSnapshotUrl(),\n          shortSnapshot: undefined,\n          shortSnapshotIframe: undefined\n        };\n\n        // Whenever the URL changes, reset the Short URLs to regular URLs.\n        _this.urlFlags = {\n          shortSnapshot: false,\n          shortSnapshotIframe: false\n        };\n      };\n\n      // When the URL changes, update the links in the UI.\n      $scope.$watch(function () {\n        return $location.absUrl();\n      }, function () {\n        updateUrls();\n      });\n\n      this.toggleShortSnapshotUrl = function () {\n        _this.urlFlags.shortSnapshot = !_this.urlFlags.shortSnapshot;\n\n        if (_this.urlFlags.shortSnapshot) {\n          urlShortener.shortenUrl(_this.urls.snapshot).then(function (shortUrl) {\n            _this.urls.shortSnapshot = shortUrl;\n          });\n        }\n      };\n\n      this.toggleShortSnapshotIframeUrl = function () {\n        _this.urlFlags.shortSnapshotIframe = !_this.urlFlags.shortSnapshotIframe;\n\n        if (_this.urlFlags.shortSnapshotIframe) {\n          var snapshotIframe = _this.makeUrlEmbeddable(_this.urls.snapshot);\n          urlShortener.shortenUrl(snapshotIframe).then(function (shortUrl) {\n            _this.urls.shortSnapshotIframe = shortUrl;\n          });\n        }\n      };\n\n      this.copyToClipboard = function (selector) {\n        var notify = new _notifier.Notifier({\n          location: 'Share ' + $scope.objectType\n        });\n\n        // Select the text to be copied. If the copy fails, the user can easily copy it manually.\n        var copyTextarea = $document.find(selector)[0];\n        copyTextarea.select();\n\n        try {\n          var isCopied = document.execCommand('copy');\n          if (isCopied) {\n            notify.info('URL copied to clipboard.');\n          } else {\n            notify.info('URL selected. Press Ctrl+C to copy.');\n          }\n        } catch (err) {\n          notify.info('URL selected. Press Ctrl+C to copy.');\n        }\n      };\n    }\n  };\n});",null]}