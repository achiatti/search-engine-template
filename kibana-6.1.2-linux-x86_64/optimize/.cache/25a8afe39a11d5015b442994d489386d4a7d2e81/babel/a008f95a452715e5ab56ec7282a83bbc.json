{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_hashing/unhash_url.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_hashing/unhash_url.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.unhashUrl = unhashUrl;\n\nvar _url = require('url');\n\nvar _encodeUriQuery = require('encode-uri-query');\n\nvar _encodeUriQuery2 = _interopRequireDefault(_encodeUriQuery);\n\nvar _querystring = require('querystring');\n\nvar _unhash_query_string = require('./unhash_query_string');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction unhashUrl(urlWithHashes, states) {\n  if (!urlWithHashes) return urlWithHashes;\n\n  var urlWithHashesParsed = (0, _url.parse)(urlWithHashes, true);\n  if (!urlWithHashesParsed.hostname) {\n    // passing a url like \"localhost:5601\" or \"/app/kibana\" should be prevented\n    throw new TypeError('Only absolute urls should be passed to `unhashUrl()`. ' + 'Unable to detect url hostname.');\n  }\n\n  if (!urlWithHashesParsed.hash) return urlWithHashes;\n\n  var appUrl = urlWithHashesParsed.hash.slice(1); // trim the #\n  if (!appUrl) return urlWithHashes;\n\n  var appUrlParsed = (0, _url.parse)(urlWithHashesParsed.hash.slice(1), true);\n  if (!appUrlParsed.query) return urlWithHashes;\n\n  var appQueryWithoutHashes = (0, _unhash_query_string.unhashQueryString)(appUrlParsed.query || {}, states);\n\n  // encodeUriQuery implements the less-aggressive encoding done naturally by\n  // the browser. We use it to generate the same urls the browser would\n  var appQueryStringWithoutHashes = (0, _querystring.stringify)(appQueryWithoutHashes, null, null, {\n    encodeURIComponent: _encodeUriQuery2.default\n  });\n\n  return (0, _url.format)(_extends({}, urlWithHashesParsed, {\n    hash: (0, _url.format)({\n      pathname: appUrlParsed.pathname,\n      search: appQueryStringWithoutHashes\n    })\n  }));\n}",null]}