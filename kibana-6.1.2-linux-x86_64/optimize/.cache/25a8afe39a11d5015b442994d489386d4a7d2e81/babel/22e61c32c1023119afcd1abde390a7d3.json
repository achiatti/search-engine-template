{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/scripted_fields_table/scripted_fields_table.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/scripted_fields_table/scripted_fields_table.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/paginated_table');\n\nvar _field_controls = require('../field_controls.html');\n\nvar _field_controls2 = _interopRequireDefault(_field_controls);\n\nvar _date_scripts = require('./date_scripts');\n\nvar _modules = require('ui/modules');\n\nvar _scripted_fields_table = require('./scripted_fields_table.html');\n\nvar _scripted_fields_table2 = _interopRequireDefault(_scripted_fields_table);\n\nvar _scripting_languages = require('ui/scripting_languages');\n\nvar _documentation_links = require('ui/documentation_links/documentation_links');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('apps/management').directive('scriptedFieldsTable', function (kbnUrl, Notifier, $filter, confirmModal) {\n  var rowScopes = []; // track row scopes, so they can be destroyed as needed\n  var filter = $filter('filter');\n\n  var notify = new Notifier();\n\n  return {\n    restrict: 'E',\n    template: _scripted_fields_table2.default,\n    scope: true,\n    link: function link($scope) {\n\n      var fieldCreatorPath = '/management/kibana/indices/{{ indexPattern }}/scriptedField';\n      var fieldEditorPath = fieldCreatorPath + '/{{ fieldName }}';\n\n      $scope.docLinks = _documentation_links.documentationLinks.scriptedFields;\n      $scope.perPage = 25;\n      $scope.columns = [{ title: 'name' }, { title: 'lang' }, { title: 'script' }, { title: 'format' }, { title: 'controls', sortable: false }];\n\n      $scope.$watchMulti(['[]indexPattern.fields', 'fieldFilter', 'scriptedFieldLanguageFilter'], refreshRows);\n\n      function refreshRows() {\n        _lodash2.default.invoke(rowScopes, '$destroy');\n        rowScopes.length = 0;\n\n        var fields = filter($scope.indexPattern.getScriptedFields(), {\n          name: $scope.fieldFilter,\n          lang: $scope.scriptedFieldLanguageFilter\n        });\n        _lodash2.default.find($scope.editSections, { index: 'scriptedFields' }).count = fields.length; // Update the tab count\n\n        $scope.rows = fields.map(function (field) {\n          var rowScope = $scope.$new();\n          rowScope.field = field;\n          rowScopes.push(rowScope);\n\n          return [_lodash2.default.escape(field.name), {\n            markup: field.lang,\n            attr: {\n              'data-test-subj': 'scriptedFieldLang'\n            }\n          }, _lodash2.default.escape(field.script), _lodash2.default.get($scope.indexPattern, ['fieldFormatMap', field.name, 'type', 'title']), {\n            markup: _field_controls2.default,\n            scope: rowScope\n          }];\n        });\n      }\n\n      $scope.addDateScripts = function () {\n        var conflictFields = [];\n        var fieldsAdded = 0;\n        _lodash2.default.each((0, _date_scripts.dateScripts)($scope.indexPattern), function (script, field) {\n          try {\n            $scope.indexPattern.addScriptedField(field, script, 'number');\n            fieldsAdded++;\n          } catch (e) {\n            conflictFields.push(field);\n          }\n        });\n\n        if (fieldsAdded > 0) {\n          notify.info(fieldsAdded + ' script fields created');\n        }\n\n        if (conflictFields.length > 0) {\n          notify.info('Not adding ' + conflictFields.length + ' duplicate fields: ' + conflictFields.join(', '));\n        }\n      };\n\n      $scope.create = function () {\n        var params = {\n          indexPattern: $scope.indexPattern.id\n        };\n\n        kbnUrl.change(fieldCreatorPath, params);\n      };\n\n      $scope.edit = function (field) {\n        var params = {\n          indexPattern: $scope.indexPattern.id,\n          fieldName: field.name\n        };\n\n        kbnUrl.change(fieldEditorPath, params);\n      };\n\n      $scope.remove = function (field) {\n        var confirmModalOptions = {\n          confirmButtonText: 'Delete field',\n          onConfirm: function onConfirm() {\n            $scope.indexPattern.removeScriptedField(field.name);\n          }\n        };\n        confirmModal('Are you sure want to delete ' + field.name + '? This action is irreversible!', confirmModalOptions);\n      };\n\n      function getLanguagesInUse() {\n        var fields = $scope.indexPattern.getScriptedFields();\n        return _lodash2.default.uniq(_lodash2.default.map(fields, 'lang'));\n      }\n\n      $scope.getDeprecatedLanguagesInUse = function () {\n        return _lodash2.default.intersection(getLanguagesInUse(), (0, _scripting_languages.getDeprecatedScriptingLanguages)());\n      };\n\n      $scope.getUnsupportedLanguagesInUse = function () {\n        return _lodash2.default.difference(getLanguagesInUse(), _lodash2.default.union((0, _scripting_languages.getSupportedScriptingLanguages)(), (0, _scripting_languages.getDeprecatedScriptingLanguages)()));\n      };\n    }\n  };\n});",null]}