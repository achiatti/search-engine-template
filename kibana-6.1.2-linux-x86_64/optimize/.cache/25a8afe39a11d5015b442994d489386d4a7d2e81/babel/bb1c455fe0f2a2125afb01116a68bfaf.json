{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/render_directive/apply_scope_bindings.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/render_directive/apply_scope_bindings.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.ApplyScopeBindingsProvider = ApplyScopeBindingsProvider;\n\nvar _lodash = require('lodash');\n\nrequire('ui/bind');\n\nvar bindingRE = /^(=|=\\?|&|@)([a-zA-Z0-9_$]+)?$/;\n\nfunction ApplyScopeBindingsProvider($parse) {\n  return function (bindings, $scope, $attrs) {\n    (0, _lodash.forOwn)(bindings, function (binding, local) {\n      if (!bindingRE.test(binding)) {\n        throw new Error('Invalid scope binding \"' + binding + '\". Expected it to match ' + bindingRE);\n      }\n\n      var _binding$match = binding.match(bindingRE),\n          _binding$match2 = _slicedToArray(_binding$match, 3),\n          type = _binding$match2[1],\n          _binding$match2$ = _binding$match2[2],\n          attribute = _binding$match2$ === undefined ? local : _binding$match2$;\n\n      var attr = $attrs[attribute];\n      switch (type) {\n        case '=':\n          $scope.$bind(local, attr);\n          break;\n        case '=?':\n          throw new Error('<render-directive> does not currently support optional two-way bindings.');\n          break;\n        case '&':\n          if (attr) {\n            var getter = $parse(attr);\n            $scope[local] = function () {\n              return getter($scope.$parent);\n            };\n          } else {\n            $scope[local] = _lodash.noop;\n          }\n          break;\n        case '@':\n          $scope[local] = attr;\n          $attrs.$observe(attribute, function (v) {\n            return $scope[local] = v;\n          });\n          break;\n      }\n    });\n  };\n}",null]}