{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/source_filters_table/source_filters_table.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/source_filters_table/source_filters_table.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _notifier = require('ui/notify/notifier');\n\nvar _field_wildcard = require('ui/field_wildcard');\n\nvar _controls = require('./controls.html');\n\nvar _controls2 = _interopRequireDefault(_controls);\n\nvar _filter = require('./filter.html');\n\nvar _filter2 = _interopRequireDefault(_filter);\n\nvar _source_filters_table = require('./source_filters_table.html');\n\nvar _source_filters_table2 = _interopRequireDefault(_source_filters_table);\n\nrequire('./source_filters_table.less');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar notify = new _notifier.Notifier();\n\n_modules.uiModules.get('kibana').directive('sourceFiltersTable', function (Private, $filter, confirmModal) {\n  var angularFilter = $filter('filter');\n\n  var _Private = Private(_field_wildcard.FieldWildcardProvider),\n      fieldWildcardMatcher = _Private.fieldWildcardMatcher;\n\n  var rowScopes = []; // track row scopes, so they can be destroyed as needed\n\n  return {\n    restrict: 'E',\n    scope: {\n      indexPattern: '='\n    },\n    template: _source_filters_table2.default,\n    controllerAs: 'sourceFilters',\n    controller: function () {\n      function FieldFiltersController($scope) {\n        _classCallCheck(this, FieldFiltersController);\n\n        if (!$scope.indexPattern) {\n          throw new Error('index pattern is required');\n        }\n\n        $scope.perPage = 25;\n        $scope.columns = [{\n          title: 'filter'\n        }, {\n          title: 'matches',\n          sortable: false,\n          info: 'The source fields that match the filter.'\n        }, {\n          title: 'controls',\n          sortable: false\n        }];\n\n        this.$scope = $scope;\n        this.saving = false;\n        this.editing = null;\n        this.newValue = null;\n        this.placeHolder = 'source filter, accepts wildcards (e.g., `user*` to filter fields starting with \\'user\\')';\n\n        $scope.$watchMulti(['[]indexPattern.sourceFilters', '$parent.fieldFilter'], function () {\n          (0, _lodash.invoke)(rowScopes, '$destroy');\n          rowScopes.length = 0;\n\n          if ($scope.indexPattern.sourceFilters) {\n            $scope.rows = [];\n            (0, _lodash.each)($scope.indexPattern.sourceFilters, function (filter) {\n              var matcher = fieldWildcardMatcher([filter.value]);\n              // compute which fields match a filter\n              var matches = $scope.indexPattern.getNonScriptedFields().map(function (f) {\n                return f.name;\n              }).filter(matcher).sort();\n              if ($scope.$parent.fieldFilter && !angularFilter(matches, $scope.$parent.fieldFilter).length) {\n                return;\n              }\n              // compute the rows\n              var rowScope = $scope.$new();\n              rowScope.filter = filter;\n              rowScopes.push(rowScope);\n              $scope.rows.push([{\n                markup: _filter2.default,\n                scope: rowScope\n              }, (0, _lodash.size)(matches) ? (0, _lodash.escape)(matches.join(', ')) : '<em>The source filter doesn\\'t match any known fields.</em>', {\n                markup: _controls2.default,\n                scope: rowScope\n              }]);\n            });\n            // Update the tab count\n            (0, _lodash.find)($scope.$parent.editSections, { index: 'sourceFilters' }).count = $scope.rows.length;\n          }\n        });\n      }\n\n      _createClass(FieldFiltersController, [{\n        key: 'all',\n        value: function all() {\n          return this.$scope.indexPattern.sourceFilters || [];\n        }\n      }, {\n        key: 'delete',\n        value: function _delete(filter) {\n          var _this = this;\n\n          var doDelete = function doDelete() {\n            if (_this.editing === filter) {\n              _this.editing = null;\n            }\n\n            _this.$scope.indexPattern.sourceFilters = (0, _lodash.without)(_this.all(), filter);\n            return _this.save();\n          };\n\n          var confirmModalOptions = {\n            confirmButtonText: 'Delete filter',\n            onConfirm: doDelete\n          };\n          confirmModal('Are you sure want to delete this filter?', confirmModalOptions);\n        }\n      }, {\n        key: 'create',\n        value: function create() {\n          var value = this.newValue;\n          this.newValue = null;\n          this.$scope.indexPattern.sourceFilters = [].concat(_toConsumableArray(this.all()), [{ value: value }]);\n          return this.save();\n        }\n      }, {\n        key: 'save',\n        value: function save() {\n          var _this2 = this;\n\n          this.saving = true;\n          this.$scope.indexPattern.save().then(function () {\n            return _this2.editing = null;\n          }).catch(notify.error).finally(function () {\n            return _this2.saving = false;\n          });\n        }\n      }]);\n\n      return FieldFiltersController;\n    }()\n  };\n});",null]}