{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/pretty_duration.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/directives/pretty_duration.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nrequire('ui/timepicker/quick_ranges');\n\nrequire('ui/timepicker/time_units');\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('prettyDuration', function (config, quickRanges, timeUnits) {\n  return {\n    restrict: 'E',\n    scope: {\n      from: '=',\n      to: '='\n    },\n    link: function link($scope, $elem) {\n      var dateFormat = config.get('dateFormat');\n\n      var lookupByRange = {};\n      _lodash2.default.each(quickRanges, function (frame) {\n        lookupByRange[frame.from + ' to ' + frame.to] = frame;\n      });\n\n      function setText(text) {\n        $elem.text(text);\n        $elem.attr('aria-label', 'Current time range is ' + text);\n      }\n\n      function stringify() {\n        var text = void 0;\n        // If both parts are date math, try to look up a reasonable string\n        if ($scope.from && $scope.to && !_moment2.default.isMoment($scope.from) && !_moment2.default.isMoment($scope.to)) {\n          var tryLookup = lookupByRange[$scope.from.toString() + ' to ' + $scope.to.toString()];\n          if (tryLookup) {\n            setText(tryLookup.display);\n          } else {\n            var fromParts = $scope.from.toString().split('-');\n            if ($scope.to.toString() === 'now' && fromParts[0] === 'now' && fromParts[1]) {\n              var rounded = fromParts[1].split('/');\n              text = 'Last ' + rounded[0];\n              if (rounded[1]) {\n                text = text + ' rounded to the ' + timeUnits[rounded[1]];\n              }\n              setText(text);\n            } else {\n              cantLookup();\n            }\n          }\n          // If at least one part is a moment, try to make pretty strings by parsing date math\n        } else {\n          cantLookup();\n        }\n      }\n\n      function cantLookup() {\n        var display = {};\n        _lodash2.default.each(['from', 'to'], function (time) {\n          if ((0, _moment2.default)($scope[time]).isValid()) {\n            display[time] = (0, _moment2.default)($scope[time]).format(dateFormat);\n          } else {\n            if ($scope[time] === 'now') {\n              display[time] = 'now';\n            } else {\n              var tryParse = _datemath2.default.parse($scope[time], time === 'to' ? true : false);\n              display[time] = _moment2.default.isMoment(tryParse) ? '~ ' + tryParse.fromNow() : $scope[time];\n            }\n          }\n        });\n        setText(display.from + ' to ' + display.to);\n      }\n\n      $scope.$watch('from', stringify);\n      $scope.$watch('to', stringify);\n    }\n  };\n});",null]}