{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_manager/lib/phrase.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/filter_manager/lib/phrase.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildPhraseFilter = buildPhraseFilter;\nexports.getPhraseScript = getPhraseScript;\nexports.buildInlineScriptForPhraseFilter = buildInlineScriptForPhraseFilter;\nfunction buildPhraseFilter(field, value, indexPattern) {\n  var filter = { meta: { index: indexPattern.id } };\n\n  if (field.scripted) {\n    filter.script = getPhraseScript(field, value);\n    filter.meta.field = field.name;\n  } else {\n    filter.query = { match: {} };\n    filter.query.match[field.name] = {\n      query: value,\n      type: 'phrase'\n    };\n  }\n  return filter;\n}\n\nfunction getPhraseScript(field, value) {\n  var convertedValue = getConvertedValueForField(field, value);\n  var script = buildInlineScriptForPhraseFilter(field);\n\n  return {\n    script: {\n      inline: script,\n      lang: field.lang,\n      params: {\n        value: convertedValue\n      }\n    }\n  };\n}\n\n// See https://github.com/elastic/elasticsearch/issues/20941 and https://github.com/elastic/kibana/issues/8677\n// and https://github.com/elastic/elasticsearch/pull/22201\n// for the reason behind this change. Aggs now return boolean buckets with a key of 1 or 0.\nfunction getConvertedValueForField(field, value) {\n  if (typeof value !== 'boolean' && field.type === 'boolean') {\n    if (value !== 1 && value !== 0) {\n      throw new Error('Boolean scripted fields must return true or false');\n    }\n    return value === 1 ? true : false;\n  }\n  return value;\n}\n\n/**\n * Takes a scripted field and returns an inline script appropriate for use in a script query.\n * Handles lucene expression and Painless scripts. Other langs aren't guaranteed to generate valid\n * scripts.\n *\n * @param {object} scriptedField A Field object representing a scripted field\n * @returns {string} The inline script string\n */\nfunction buildInlineScriptForPhraseFilter(scriptedField) {\n  // We must wrap painless scripts in a lambda in case they're more than a simple expression\n  if (scriptedField.lang === 'painless') {\n    return 'boolean compare(Supplier s, def v) {return s.get() == v;}' + ('compare(() -> { ' + scriptedField.script + ' }, params.value);');\n  } else {\n    return '(' + scriptedField.script + ') == value';\n  }\n}",null]}