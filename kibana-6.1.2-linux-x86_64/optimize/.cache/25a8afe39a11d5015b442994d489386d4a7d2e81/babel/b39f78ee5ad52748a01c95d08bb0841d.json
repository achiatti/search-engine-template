{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/scripted_field_editor/scripted_field_editor.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/management/sections/indices/edit_index_pattern/scripted_field_editor/scripted_field_editor.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nrequire('ui/field_editor');\n\nvar _field = require('ui/index_patterns/_field');\n\nvar _url = require('ui/url');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _scripted_field_editor = require('./scripted_field_editor.html');\n\nvar _scripted_field_editor2 = _interopRequireDefault(_scripted_field_editor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.when('/management/kibana/indices/:indexPatternId/field/:fieldName*', { mode: 'edit' }).when('/management/kibana/indices/:indexPatternId/create-field/', { mode: 'create' }).defaults(/management\\/kibana\\/indices\\/[^\\/]+\\/(field|create-field)(\\/|$)/, {\n  template: _scripted_field_editor2.default,\n  mapBreadcrumbs: function mapBreadcrumbs($route, breadcrumbs) {\n    var indexPattern = $route.current.locals.indexPattern;\n\n    return breadcrumbs.map(function (crumb) {\n      if (crumb.id !== indexPattern.id) {\n        return crumb;\n      }\n\n      return _extends({}, crumb, {\n        display: indexPattern.title\n      });\n    });\n  },\n\n  resolve: {\n    indexPattern: function indexPattern($route, courier) {\n      return courier.indexPatterns.get($route.current.params.indexPatternId).catch(courier.redirectWhenMissing('/management/kibana/indices'));\n    }\n  },\n  controllerAs: 'fieldSettings',\n  controller: function FieldEditorPageController($route, Private, Notifier, docTitle) {\n    var Field = Private(_field.IndexPatternsFieldProvider);\n    var notify = new Notifier({ location: 'Field Editor' });\n    var kbnUrl = Private(_url.KbnUrlProvider);\n\n    this.mode = $route.current.mode;\n    this.indexPattern = $route.current.locals.indexPattern;\n\n    if (this.mode === 'edit') {\n      var fieldName = $route.current.params.fieldName;\n      this.field = this.indexPattern.fields.byName[fieldName];\n\n      if (!this.field) {\n        notify.error(this.indexPattern + ' does not have a \"' + fieldName + '\" field.');\n        kbnUrl.redirectToRoute(this.indexPattern, 'edit');\n        return;\n      }\n    } else if (this.mode === 'create') {\n      this.field = new Field(this.indexPattern, {\n        scripted: true,\n        type: 'number'\n      });\n    } else {\n      throw new Error('unknown fieldSettings mode ' + this.mode);\n    }\n\n    docTitle.change([this.field.name || 'New Scripted Field', this.indexPattern.title]);\n    this.goBack = function () {\n      kbnUrl.changeToRoute(this.indexPattern, 'edit');\n    };\n  }\n});",null]}