{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/index.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/index.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesIndexProvider = AggTypesIndexProvider;\n\nvar _indexed_array = require('ui/indexed_array');\n\nrequire('ui/agg_types/agg_params');\n\nvar _count = require('ui/agg_types/metrics/count');\n\nvar _avg = require('ui/agg_types/metrics/avg');\n\nvar _sum = require('ui/agg_types/metrics/sum');\n\nvar _median = require('ui/agg_types/metrics/median');\n\nvar _min = require('ui/agg_types/metrics/min');\n\nvar _max = require('ui/agg_types/metrics/max');\n\nvar _top_hit = require('ui/agg_types/metrics/top_hit');\n\nvar _std_deviation = require('ui/agg_types/metrics/std_deviation');\n\nvar _cardinality = require('ui/agg_types/metrics/cardinality');\n\nvar _percentiles = require('ui/agg_types/metrics/percentiles');\n\nvar _geo_bounds = require('ui/agg_types/metrics/geo_bounds');\n\nvar _geo_centroid = require('ui/agg_types/metrics/geo_centroid');\n\nvar _percentile_ranks = require('ui/agg_types/metrics/percentile_ranks');\n\nvar _derivative = require('ui/agg_types/metrics/derivative');\n\nvar _cumulative_sum = require('ui/agg_types/metrics/cumulative_sum');\n\nvar _moving_avg = require('ui/agg_types/metrics/moving_avg');\n\nvar _serial_diff = require('ui/agg_types/metrics/serial_diff');\n\nvar _date_histogram = require('ui/agg_types/buckets/date_histogram');\n\nvar _histogram = require('ui/agg_types/buckets/histogram');\n\nvar _range = require('ui/agg_types/buckets/range');\n\nvar _date_range = require('ui/agg_types/buckets/date_range');\n\nvar _ip_range = require('ui/agg_types/buckets/ip_range');\n\nvar _terms = require('ui/agg_types/buckets/terms');\n\nvar _filter = require('ui/agg_types/buckets/filter');\n\nvar _filters = require('ui/agg_types/buckets/filters');\n\nvar _significant_terms = require('ui/agg_types/buckets/significant_terms');\n\nvar _geo_hash = require('ui/agg_types/buckets/geo_hash');\n\nvar _bucket_sum = require('ui/agg_types/metrics/bucket_sum');\n\nvar _bucket_avg = require('ui/agg_types/metrics/bucket_avg');\n\nvar _bucket_min = require('ui/agg_types/metrics/bucket_min');\n\nvar _bucket_max = require('ui/agg_types/metrics/bucket_max');\n\nrequire('ui/directives/validate_agg');\n\nfunction AggTypesIndexProvider(Private) {\n\n  var aggs = {\n    metrics: [Private(_count.AggTypesMetricsCountProvider), Private(_avg.AggTypesMetricsAvgProvider), Private(_sum.AggTypesMetricsSumProvider), Private(_median.AggTypesMetricsMedianProvider), Private(_min.AggTypesMetricsMinProvider), Private(_max.AggTypesMetricsMaxProvider), Private(_std_deviation.AggTypesMetricsStdDeviationProvider), Private(_cardinality.AggTypesMetricsCardinalityProvider), Private(_percentiles.AggTypesMetricsPercentilesProvider), Private(_percentile_ranks.AggTypesMetricsPercentileRanksProvider), Private(_top_hit.AggTypesMetricsTopHitProvider), Private(_derivative.AggTypesMetricsDerivativeProvider), Private(_cumulative_sum.AggTypesMetricsCumulativeSumProvider), Private(_moving_avg.AggTypesMetricsMovingAvgProvider), Private(_serial_diff.AggTypesMetricsSerialDiffProvider), Private(_bucket_avg.AggTypesMetricsBucketAvgProvider), Private(_bucket_sum.AggTypesMetricsBucketSumProvider), Private(_bucket_min.AggTypesMetricsBucketMinProvider), Private(_bucket_max.AggTypesMetricsBucketMaxProvider), Private(_geo_bounds.AggTypesMetricsGeoBoundsProvider), Private(_geo_centroid.AggTypesMetricsGeoCentroidProvider)],\n    buckets: [Private(_date_histogram.AggTypesBucketsDateHistogramProvider), Private(_histogram.AggTypesBucketsHistogramProvider), Private(_range.AggTypesBucketsRangeProvider), Private(_date_range.AggTypesBucketsDateRangeProvider), Private(_ip_range.AggTypesBucketsIpRangeProvider), Private(_terms.AggTypesBucketsTermsProvider), Private(_filter.AggTypesBucketsFilterProvider), Private(_filters.AggTypesBucketsFiltersProvider), Private(_significant_terms.AggTypesBucketsSignificantTermsProvider), Private(_geo_hash.AggTypesBucketsGeoHashProvider)]\n  };\n\n  Object.keys(aggs).forEach(function (type) {\n    aggs[type].forEach(function (agg) {\n      agg.type = type;\n    });\n  });\n\n  /**\n   * IndexedArray of Aggregation Types.\n   *\n   * These types form two groups, metric and buckets.\n   *\n   * @module agg_types\n   * @type {IndexedArray}\n   */\n  return new _indexed_array.IndexedArray({\n\n    /**\n     * @type {Array}\n     */\n    index: ['name'],\n\n    /**\n     * [group description]\n     * @type {Array}\n     */\n    group: ['type'],\n    initialSet: aggs.metrics.concat(aggs.buckets)\n  });\n}",null]}