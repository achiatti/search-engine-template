{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/autocomplete/body_completer.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/console/public/src/autocomplete/body_completer.js","mtime":1515552026000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.globalsOnlyAutocompleteComponents = globalsOnlyAutocompleteComponents;\nexports.compileBodyDescription = compileBodyDescription;\nvar _ = require('lodash');\nvar engine = require('./engine');\n\nfunction CompilingContext(endpoint_id, parametrizedComponentFactories) {\n  this.parametrizedComponentFactories = parametrizedComponentFactories;\n  this.endpoint_id = endpoint_id;\n}\n\nfunction getTemplate(description) {\n  if (description.__template) {\n    return description.__template;\n  } else if (description.__one_of) {\n    return getTemplate(description.__one_of[0]);\n  } else if (description.__any_of) {\n    return [];\n  } else if (description.__scope_link) {\n    // assume an object for now.\n    return {};\n  } else if (Array.isArray(description)) {\n    if (description.length == 1) {\n      if (_.isObject(description[0])) {\n        // shortcut to save typing\n        var innerTemplate = getTemplate(description[0]);\n\n        return innerTemplate != null ? [innerTemplate] : [];\n      }\n    }\n    return [];\n  } else if (_.isObject(description)) {\n    return {};\n  } else if (_.isString(description) && !/^\\{.*\\}$/.test(description)) {\n    return description;\n  } else {\n    return description;\n  }\n}\n\nfunction getOptions(description) {\n  var options = {};\n  var template = getTemplate(description);\n\n  if (!_.isUndefined(template)) {\n    options.template = template;\n  }\n  return options;\n}\n\n/**\n * @param description a json dict describing the endpoint\n * @param compilingContext\n */\nfunction compileDescription(description, compilingContext) {\n  if (Array.isArray(description)) {\n    return [compileList(description, compilingContext)];\n  } else if (_.isObject(description)) {\n    // test for objects list as arrays are also objects\n    if (description.__scope_link) {\n      return [new ScopeResolver(description.__scope_link, compilingContext)];\n    }\n    if (description.__any_of) {\n      return [compileList(description.__any_of, compilingContext)];\n    }\n    if (description.__one_of) {\n      return _.flatten(_.map(description.__one_of, function (d) {\n        return compileDescription(d, compilingContext);\n      }));\n    }\n    var obj = compileObject(description, compilingContext);\n    if (description.__condition) {\n      return [compileCondition(description.__condition, obj, compilingContext)];\n    } else {\n      return [obj];\n    }\n  } else if (_.isString(description) && /^\\{.*\\}$/.test(description)) {\n    return [compileParametrizedValue(description, compilingContext)];\n  } else {\n    return [new engine.ConstantComponent(description)];\n  }\n}\n\nfunction compileParametrizedValue(value, compilingContext, template) {\n  value = value.substr(1, value.length - 2).toLowerCase();\n  var component = compilingContext.parametrizedComponentFactories[value];\n  if (!component) {\n    throw new Error(\"no factory found for '\" + value + \"'\");\n  }\n  component = component(value, null, template);\n  if (!_.isUndefined(template)) {\n    component = engine.wrapComponentWithDefaults(component, { template: template });\n  }\n  return component;\n}\n\nfunction compileObject(objDescription, compilingContext) {\n  var objectC = new engine.ConstantComponent(\"{\");\n  var constants = [],\n      patterns = [];\n  _.each(objDescription, function (desc, key) {\n    if (key.indexOf(\"__\") == 0) {\n      // meta key\n      return;\n    }\n\n    var options = getOptions(desc),\n        component;\n    if (/^\\{.*\\}$/.test(key)) {\n      component = compileParametrizedValue(key, compilingContext, options.template);\n      patterns.push(component);\n    } else if (key === \"*\") {\n      component = new engine.SharedComponent(key);\n      patterns.push(component);\n    } else {\n      options.name = key;\n      component = new engine.ConstantComponent(key, null, [options]);\n      constants.push(component);\n    }\n    _.map(compileDescription(desc, compilingContext), function (subComponent) {\n      component.addComponent(subComponent);\n    });\n  });\n  objectC.addComponent(new ObjectComponent(\"inner\", constants, patterns));\n  return objectC;\n}\n\nfunction compileList(listRule, compilingContext) {\n  var listC = new engine.ConstantComponent(\"[\");\n  _.each(listRule, function (desc) {\n    _.each(compileDescription(desc, compilingContext), function (component) {\n      listC.addComponent(component);\n    });\n  });\n  return listC;\n}\n\n/** takes a compiled object and wraps in a {@link ConditionalProxy }*/\nfunction compileCondition(description, compiledObject) {\n  if (description.lines_regex) {\n    return new ConditionalProxy(function (context, editor) {\n      var lines = editor.getSession().getLines(context.requestStartRow, editor.getCursorPosition().row).join(\"\\n\");\n      return new RegExp(description.lines_regex, \"m\").test(lines);\n    }, compiledObject);\n  } else {\n    throw \"unknown condition type - got: \" + JSON.stringify(description);\n  }\n}\n\n/**\n * @param constants list of components that represent constant keys\n * @param patternsAndWildCards list of components that represent patterns and should be matched only if\n * there is no constant matches\n */\nfunction ObjectComponent(name, constants, patternsAndWildCards) {\n  engine.AutocompleteComponent.call(this, name);\n  this.constants = constants;\n  this.patternsAndWildCards = patternsAndWildCards;\n}\n\nObjectComponent.prototype = _.create(engine.AutocompleteComponent.prototype, { 'constructor': ObjectComponent });\n\n(function (cls) {\n  cls.getTerms = function (context, editor) {\n    var options = [];\n    _.each(this.constants, function (component) {\n      options.push.apply(options, component.getTerms(context, editor));\n    });\n    _.each(this.patternsAndWildCards, function (component) {\n      options.push.apply(options, component.getTerms(context, editor));\n    });\n    return options;\n  };\n\n  cls.match = function (token, context, editor) {\n    var result = {\n      next: []\n    };\n    _.each(this.constants, function (component) {\n      var componentResult = component.match(token, context, editor);\n      if (componentResult && componentResult.next) {\n        result.next.push.apply(result.next, componentResult.next);\n      }\n    });\n\n    // try to link to GLOBAL rules\n    var globalRules = context.globalComponentResolver(token, false);\n    if (globalRules) {\n      result.next.push.apply(result.next, globalRules);\n    }\n\n    if (result.next.length) {\n      return result;\n    }\n    _.each(this.patternsAndWildCards, function (component) {\n      var componentResult = component.match(token, context, editor);\n      if (componentResult && componentResult.next) {\n        result.next.push.apply(result.next, componentResult.next);\n      }\n    });\n\n    return result;\n  };\n})(ObjectComponent.prototype);\n\n/**\n * An object to resolve scope links (syntax endpoint.path1.path2)\n * @param link the link either string (endpoint.path1.path2, or .path1.path2) or a function (context,editor)\n * which returns a description to be compiled\n * @constructor\n * @param compilingContext\n *\n *\n * For this to work we expect the context to include a method context.endpointComponentResolver(endpoint)\n * which should return the top level components for the given endpoint\n */\nfunction ScopeResolver(link, compilingContext) {\n  engine.SharedComponent.call(this, \"__scope_link\", null);\n  if (_.isString(link) && link[0] === \".\") {\n    // relative link, inject current endpoint\n    if (link === \".\") {\n      link = compilingContext.endpoint_id;\n    } else {\n      link = compilingContext.endpoint_id + link;\n    }\n  }\n  this.link = link;\n  this.compilingContext = compilingContext;\n}\n\nScopeResolver.prototype = _.create(engine.SharedComponent.prototype, { 'constructor': ScopeResolver });\n\n(function (cls) {\n\n  cls.resolveLinkToComponents = function (context, editor) {\n    if (_.isFunction(this.link)) {\n      var desc = this.link(context, editor);\n      return compileDescription(desc, this.compilingContext);\n    }\n    if (!_.isString(this.link)) {\n      throw new Error(\"unsupported link format\", this.link);\n    }\n\n    var path = this.link.replace(/\\./g, \"{\").split(/(\\{)/);\n    var endpoint = path[0];\n    var components;\n    try {\n      if (endpoint === \"GLOBAL\") {\n        // global rules need an extra indirection\n        if (path.length < 3) {\n          throw new Error(\"missing term in global link: \" + this.link);\n        }\n        var term = path[2];\n        components = context.globalComponentResolver(term);\n        path = path.slice(3);\n      } else {\n        path = path.slice(1);\n        components = context.endpointComponentResolver(endpoint);\n      }\n    } catch (e) {\n      throw new Error(\"failed to resolve link [\" + this.link + \"]: \" + e);\n    }\n    return engine.resolvePathToComponents(path, context, editor, components);\n  };\n\n  cls.getTerms = function (context, editor) {\n    var options = [],\n        components = this.resolveLinkToComponents(context, editor);\n    _.each(components, function (component) {\n      options.push.apply(options, component.getTerms(context, editor));\n    });\n    return options;\n  };\n\n  cls.match = function (token, context, editor) {\n    var result = {\n      next: []\n    },\n        components = this.resolveLinkToComponents(context, editor);\n\n    _.each(components, function (component) {\n      var componentResult = component.match(token, context, editor);\n      if (componentResult && componentResult.next) {\n        result.next.push.apply(result.next, componentResult.next);\n      }\n    });\n\n    return result;\n  };\n})(ScopeResolver.prototype);\n\nfunction ConditionalProxy(predicate, delegate) {\n  engine.SharedComponent.call(this, \"__condition\", null);\n  this.predicate = predicate;\n  this.delegate = delegate;\n}\n\nConditionalProxy.prototype = _.create(engine.SharedComponent.prototype, { 'constructor': ConditionalProxy });\n\n(function (cls) {\n\n  cls.getTerms = function (context, editor) {\n    if (this.predicate(context, editor)) {\n      return this.delegate.getTerms(context, editor);\n    } else {\n      return null;\n    }\n  };\n\n  cls.match = function (token, context, editor) {\n    if (this.predicate(context, editor)) {\n      return this.delegate.match(token, context, editor);\n    } else {\n      return false;\n    }\n  };\n})(ConditionalProxy.prototype);\n\nfunction GlobalOnlyComponent(name) {\n  engine.AutocompleteComponent.call(this, name);\n}\n\nGlobalOnlyComponent.prototype = _.create(engine.AutocompleteComponent.prototype, { 'constructor': ObjectComponent });\n\n(function (cls) {\n\n  cls.getTerms = function () {\n    return null;\n  };\n\n  cls.match = function (token, context) {\n    var result = {\n      next: []\n    };\n\n    // try to link to GLOBAL rules\n    var globalRules = context.globalComponentResolver(token, false);\n    if (globalRules) {\n      result.next.push.apply(result.next, globalRules);\n    }\n\n    if (result.next.length) {\n      return result;\n    }\n    // just loop back to us\n    result.next = [this];\n\n    return result;\n  };\n})(GlobalOnlyComponent.prototype);\n\n// a list of component that match anything but give auto complete suggestions based on global API entries.\nfunction globalsOnlyAutocompleteComponents() {\n  return [new GlobalOnlyComponent(\"__global__\")];\n}\n\n/**\n * @param endpoint_id id of the endpoint being compiled.\n * @param description a json dict describing the endpoint\n * @param endpointComponentResolver a function (endpoint,context,editor) which should resolve an endpoint\n *        to it's list of compiled components.\n * @param parametrizedComponentFactories a dict of the following structure\n * that will be used as a fall back for pattern keys (i.e.: {type} ,resolved without the $s)\n * {\n   *   TYPE: function (part, parent, endpoint) {\n   *      return new SharedComponent(part, parent)\n   *   }\n   * }\n */\nfunction compileBodyDescription(endpoint_id, description, parametrizedComponentFactories) {\n  return compileDescription(description, new CompilingContext(endpoint_id, parametrizedComponentFactories));\n}",null]}