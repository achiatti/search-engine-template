{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/geo_utils.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/utils/geo_utils.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.geoContains = geoContains;\nexports.scaleBounds = scaleBounds;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction geoContains(collar, bounds) {\n  //test if bounds top_left is outside collar\n  if (bounds.top_left.lat > collar.top_left.lat || bounds.top_left.lon < collar.top_left.lon) {\n    return false;\n  }\n\n  //test if bounds bottom_right is outside collar\n  if (bounds.bottom_right.lat < collar.bottom_right.lat || bounds.bottom_right.lon > collar.bottom_right.lon) {\n    return false;\n  }\n\n  //both corners are inside collar so collar contains bounds\n  return true;\n}\n\nfunction scaleBounds(bounds) {\n  if (!bounds) return;\n\n  var scale = .5; // scale bounds by 50%\n\n  var topLeft = bounds.top_left;\n  var bottomRight = bounds.bottom_right;\n  var latDiff = _lodash2.default.round(Math.abs(topLeft.lat - bottomRight.lat), 5);\n  var lonDiff = _lodash2.default.round(Math.abs(bottomRight.lon - topLeft.lon), 5);\n  //map height can be zero when vis is first created\n  if (latDiff === 0) latDiff = lonDiff;\n\n  var latDelta = latDiff * scale;\n  var topLeftLat = _lodash2.default.round(topLeft.lat, 5) + latDelta;\n  if (topLeftLat > 90) topLeftLat = 90;\n  var bottomRightLat = _lodash2.default.round(bottomRight.lat, 5) - latDelta;\n  if (bottomRightLat < -90) bottomRightLat = -90;\n  var lonDelta = lonDiff * scale;\n  var topLeftLon = _lodash2.default.round(topLeft.lon, 5) - lonDelta;\n  if (topLeftLon < -180) topLeftLon = -180;\n  var bottomRightLon = _lodash2.default.round(bottomRight.lon, 5) + lonDelta;\n  if (bottomRightLon > 180) bottomRightLon = 180;\n\n  return {\n    'top_left': { lat: topLeftLat, lon: topLeftLon },\n    'bottom_right': { lat: bottomRightLat, lon: bottomRightLon }\n  };\n}",null]}