{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/persisted_state/persisted_state.factory.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/persisted_state/persisted_state.factory.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _events = require('ui/events');\n\nvar _persisted_state = require('./persisted_state');\n\nvar _modules = require('ui/modules');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @name AngularPersistedState\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Returns a PersistedState object which uses an EventEmitter instead of\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the SimpleEmitter. The EventEmitter adds digest loops every time a handler is called\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * so it's preferable to use this variation when a callback modifies angular UI.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * TODO: The handlers themselves should really be responsible for triggering digest loops\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * as opposed to having an all or nothing situation. A nice goal would be to get rid\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of the EventEmitter entirely and require handlers that need it to trigger a digest loop\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * themselves. We can even supply a service to wrap the callbacks in a function that\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * would call the callback, and finish with a $rootScope.$apply().\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.factory('PersistedState', function ($injector) {\n  var Private = $injector.get('Private');\n  var Events = Private(_events.EventsProvider);\n\n  // Extend PersistedState to override the EmitterClass class with\n  // our Angular friendly version.\n  return function (_PersistedState) {\n    _inherits(AngularPersistedState, _PersistedState);\n\n    function AngularPersistedState(value, path, parent, silent) {\n      _classCallCheck(this, AngularPersistedState);\n\n      return _possibleConstructorReturn(this, (AngularPersistedState.__proto__ || Object.getPrototypeOf(AngularPersistedState)).call(this, value, path, parent, silent, Events));\n    }\n\n    return AngularPersistedState;\n  }(_persisted_state.PersistedState);\n});",null]}