{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/number_list/number_list.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/number_list/number_list.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _range = require('ui/utils/range');\n\nrequire('ui/number_list/number_list_input');\n\nvar _modules = require('ui/modules');\n\nvar _number_list = require('ui/number_list/number_list.html');\n\nvar _number_list2 = _interopRequireDefault(_number_list);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').directive('kbnNumberList', function () {\n  return {\n    restrict: 'E',\n    template: _number_list2.default,\n    controllerAs: 'numberListCntr',\n    require: 'ngModel',\n    scope: {\n      validateAscendingOrder: '=?',\n      labelledbyId: '@'\n    },\n    controller: function controller($scope, $attrs, $parse) {\n      var self = this;\n\n      self.labelledbyId = $scope.labelledbyId;\n\n      // Called from the pre-link function once we have the controllers\n      self.init = function (modelCntr) {\n        self.modelCntr = modelCntr;\n\n        self.getList = function () {\n          return self.modelCntr.$modelValue;\n        };\n\n        self.getUnitName = _lodash2.default.partial($parse($attrs.unit), $scope);\n\n        var defaultRange = self.range = (0, _range.parseRange)('[0,Infinity)');\n        self.validateAscOrder = _lodash2.default.isUndefined($scope.validateAscendingOrder) ? true : $scope.validateAscendingOrder;\n\n        $scope.$watch(function () {\n          return $attrs.range;\n        }, function (range) {\n          if (!range) {\n            self.range = defaultRange;\n            return;\n          }\n\n          try {\n            self.range = (0, _range.parseRange)(range);\n          } catch (e) {\n            throw new TypeError('Unable to parse range: ' + e.message);\n          }\n        });\n\n        /**\n        * Remove an item from list by index\n        * @param  {number} index\n        * @return {undefined}\n        */\n        self.remove = function (index) {\n          var list = self.getList();\n          if (!list) return;\n\n          list.splice(index, 1);\n        };\n\n        /**\n        * Add an item to the end of the list\n        * @return {undefined}\n        */\n        self.add = function () {\n          var list = self.getList();\n          if (!list) return;\n\n          list.push(_lodash2.default.last(list) + 1);\n        };\n\n        /**\n        * Check to see if the list is too short.\n        *\n        * @return {Boolean}\n        */\n        self.tooShort = function () {\n          return _lodash2.default.size(self.getList()) < 1;\n        };\n\n        /**\n        * Check to see if the list is too short, but simply\n        * because the user hasn't interacted with it yet\n        *\n        * @return {Boolean}\n        */\n        self.undefinedLength = function () {\n          return self.tooShort() && self.modelCntr.$untouched && self.modelCntr.$pristine;\n        };\n\n        /**\n        * Check to see if the list is too short\n        *\n        * @return {Boolean}\n        */\n        self.invalidLength = function () {\n          return self.tooShort() && !self.undefinedLength();\n        };\n\n        $scope.$watchCollection(self.getList, function () {\n          self.modelCntr.$setValidity('numberListLength', !self.tooShort());\n        });\n      };\n    },\n    link: {\n      pre: function pre($scope, $el, attrs, ngModelCntr) {\n        $scope.numberListCntr.init(ngModelCntr);\n      }\n    }\n  };\n});",null]}