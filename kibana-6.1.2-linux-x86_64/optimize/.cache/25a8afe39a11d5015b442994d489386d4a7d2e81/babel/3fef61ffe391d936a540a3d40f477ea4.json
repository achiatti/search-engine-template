{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/aggs/metric_select.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/components/aggs/metric_select.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterRows = filterRows;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _reactSelect = require('react-select');\n\nvar _reactSelect2 = _interopRequireDefault(_reactSelect);\n\nvar _calculate_siblings = require('../lib/calculate_siblings');\n\nvar _calculate_siblings2 = _interopRequireDefault(_calculate_siblings);\n\nvar _calculate_label = require('../../../common/calculate_label');\n\nvar _calculate_label2 = _interopRequireDefault(_calculate_label);\n\nvar _basic_aggs = require('../../../common/basic_aggs');\n\nvar _basic_aggs2 = _interopRequireDefault(_basic_aggs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction createTypeFilter(restrict, exclude) {\n  return function (metric) {\n    if (_lodash2.default.includes(exclude, metric.type)) return false;\n    switch (restrict) {\n      case 'basic':\n        return _lodash2.default.includes(_basic_aggs2.default, metric.type);\n      default:\n        return true;\n    }\n  };\n}\n\n// This filters out sibling aggs, percentiles, and special aggs (like Series Agg)\nfunction filterRows(includeSiblings) {\n  return function (row) {\n    if (includeSiblings) return !/^series/.test(row.type) && !/^percentile/.test(row.type) && row.type !== 'math';\n    return !/_bucket$/.test(row.type) && !/^series/.test(row.type) && !/^percentile/.test(row.type) && row.type !== 'math';\n  };\n}\n\nfunction MetricSelect(props) {\n  var restrict = props.restrict,\n      metric = props.metric,\n      onChange = props.onChange,\n      value = props.value,\n      exclude = props.exclude,\n      includeSiblings = props.includeSiblings;\n\n\n  var metrics = props.metrics.filter(createTypeFilter(restrict, exclude));\n\n  var siblings = (0, _calculate_siblings2.default)(metrics, metric);\n\n  // Percentiles need to be handled differently because one percentile aggregation\n  // could have multiple percentiles associated with it. So the user needs a way\n  // to specify which percentile the want to use.\n  var percentileOptions = siblings.filter(function (row) {\n    return (/^percentile/.test(row.type)\n    );\n  }).reduce(function (acc, row) {\n    var label = (0, _calculate_label2.default)(row, metrics);\n    row.percentiles.forEach(function (p) {\n      if (p.value) {\n        var _value = /\\./.test(p.value) ? p.value : p.value + '.0';\n        acc.push({ value: row.id + '[' + _value + ']', label: label + ' (' + _value + ')' });\n      }\n    });\n    return acc;\n  }, []);\n\n  var options = siblings.filter(filterRows(includeSiblings)).map(function (row) {\n    var label = (0, _calculate_label2.default)(row, metrics);\n    return { value: row.id, label: label };\n  });\n\n  return _react2.default.createElement(_reactSelect2.default, {\n    'aria-label': 'Select metric',\n    placeholder: 'Select metric...',\n    options: [].concat(_toConsumableArray(options), _toConsumableArray(props.additionalOptions), _toConsumableArray(percentileOptions)),\n    value: value,\n    onChange: onChange\n  });\n}\n\nMetricSelect.defaultProps = {\n  additionalOptions: [],\n  exclude: [],\n  metric: {},\n  restrict: 'none',\n  includeSiblings: false\n};\n\nMetricSelect.propTypes = {\n  additionalOptions: _propTypes2.default.array,\n  exclude: _propTypes2.default.array,\n  metric: _propTypes2.default.object,\n  onChange: _propTypes2.default.func,\n  restrict: _propTypes2.default.string,\n  value: _propTypes2.default.string,\n  includeSiblings: _propTypes2.default.bool\n};\n\nexports.default = MetricSelect;",null]}