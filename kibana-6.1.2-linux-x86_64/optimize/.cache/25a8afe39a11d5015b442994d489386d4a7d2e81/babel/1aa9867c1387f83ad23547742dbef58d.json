{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg_group.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/agg_group.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('./agg');\n\nrequire('./agg_add');\n\nrequire('./nesting_indicator');\n\nvar _modules = require('ui/modules');\n\nvar _agg_group = require('./agg_group.html');\n\nvar _agg_group2 = _interopRequireDefault(_agg_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('app/visualize').directive('visEditorAggGroup', function () {\n\n  return {\n    restrict: 'E',\n    template: _agg_group2.default,\n    scope: true,\n    link: function link($scope, $el, attr) {\n      $scope.groupName = attr.groupName;\n      $scope.$bind('group', 'vis.aggs.bySchemaGroup[\"' + $scope.groupName + '\"]');\n      $scope.$bind('schemas', 'vis.type.schemas[\"' + $scope.groupName + '\"]');\n\n      $scope.$watchMulti(['schemas', '[]group'], function () {\n        var stats = $scope.stats = {\n          min: 0,\n          max: 0,\n          count: $scope.group ? $scope.group.length : 0\n        };\n\n        if (!$scope.schemas) return;\n\n        $scope.schemas.forEach(function (schema) {\n          stats.min += schema.min;\n          stats.max += schema.max;\n          stats.deprecate = schema.deprecate;\n        });\n\n        $scope.availableSchema = $scope.schemas.filter(function (schema) {\n          var count = _lodash2.default.where($scope.group, { schema: schema }).length;\n          if (count < schema.max) return true;\n        });\n      });\n\n      function reorderFinished() {\n        //the aggs have been reordered in [group] and we need\n        //to apply that ordering to [vis.aggs]\n        var indexOffset = $scope.vis.aggs.indexOf($scope.group[0]);\n        _lodash2.default.forEach($scope.group, function (agg, index) {\n          _lodash2.default.move($scope.vis.aggs, agg, indexOffset + index);\n        });\n      }\n\n      $scope.$on('agg-reorder', reorderFinished);\n      $scope.$on('agg-drag-start', function () {\n        return $scope.dragging = true;\n      });\n      $scope.$on('agg-drag-end', function () {\n        $scope.dragging = false;\n        reorderFinished();\n      });\n    }\n  };\n});",null]}