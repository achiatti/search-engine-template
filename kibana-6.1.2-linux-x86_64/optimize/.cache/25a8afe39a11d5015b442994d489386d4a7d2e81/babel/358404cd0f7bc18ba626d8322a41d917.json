{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/region_map/public/region_map_vis_params.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/region_map/public/region_map_vis_params.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _region_map_vis_params = require('./region_map_vis_params.html');\n\nvar _region_map_vis_params2 = _interopRequireDefault(_region_map_vis_params);\n\nvar _util = require('./util');\n\nrequire('../../tile_map/public/editors/wms_options');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana/region_map').directive('regionMapVisParams', function (serviceSettings, regionmapsConfig, Notifier) {\n\n  var notify = new Notifier({ location: 'Region map' });\n\n  return {\n    restrict: 'E',\n    template: _region_map_vis_params2.default,\n    link: function link($scope) {\n\n      $scope.collections = $scope.vis.type.editorConfig.collections;\n      $scope.onLayerChange = onLayerChange;\n\n      if (regionmapsConfig.includeElasticMapsService) {\n\n        serviceSettings.getFileLayers().then(function (layersFromService) {\n\n          layersFromService = layersFromService.map(_util.mapToLayerWithId.bind(null, 'elastic_maps_service'));\n          var newVectorLayers = $scope.collections.vectorLayers.slice();\n\n          var _loop = function _loop(i) {\n            var layerFromService = layersFromService[i];\n            var alreadyAdded = newVectorLayers.some(function (layer) {\n              return layerFromService.layerId === layer.layerId;\n            });\n            if (!alreadyAdded) {\n              newVectorLayers.push(layerFromService);\n            }\n          };\n\n          for (var i = 0; i < layersFromService.length; i += 1) {\n            _loop(i);\n          }\n\n          $scope.collections.vectorLayers = newVectorLayers;\n          if ($scope.collections.vectorLayers[0] && !$scope.vis.params.selectedLayer) {\n            $scope.vis.params.selectedLayer = $scope.collections.vectorLayers[0];\n            onLayerChange();\n          }\n\n          //the dirty flag is set to true because the change in vector layers config causes an update of the scope.params\n          //temp work-around. addressing this issue with the visualize refactor for 6.0\n          setTimeout(function () {\n            $scope.dirty = false;\n          }, 0);\n          $scope.collections.vectorLayers = newVectorLayers;\n\n          if ($scope.collections.vectorLayers[0] && !$scope.vis.params.selectedLayer) {\n            $scope.vis.params.selectedLayer = $scope.collections.vectorLayers[0];\n            onLayerChange();\n          }\n\n          //the dirty flag is set to true because the change in vector layers config causes an update of the scope.params\n          //temp work-around. addressing this issue with the visualize refactor for 6.0\n          setTimeout(function () {\n            $scope.dirty = false;\n          }, 0);\n        }).catch(function (error) {\n          notify.warning(error.message);\n        });\n      }\n\n      function onLayerChange() {\n        $scope.vis.params.selectedJoinField = $scope.vis.params.selectedLayer.fields[0];\n      }\n    }\n  };\n});",null]}