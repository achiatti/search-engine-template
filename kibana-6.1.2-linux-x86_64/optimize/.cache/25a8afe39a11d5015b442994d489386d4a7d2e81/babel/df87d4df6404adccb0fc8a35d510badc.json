{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis_labels.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis_labels.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibAxisLabelsProvider = VislibAxisLabelsProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _truncate_labels = require('../../components/labels/truncate_labels');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction VislibAxisLabelsProvider() {\n  var AxisLabels = function () {\n    function AxisLabels(axisConfig, scale) {\n      _classCallCheck(this, AxisLabels);\n\n      this.axisConfig = axisConfig;\n      this.axisScale = scale;\n    }\n\n    _createClass(AxisLabels, [{\n      key: 'render',\n      value: function render(selection) {\n        selection.call(this.draw());\n      }\n    }, {\n      key: 'rotateAxisLabels',\n      value: function rotateAxisLabels() {\n        var config = this.axisConfig;\n        return function (selection) {\n          var text = selection.selectAll('.tick text');\n\n          if (config.get('labels.rotate')) {\n            text.style('text-anchor', function () {\n              var currentValue = (0, _jquery2.default)(this).css('text-anchor');\n              var rotateDeg = config.get('labels.rotate');\n              if (!rotateDeg) return currentValue;else {\n                var position = config.get('position');\n                switch (position) {\n                  case 'top':\n                    return 'end';\n                  case 'bottom':\n                    return 'end';\n                  default:\n                    if (rotateDeg === 90 || rotateDeg === -90) return 'middle';\n                    return currentValue;\n                }\n              }\n            }).attr('dy', function () {\n              return config.isHorizontal() ? '0.3em' : '0';\n            }).attr('transform', function rotate(d, j) {\n              var position = config.get('position');\n              var rotateDeg = position === 'top' ? config.get('labels.rotate') : -config.get('labels.rotate');\n\n              if ((0, _jquery2.default)(this).css('text-anchor') === 'middle') {\n                var coord = text[0][j].getBBox();\n                var transX = coord.x + coord.width / 2;\n                var transY = coord.y + coord.height / 2;\n                return 'rotate(' + rotateDeg + ', ' + transX + ', ' + transY + ')';\n              } else {\n                var _transX = this.attributes.x.nodeValue;\n                var _transY = this.attributes.y.nodeValue;\n                return 'rotate(' + rotateDeg + ', ' + _transX + ', ' + _transY + ')';\n              }\n            });\n          }\n        };\n      }\n    }, {\n      key: 'truncateLabels',\n      value: function truncateLabels() {\n        var config = this.axisConfig;\n        return function (selection) {\n          if (!config.get('labels.truncate')) return;\n\n          selection.selectAll('.tick text').text(function () {\n            return (0, _truncate_labels.truncateLabel)(this, config.get('labels.truncate'));\n          });\n        };\n      }\n    }, {\n      key: 'filterAxisLabels',\n      value: function filterAxisLabels() {\n        var self = this;\n        var config = this.axisConfig;\n        var startPos = 0;\n        var padding = 1.1;\n\n        return function (selection) {\n          if (!config.get('labels.filter')) return;\n          selection.selectAll('.tick text').text(function (d) {\n            var par = _d2.default.select(this.parentNode).node();\n            var el = (0, _jquery2.default)(config.get('rootEl')).find(config.get('elSelector'));\n            var maxSize = config.isHorizontal() ? el.width() : el.height();\n            var myPos = config.isHorizontal() ? self.axisScale.scale(d) : maxSize - self.axisScale.scale(d);\n            var mySize = (config.isHorizontal() ? par.getBBox().width : par.getBBox().height) * padding;\n            var halfSize = mySize / 2;\n\n            if (startPos + halfSize < myPos && maxSize > myPos + halfSize) {\n              startPos = myPos + halfSize;\n              return this.textContent;\n            } else {\n              _d2.default.select(this.parentNode).remove();\n            }\n          });\n        };\n      }\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var self = this;\n        var config = this.axisConfig;\n\n        return function (selection) {\n          selection.each(function () {\n            selection.selectAll('text').attr('style', function () {\n              var currentStyle = _d2.default.select(this).attr('style');\n              return currentStyle + ' font-size: ' + config.get('labels.fontSize') + ';';\n            });\n            if (!config.get('labels.show')) selection.selectAll('text').attr('style', 'display: none;');\n\n            selection.call(self.truncateLabels());\n            selection.call(self.rotateAxisLabels());\n            selection.call(self.filterAxisLabels());\n          });\n        };\n      }\n    }]);\n\n    return AxisLabels;\n  }();\n\n  return AxisLabels;\n}",null]}