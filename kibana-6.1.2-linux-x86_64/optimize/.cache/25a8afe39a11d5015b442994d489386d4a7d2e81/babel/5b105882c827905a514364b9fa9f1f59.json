{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/draggable/draggable_container.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/draggable/draggable_container.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _dragula = require('dragula');\n\nvar _dragula2 = _interopRequireDefault(_dragula);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_modules.uiModules.get('kibana').directive('draggableContainer', function () {\n\n  var $scopes = new WeakMap();\n\n  return {\n    restrict: 'A',\n    scope: true,\n    controllerAs: 'draggableContainerCtrl',\n    controller: function controller($scope, $attrs, $parse, $element) {\n      $scopes.set($element.get(0), $scope);\n      this.linkDraggableItem = function (el, $scope) {\n        $scopes.set(el, $scope);\n      };\n\n      this.getList = function () {\n        return $parse($attrs.draggableContainer)($scope);\n      };\n    },\n    link: function link($scope, $el) {\n      var drake = (0, _dragula2.default)({\n        containers: $el.toArray(),\n        moves: function moves(el, source, handle) {\n          var itemScope = $scopes.get(el);\n          if (!itemScope || !('draggableItemCtrl' in itemScope)) {\n            return; // only [draggable-item] is draggable\n          }\n          return itemScope.draggableItemCtrl.moves(handle);\n        }\n      });\n\n      var drakeEvents = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow'];\n      var prettifiedDrakeEvents = {\n        drag: 'start',\n        dragend: 'end'\n      };\n\n      drakeEvents.forEach(function (type) {\n        drake.on(type, function (el) {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return forwardEvent.apply(undefined, [type, el].concat(args));\n        });\n      });\n      drake.on('drag', markDragging(true));\n      drake.on('dragend', markDragging(false));\n      drake.on('drop', drop);\n      $scope.$on('$destroy', drake.destroy);\n      $scope.drake = drake;\n\n      function markDragging(isDragging) {\n        return function (el) {\n          var scope = $scopes.get(el);\n          if (!scope) return;\n          scope.isDragging = isDragging;\n          scope.$apply();\n        };\n      }\n\n      function forwardEvent(type, el) {\n        var name = 'drag-' + (prettifiedDrakeEvents[type] || type);\n        var scope = $scopes.get(el);\n        if (!scope) return;\n\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        scope.$broadcast.apply(scope, [name, el].concat(args));\n      }\n\n      function drop(el, target, source, sibling) {\n        var list = $scope.draggableContainerCtrl.getList();\n        var itemScope = $scopes.get(el);\n        if (!itemScope) return;\n        var item = itemScope.draggableItemCtrl.getItem();\n        var fromIndex = list.indexOf(item);\n        var siblingIndex = getItemIndexFromElement(list, sibling);\n\n        var toIndex = getTargetIndex(list, fromIndex, siblingIndex);\n        _lodash2.default.move(list, item, toIndex);\n      }\n\n      function getTargetIndex(list, fromIndex, siblingIndex) {\n        if (siblingIndex === -1) {\n          // means the item was dropped at the end of the list\n          return list.length - 1;\n        } else if (fromIndex < siblingIndex) {\n          // An item moving from a lower index to a higher index will offset the\n          // index of the earlier items by one.\n          return siblingIndex - 1;\n        }\n        return siblingIndex;\n      }\n\n      function getItemIndexFromElement(list, element) {\n        if (!element) return -1;\n\n        var scope = $scopes.get(element);\n        if (!scope) return;\n        var item = scope.draggableItemCtrl.getItem();\n        var index = list.indexOf(item);\n\n        return index;\n      }\n    }\n  };\n});",null]}