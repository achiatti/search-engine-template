{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/schemas.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/editors/default/schemas.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VisSchemasProvider = VisSchemasProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _indexed_array = require('ui/indexed_array');\n\nvar _agg_params = require('ui/agg_types/agg_params');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction VisSchemasProvider(Private) {\n  var AggParams = Private(_agg_params.AggTypesAggParamsProvider);\n\n  function Schemas(schemas) {\n    var self = this;\n\n    (0, _lodash2.default)(schemas || []).map(function (schema) {\n      if (!schema.name) throw new Error('all schema must have a unique name');\n\n      if (schema.name === 'split') {\n        schema.params = [{\n          name: 'row',\n          default: true\n        }];\n        schema.editor = require('plugins/kbn_vislib_vis_types/controls/rows_or_columns.html');\n      } else if (schema.name === 'radius') {\n        schema.editor = require('plugins/kbn_vislib_vis_types/controls/radius_ratio_option.html');\n      }\n\n      _lodash2.default.defaults(schema, {\n        min: 0,\n        max: Infinity,\n        group: 'buckets',\n        title: schema.name,\n        aggFilter: '*',\n        editor: false,\n        params: [],\n        deprecate: false\n      });\n\n      // convert the params into a params registry\n      schema.params = new AggParams(schema.params);\n\n      return schema;\n    }).tap(function (schemas) {\n      self.all = new _indexed_array.IndexedArray({\n        index: ['name'],\n        group: ['group'],\n        immutable: true,\n        initialSet: schemas\n      });\n    }).groupBy('group').forOwn(function (group, groupName) {\n      self[groupName] = new _indexed_array.IndexedArray({\n        index: ['name'],\n        immutable: true,\n        initialSet: group\n      });\n    }).commit();\n  }\n\n  return Schemas;\n}",null]}