{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/timefilter/timefilter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/timefilter/timefilter.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _datemath = require('@elastic/datemath');\n\nvar _datemath2 = _interopRequireDefault(_datemath);\n\nrequire('ui/state_management/global_state');\n\nrequire('ui/config');\n\nvar _events = require('ui/events');\n\nvar _diff_time = require('ui/timefilter/lib/diff_time');\n\nvar _diff_interval = require('ui/timefilter/lib/diff_interval');\n\nvar _routes = require('ui/routes');\n\nvar _routes2 = _interopRequireDefault(_routes);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_routes2.default.addSetupWork(function (timefilter) {\n  return timefilter.init();\n});\n\n_modules.uiModules.get('kibana').service('timefilter', function (Private, globalState, $rootScope, config) {\n  var Events = Private(_events.EventsProvider);\n\n  function convertISO8601(stringTime) {\n    var obj = (0, _moment2.default)(stringTime, 'YYYY-MM-DDTHH:mm:ss.SSSZ', true);\n    return obj.isValid() ? obj : stringTime;\n  }\n\n  _lodash2.default.class(Timefilter).inherits(Events);\n  function Timefilter() {\n    Timefilter.Super.call(this);\n\n    var self = this;\n    var diffTime = Private(_diff_time.TimefilterLibDiffTimeProvider)(self);\n    var diffInterval = Private(_diff_interval.TimefilterLibDiffIntervalProvider)(self);\n\n    self.enabled = false;\n\n    self.init = _lodash2.default.once(function () {\n      var timeDefaults = config.get('timepicker:timeDefaults');\n      var refreshIntervalDefaults = config.get('timepicker:refreshIntervalDefaults');\n\n      // These can be date math strings or moments.\n      self.time = _lodash2.default.defaults(globalState.time || {}, timeDefaults);\n      self.refreshInterval = _lodash2.default.defaults(globalState.refreshInterval || {}, refreshIntervalDefaults);\n\n      globalState.on('fetch_with_changes', function () {\n        // clone and default to {} in one\n        var newTime = _lodash2.default.defaults({}, globalState.time, timeDefaults);\n        var newRefreshInterval = _lodash2.default.defaults({}, globalState.refreshInterval, refreshIntervalDefaults);\n\n        if (newTime) {\n          if (newTime.to) newTime.to = convertISO8601(newTime.to);\n          if (newTime.from) newTime.from = convertISO8601(newTime.from);\n        }\n\n        self.time = newTime;\n        self.refreshInterval = newRefreshInterval;\n      });\n    });\n\n    $rootScope.$$timefilter = self;\n\n    $rootScope.$watchMulti(['$$timefilter.time', '$$timefilter.time.from', '$$timefilter.time.to', '$$timefilter.time.mode'], diffTime);\n\n    $rootScope.$watchMulti(['$$timefilter.refreshInterval', '$$timefilter.refreshInterval.pause', '$$timefilter.refreshInterval.value'], diffInterval);\n  }\n\n  Timefilter.prototype.update = function () {\n    $rootScope.$apply();\n  };\n\n  Timefilter.prototype.get = function (indexPattern, range) {\n\n    if (!indexPattern) {\n      //in CI, we sometimes seem to fail here.\n      return;\n    }\n\n    var filter = void 0;\n    var timefield = indexPattern.timeFieldName && _lodash2.default.find(indexPattern.fields, { name: indexPattern.timeFieldName });\n\n    if (timefield) {\n      var bounds = this.getBounds();\n      filter = { range: {} };\n      filter.range[timefield.name] = {\n        gte: range ? range.min.valueOf() : bounds.min.valueOf(),\n        lte: range ? range.max.valueOf() : bounds.max.valueOf(),\n        format: 'epoch_millis'\n      };\n    }\n\n    return filter;\n  };\n\n  Timefilter.prototype.getBounds = function () {\n    return {\n      min: _datemath2.default.parse(this.time.from),\n      max: _datemath2.default.parse(this.time.to, true)\n    };\n  };\n\n  Timefilter.prototype.getActiveBounds = function () {\n    if (this.enabled) return this.getBounds();\n  };\n\n  return new Timefilter();\n});",null]}