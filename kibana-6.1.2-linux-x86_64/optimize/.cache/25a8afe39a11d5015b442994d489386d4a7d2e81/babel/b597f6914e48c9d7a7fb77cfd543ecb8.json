{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/range.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/kuery/functions/range.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.buildNodeParams = buildNodeParams;\nexports.toElasticsearchQuery = toElasticsearchQuery;\nexports.toKueryExpression = toKueryExpression;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _node_types = require('../node_types');\n\nvar _ast = require('../ast');\n\nvar ast = _interopRequireWildcard(_ast);\n\nvar _range2 = require('ui/filter_manager/lib/range');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction buildNodeParams(fieldName, params) {\n  var serializeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'operator';\n\n  params = _lodash2.default.pick(params, 'gt', 'lt', 'gte', 'lte', 'format');\n  var fieldNameArg = _node_types.nodeTypes.literal.buildNode(fieldName);\n  var args = _lodash2.default.map(params, function (value, key) {\n    return _node_types.nodeTypes.namedArg.buildNode(key, value);\n  });\n\n  // we only support inclusive ranges in the operator syntax currently\n  if (_lodash2.default.has(params, 'gt') || _lodash2.default.has(params, 'lt')) {\n    serializeStyle = 'function';\n  }\n\n  return {\n    arguments: [fieldNameArg].concat(_toConsumableArray(args)),\n    serializeStyle: serializeStyle\n  };\n}\n\nfunction toElasticsearchQuery(node, indexPattern) {\n  var _node$arguments = _toArray(node.arguments),\n      fieldNameArg = _node$arguments[0],\n      args = _node$arguments.slice(1);\n\n  var fieldName = _node_types.nodeTypes.literal.toElasticsearchQuery(fieldNameArg);\n  var field = indexPattern.fields.byName[fieldName];\n  var namedArgs = extractArguments(args);\n  var queryParams = _lodash2.default.mapValues(namedArgs, ast.toElasticsearchQuery);\n\n  if (field && field.scripted) {\n    return {\n      script: _extends({}, (0, _range2.getRangeScript)(field, queryParams))\n    };\n  }\n\n  return {\n    range: _defineProperty({}, fieldName, queryParams)\n  };\n}\n\nfunction toKueryExpression(node) {\n  if (node.serializeStyle !== 'operator') {\n    throw new Error('Cannot serialize \"range\" function as \"' + node.serializeStyle + '\"');\n  }\n\n  var _node$arguments2 = _toArray(node.arguments),\n      fieldNameArg = _node$arguments2[0],\n      args = _node$arguments2.slice(1);\n\n  var fieldName = ast.toKueryExpression(fieldNameArg);\n\n  var _extractArguments = extractArguments(args),\n      gte = _extractArguments.gte,\n      lte = _extractArguments.lte;\n\n  if (_lodash2.default.isUndefined(gte) || _lodash2.default.isUndefined(lte)) {\n    throw new Error('Operator syntax only supports inclusive ranges');\n  }\n\n  return fieldName + ':[' + ast.toKueryExpression(gte) + ' to ' + ast.toKueryExpression(lte) + ']';\n}\n\nfunction extractArguments(args) {\n  if (args.gt && args.gte || args.lt && args.lte) {\n    throw new Error('range ends cannot be both inclusive and exclusive');\n  }\n\n  var unnamedArgOrder = ['gte', 'lte', 'format'];\n\n  return args.reduce(function (acc, arg, index) {\n    if (arg.type === 'namedArg') {\n      acc[arg.name] = arg.value;\n    } else {\n      acc[unnamedArgOrder[index]] = arg;\n    }\n\n    return acc;\n  }, {});\n}",null]}