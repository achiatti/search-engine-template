{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/vis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/vis.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VisProvider = VisProvider;\n\nvar _events = require('events');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _vis_types = require('ui/registry/vis_types');\n\nvar _agg_configs = require('ui/vis/agg_configs');\n\nvar _persisted_state = require('ui/persisted_state');\n\nvar _brush_event = require('ui/utils/brush_event');\n\nvar _query_filter = require('ui/filter_bar/query_filter');\n\nvar _filter_bar_click_handler = require('ui/filter_bar/filter_bar_click_handler');\n\nvar _vis_update = require('./vis_update');\n\nvar _query_manager = require('../query_manager');\n\nvar _kuery = require('ui/kuery');\n\nvar kueryAPI = _interopRequireWildcard(_kuery);\n\nvar _search_source = require('ui/courier/data_source/search_source');\n\nvar _saved_objects = require('ui/saved_objects');\n\nvar _filter_manager = require('ui/filter_manager');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @name Vis\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description This class consists of aggs, params, listeners, title, and type.\nggs: Instances of AggConfig.\narams: The settings in the Options tab.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Not to be confused with vislib/vis.js.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nfunction VisProvider(Private, Promise, indexPatterns, timefilter, getAppState) {\n  var visTypes = Private(_vis_types.VisTypesRegistryProvider);\n  var AggConfigs = Private(_agg_configs.VisAggConfigsProvider);\n  var brushEvent = Private(_brush_event.UtilsBrushEventProvider);\n  var queryFilter = Private(_query_filter.FilterBarQueryFilterProvider);\n  var filterBarClickHandler = Private(_filter_bar_click_handler.FilterBarClickHandlerProvider);\n  var SearchSource = Private(_search_source.SearchSourceProvider);\n  var savedObjectsClient = Private(_saved_objects.SavedObjectsClientProvider);\n  var filterManager = Private(_filter_manager.FilterManagerProvider);\n\n  var Vis = function (_EventEmitter) {\n    _inherits(Vis, _EventEmitter);\n\n    function Vis(indexPattern, visState, uiState) {\n      _classCallCheck(this, Vis);\n\n      var _this = _possibleConstructorReturn(this, (Vis.__proto__ || Object.getPrototypeOf(Vis)).call(this));\n\n      visState = visState || {};\n\n      if (_lodash2.default.isString(visState)) {\n        visState = {\n          type: visState\n        };\n      }\n      _this.indexPattern = indexPattern;\n\n      if (!uiState) {\n        uiState = new _persisted_state.PersistedState();\n      }\n\n      _this.setCurrentState(visState);\n      _this.setState(_this.getCurrentState(), false);\n      _this.setUiState(uiState);\n\n      // Session state is for storing information that is transitory, and will not be saved with the visualization.\n      // For instance, map bounds, which depends on the view port, browser window size, etc.\n      _this.sessionState = {};\n\n      _this.API = {\n        savedObjectsClient: savedObjectsClient,\n        SearchSource: SearchSource,\n        indexPatterns: indexPatterns,\n        timeFilter: timefilter,\n        filterManager: filterManager,\n        queryFilter: queryFilter,\n        queryManager: (0, _query_manager.queryManagerFactory)(getAppState),\n        kuery: kueryAPI,\n        events: {\n          filter: function filter(event) {\n            var appState = getAppState();\n            filterBarClickHandler(appState)(event);\n          }, brush: function brush(event) {\n            var appState = getAppState();\n            brushEvent(appState)(event);\n          }\n        }\n      };\n      return _this;\n    }\n\n    _createClass(Vis, [{\n      key: 'isEditorMode',\n      value: function isEditorMode() {\n        return this.editorMode || false;\n      }\n    }, {\n      key: 'setCurrentState',\n      value: function setCurrentState(state) {\n        this.title = state.title || '';\n        var type = state.type || this.type;\n        if (_lodash2.default.isString(type)) {\n          this.type = visTypes.byName[type];\n          if (!this.type) {\n            throw new Error('Invalid type \"' + type + '\"');\n          }\n        } else {\n          this.type = type;\n        }\n\n        this.params = _lodash2.default.defaults({}, _lodash2.default.cloneDeep(state.params || {}), _lodash2.default.cloneDeep(this.type.visConfig.defaults || {}));\n\n        (0, _vis_update.updateVisualizationConfig)(state.params, this.params);\n\n        this.aggs = new AggConfigs(this, state.aggs);\n      }\n    }, {\n      key: 'setState',\n      value: function setState(state) {\n        var updateCurrentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        this._state = _lodash2.default.cloneDeep(state);\n        if (updateCurrentState) this.resetState();\n      }\n    }, {\n      key: 'updateState',\n      value: function updateState() {\n        this.setState(this.getCurrentState(true));\n        this.emit('update');\n      }\n    }, {\n      key: 'resetState',\n      value: function resetState() {\n        this.setCurrentState(this._state);\n      }\n    }, {\n      key: 'forceReload',\n      value: function forceReload() {\n        this.emit('reload');\n      }\n    }, {\n      key: 'getCurrentState',\n      value: function getCurrentState(includeDisabled) {\n        return {\n          title: this.title,\n          type: this.type.name,\n          params: this.params,\n          aggs: this.aggs.map(function (agg) {\n            return agg.toJSON();\n          }).filter(function (agg) {\n            return includeDisabled || agg.enabled;\n          }).filter(Boolean)\n        };\n      }\n    }, {\n      key: 'getStateInternal',\n      value: function getStateInternal(includeDisabled) {\n        return {\n          title: this._state.title,\n          type: this._state.type,\n          params: this._state.params,\n          aggs: this._state.aggs.filter(function (agg) {\n            return includeDisabled || agg.enabled;\n          })\n        };\n      }\n    }, {\n      key: 'getEnabledState',\n      value: function getEnabledState() {\n        return this.getStateInternal(false);\n      }\n    }, {\n      key: 'getAggConfig',\n      value: function getAggConfig() {\n        return new AggConfigs(this, this.aggs.raw.filter(function (agg) {\n          return agg.enabled;\n        }));\n      }\n    }, {\n      key: 'getState',\n      value: function getState() {\n        return this.getStateInternal(true);\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var uiJson = this.hasUiState() ? this.getUiState().toJSON() : {};\n        var uiState = new _persisted_state.PersistedState(uiJson);\n        var clonedVis = new Vis(this.indexPattern, this.getState(), uiState);\n        clonedVis.editorMode = this.editorMode;\n        return clonedVis;\n      }\n\n      /**\n       *  Hook for pre-flight logic, see AggType#onSearchRequestStart()\n       *  @param {Courier.SearchSource} searchSource\n       *  @param {Courier.SearchRequest} searchRequest\n       *  @return {Promise<undefined>}\n       */\n\n    }, {\n      key: 'onSearchRequestStart',\n      value: function onSearchRequestStart(searchSource, searchRequest) {\n        return Promise.map(this.aggs.getRequestAggs(), function (agg) {\n          return agg.onSearchRequestStart(searchSource, searchRequest);\n        });\n      }\n    }, {\n      key: 'isHierarchical',\n      value: function isHierarchical() {\n        if (_lodash2.default.isFunction(this.type.hierarchicalData)) {\n          return !!this.type.hierarchicalData(this);\n        } else {\n          return !!this.type.hierarchicalData;\n        }\n      }\n    }, {\n      key: 'hasSchemaAgg',\n      value: function hasSchemaAgg(schemaName, aggTypeName) {\n        var aggs = this.aggs.bySchemaName[schemaName] || [];\n        return aggs.some(function (agg) {\n          if (!agg.type || !agg.type.name) return false;\n          return agg.type.name === aggTypeName;\n        });\n      }\n    }, {\n      key: 'hasUiState',\n      value: function hasUiState() {\n        return !!this.__uiState;\n      }\n    }, {\n      key: 'setUiState',\n      value: function setUiState(uiState) {\n        if (uiState instanceof _persisted_state.PersistedState) {\n          this.__uiState = uiState;\n        }\n      }\n    }, {\n      key: 'getUiState',\n      value: function getUiState() {\n        return this.__uiState;\n      }\n\n      /**\n       * Currently this is only used to extract map-specific information\n       * (e.g. mapZoom, mapCenter).\n       */\n\n    }, {\n      key: 'uiStateVal',\n      value: function uiStateVal(key, val) {\n        if (this.hasUiState()) {\n          if (_lodash2.default.isUndefined(val)) {\n            return this.__uiState.get(key);\n          }\n          return this.__uiState.set(key, val);\n        }\n        return val;\n      }\n    }]);\n\n    return Vis;\n  }(_events.EventEmitter);\n\n  Vis.prototype.type = 'histogram';\n\n  return Vis;\n}",null]}