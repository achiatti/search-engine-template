{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/editor_utils.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/input_control_vis/public/editor_utils.js","mtime":1515552027000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar setControl = exports.setControl = function setControl(controls, controlIndex, control) {\n  return [].concat(_toConsumableArray(controls.slice(0, controlIndex)), [control], _toConsumableArray(controls.slice(controlIndex + 1)));\n};\n\nvar addControl = exports.addControl = function addControl(controls, control) {\n  return [].concat(_toConsumableArray(controls), [control]);\n};\n\nvar moveControl = exports.moveControl = function moveControl(controls, controlIndex, direction) {\n  var newIndex = void 0;\n  if (direction >= 0) {\n    newIndex = controlIndex + 1;\n  } else {\n    newIndex = controlIndex - 1;\n  }\n\n  if (newIndex < 0) {\n    // Move first item to last\n    return [].concat(_toConsumableArray(controls.slice(1)), [controls[0]]);\n  } else if (newIndex >= controls.length) {\n    var lastItemIndex = controls.length - 1;\n    // Move last item to first\n    return [controls[lastItemIndex]].concat(_toConsumableArray(controls.slice(0, lastItemIndex)));\n  } else {\n    var swapped = controls.slice();\n    var temp = swapped[newIndex];\n    swapped[newIndex] = swapped[controlIndex];\n    swapped[controlIndex] = temp;\n    return swapped;\n  }\n};\n\nvar removeControl = exports.removeControl = function removeControl(controls, controlIndex) {\n  return [].concat(_toConsumableArray(controls.slice(0, controlIndex)), _toConsumableArray(controls.slice(controlIndex + 1)));\n};\n\nvar getDefaultOptions = exports.getDefaultOptions = function getDefaultOptions(type) {\n  var defaultOptions = {};\n  switch (type) {\n    case 'range':\n      defaultOptions.decimalPlaces = 0;\n      defaultOptions.step = 1;\n      break;\n    case 'list':\n      defaultOptions.type = 'terms';\n      defaultOptions.multiselect = true;\n      defaultOptions.size = 5;\n      defaultOptions.order = 'desc';\n      break;\n  }\n  return defaultOptions;\n};\n\nvar newControl = exports.newControl = function newControl(type) {\n  return {\n    id: new Date().getTime().toString(),\n    indexPattern: '',\n    fieldName: '',\n    label: '',\n    type: type,\n    options: getDefaultOptions(type)\n  };\n};\n\nvar getTitle = exports.getTitle = function getTitle(controlParams, controlIndex) {\n  var title = controlParams.type + ': ' + controlIndex;\n  if (controlParams.label) {\n    title = controlParams.type + ': ' + controlParams.label;\n  } else if (controlParams.fieldName) {\n    title = controlParams.type + ': ' + controlParams.fieldName;\n  }\n  return title;\n};",null]}