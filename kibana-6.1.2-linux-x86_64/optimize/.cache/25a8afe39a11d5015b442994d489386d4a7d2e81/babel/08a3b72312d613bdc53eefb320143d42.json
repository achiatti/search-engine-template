{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/doc_table/components/table_header.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/doc_table/components/table_header.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nrequire('ui/filters/short_dots');\n\nvar _table_header = require('ui/doc_table/components/table_header.html');\n\nvar _table_header2 = _interopRequireDefault(_table_header);\n\nvar _modules = require('ui/modules');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('app/discover');\n\n_module.directive('kbnTableHeader', function (shortDotsFilter) {\n  return {\n    restrict: 'A',\n    scope: {\n      columns: '=',\n      sortOrder: '=',\n      indexPattern: '=',\n      onChangeSortOrder: '=?',\n      onRemoveColumn: '=?',\n      onMoveColumn: '=?'\n    },\n    template: _table_header2.default,\n    controller: function controller($scope) {\n      $scope.isSortableColumn = function isSortableColumn(columnName) {\n        return !!$scope.indexPattern && _lodash2.default.isFunction($scope.onChangeSortOrder) && _lodash2.default.get($scope, ['indexPattern', 'fields', 'byName', columnName, 'sortable'], false);\n      };\n\n      $scope.tooltip = function (column) {\n        if (!$scope.isSortableColumn(column)) return '';\n        return 'Sort by ' + shortDotsFilter(column);\n      };\n\n      $scope.canMoveColumnLeft = function canMoveColumn(columnName) {\n        return _lodash2.default.isFunction($scope.onMoveColumn) && $scope.columns.indexOf(columnName) > 0;\n      };\n\n      $scope.canMoveColumnRight = function canMoveColumn(columnName) {\n        return _lodash2.default.isFunction($scope.onMoveColumn) && $scope.columns.indexOf(columnName) < $scope.columns.length - 1;\n      };\n\n      $scope.canRemoveColumn = function canRemoveColumn(columnName) {\n        return _lodash2.default.isFunction($scope.onRemoveColumn) && (columnName !== '_source' || $scope.columns.length > 1);\n      };\n\n      $scope.headerClass = function (column) {\n        if (!$scope.isSortableColumn(column)) return;\n\n        var sortOrder = $scope.sortOrder;\n        var defaultClass = ['fa', 'fa-sort-up', 'table-header-sortchange'];\n\n        if (!sortOrder || column !== sortOrder[0]) return defaultClass;\n        return ['fa', sortOrder[1] === 'asc' ? 'fa-sort-up' : 'fa-sort-down'];\n      };\n\n      $scope.moveColumnLeft = function moveLeft(columnName) {\n        var newIndex = $scope.columns.indexOf(columnName) - 1;\n\n        if (newIndex < 0) {\n          return;\n        }\n\n        $scope.onMoveColumn(columnName, newIndex);\n      };\n\n      $scope.moveColumnRight = function moveRight(columnName) {\n        var newIndex = $scope.columns.indexOf(columnName) + 1;\n\n        if (newIndex >= $scope.columns.length) {\n          return;\n        }\n\n        $scope.onMoveColumn(columnName, newIndex);\n      };\n\n      $scope.cycleSortOrder = function cycleSortOrder(columnName) {\n        if (!$scope.isSortableColumn(columnName)) {\n          return;\n        }\n\n        var _$scope$sortOrder = _slicedToArray($scope.sortOrder, 2),\n            currentColumnName = _$scope$sortOrder[0],\n            _$scope$sortOrder$ = _$scope$sortOrder[1],\n            currentDirection = _$scope$sortOrder$ === undefined ? 'asc' : _$scope$sortOrder$;\n\n        var newDirection = columnName === currentColumnName && currentDirection === 'asc' ? 'desc' : 'asc';\n\n        $scope.onChangeSortOrder(columnName, newDirection);\n      };\n\n      $scope.getAriaLabelForColumn = function getAriaLabelForColumn(name) {\n        if (!$scope.isSortableColumn(name)) return null;\n\n        var _$scope$sortOrder2 = _slicedToArray($scope.sortOrder, 2),\n            currentColumnName = _$scope$sortOrder2[0],\n            _$scope$sortOrder2$ = _$scope$sortOrder2[1],\n            currentDirection = _$scope$sortOrder2$ === undefined ? 'asc' : _$scope$sortOrder2$;\n\n        if (name === currentColumnName && currentDirection === 'asc') {\n          return 'Sort ' + name + ' descending';\n        }\n\n        return 'Sort ' + name + ' ascending';\n      };\n    }\n  };\n});",null]}