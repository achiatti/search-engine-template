{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis_params.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis_params.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _modules = require('ui/modules');\n\nvar _metric_vis_params = require('./metric_vis_params.html');\n\nvar _metric_vis_params2 = _interopRequireDefault(_metric_vis_params);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\n_module.directive('metricVisParams', function () {\n  return {\n    restrict: 'E',\n    template: _metric_vis_params2.default,\n    replace: true,\n    link: function link($scope) {\n      $scope.collections = $scope.vis.type.editorConfig.collections;\n      $scope.showColorRange = true;\n\n      $scope.$watch('vis.params.metric.metricColorMode', function (newValue) {\n        switch (newValue) {\n          case 'Labels':\n            $scope.vis.params.metric.style.labelColor = true;\n            $scope.vis.params.metric.style.bgColor = false;\n            break;\n          case 'Background':\n            $scope.vis.params.metric.style.labelColor = false;\n            $scope.vis.params.metric.style.bgColor = true;\n            break;\n          case 'None':\n            $scope.vis.params.metric.style.labelColor = false;\n            $scope.vis.params.metric.style.bgColor = false;\n            break;\n        }\n      });\n\n      $scope.resetColors = function () {\n        $scope.uiState.set('vis.colors', null);\n        $scope.customColors = false;\n      };\n\n      $scope.getGreaterThan = function (index) {\n        if (index === 0) return 0;\n        return $scope.vis.params.metric.colorsRange[index - 1].to;\n      };\n\n      $scope.addRange = function () {\n        var previousRange = _lodash2.default.last($scope.vis.params.metric.colorsRange);\n        var from = previousRange ? previousRange.to : 0;\n        var to = previousRange ? from + (previousRange.to - previousRange.from) : 100;\n        $scope.vis.params.metric.colorsRange.push({ from: from, to: to });\n      };\n\n      $scope.removeRange = function (index) {\n        $scope.vis.params.metric.colorsRange.splice(index, 1);\n      };\n\n      $scope.getColor = function (index) {\n        var defaultColors = this.uiState.get('vis.defaultColors');\n        var overwriteColors = this.uiState.get('vis.colors');\n        var colors = defaultColors ? _lodash2.default.defaults({}, overwriteColors, defaultColors) : overwriteColors;\n        return colors ? Object.values(colors)[index] : 'transparent';\n      };\n\n      $scope.uiState.on('colorChanged', function () {\n        $scope.customColors = true;\n      });\n    }\n  };\n});",null]}