{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/modals/confirm_modal.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/modals/confirm_modal.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfirmationButtonTypes = undefined;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _lodash = require('lodash');\n\nvar _modules = require('ui/modules');\n\nvar _confirm_modal = require('./confirm_modal.html');\n\nvar _confirm_modal2 = _interopRequireDefault(_confirm_modal);\n\nvar _modal_overlay = require('./modal_overlay');\n\nvar _components = require('ui_framework/components');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _modules.uiModules.get('kibana');\n\nvar ConfirmationButtonTypes = exports.ConfirmationButtonTypes = {\n  CONFIRM: _components.KUI_MODAL_CONFIRM_BUTTON,\n  CANCEL: _components.KUI_MODAL_CANCEL_BUTTON\n};\n\n/**\n * @typedef {Object} ConfirmModalOptions\n * @property {String} confirmButtonText\n * @property {String=} cancelButtonText\n * @property {function} onConfirm\n * @property {function=} onCancel\n * @property {String=} title - If given, shows a title on the confirm modal.\n */\n\n_module.factory('confirmModal', function ($rootScope, $compile) {\n  var modalPopover = void 0;\n  var confirmQueue = [];\n\n  /**\n   * @param {String} message - the message to show in the body of the confirmation dialog.\n   * @param {ConfirmModalOptions} - Options to further customize the dialog.\n   */\n  return function confirmModal(message, customOptions) {\n    var defaultOptions = {\n      onCancel: _lodash.noop,\n      cancelButtonText: 'Cancel',\n      defaultFocusedButton: ConfirmationButtonTypes.CONFIRM\n    };\n\n    if (!customOptions.confirmButtonText || !customOptions.onConfirm) {\n      throw new Error('Please specify confirmation button text and onConfirm action');\n    }\n\n    var options = Object.assign(defaultOptions, customOptions);\n\n    // Special handling for onClose - if no specific callback was supplied, default to the\n    // onCancel callback.\n    options.onClose = customOptions.onClose || options.onCancel;\n\n    var confirmScope = $rootScope.$new();\n\n    confirmScope.message = message;\n    confirmScope.defaultFocusedButton = options.defaultFocusedButton;\n    confirmScope.confirmButtonText = options.confirmButtonText;\n    confirmScope.cancelButtonText = options.cancelButtonText;\n    confirmScope.title = options.title;\n    confirmScope.onConfirm = function () {\n      destroy();\n      options.onConfirm();\n    };\n    confirmScope.onCancel = function () {\n      destroy();\n      options.onCancel();\n    };\n    confirmScope.onClose = function () {\n      destroy();\n      options.onClose();\n    };\n\n    function showModal(confirmScope) {\n      var modalInstance = $compile(_confirm_modal2.default)(confirmScope);\n      modalPopover = new _modal_overlay.ModalOverlay(modalInstance);\n    }\n\n    if (modalPopover) {\n      confirmQueue.unshift(confirmScope);\n    } else {\n      showModal(confirmScope);\n    }\n\n    function destroy() {\n      modalPopover.destroy();\n      modalPopover = undefined;\n      _angular2.default.element(document.body).off('keydown');\n      confirmScope.$destroy();\n\n      if (confirmQueue.length > 0) {\n        showModal(confirmQueue.pop());\n      }\n    }\n  };\n});",null]}