{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/compat/init_after_bindings_workaround.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/compat/init_after_bindings_workaround.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callAfterBindingsWorkaround = callAfterBindingsWorkaround;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *  WHAT NEEDS THIS WORKAROUND?\n *  ===========================\n *  Any directive that meets all of the following criteria:\n *   - uses isolate scope bindings\n *   - sets `bindToController: true`\n *   - synchronously accesses the bound values in the controller constructor\n *\n *\n *\n *  HOW DO I GET RID OF IT?\n *  =======================\n *  The quick band-aid solution:\n *    Wrap your constructor logic so it doesn't access bound values\n *    synchronously. This can have subtle bugs which is why I didn't\n *    just wrap all of the offenders in $timeout() and made this\n *    workaround instead.\n *\n *  The more complete solution:\n *    Use the new component lifecycle methods, like `$onInit()`, to access\n *    bindings immediately after the constructor is called, which shouldn't\n *    have any observable effect outside of the constructor.\n *\n *    NOTE: `$onInit()` is not dependency injected, if you need controller specific\n *      dependencies like `$scope` then you're probably using watchers and should\n *      take a look at the new one-way data flow facitilies available to\n *      directives/components:\n *\n *      https://docs.angularjs.org/guide/component#component-based-application-architecture\n *\n */\n\nvar InitAfterBindingsWorkaround = exports.InitAfterBindingsWorkaround = function InitAfterBindingsWorkaround($injector, $attrs, $element, $scope, $transclude) {\n  var _this = this;\n\n  _classCallCheck(this, InitAfterBindingsWorkaround);\n\n  if (!this.initAfterBindings) {\n    throw new Error('When using inheritance you must move the logic in the constructor to the `initAfterBindings` method');\n  }\n\n  this.$onInit = function () {\n    $injector.invoke(_this.initAfterBindings, _this, {\n      $attrs: $attrs,\n      $element: $element,\n      $scope: $scope,\n      $transclude: $transclude\n    });\n  };\n};\n\nInitAfterBindingsWorkaround.$inject = ['$injector', '$attrs', '$element', '$scope', '$transclude'];\nfunction callAfterBindingsWorkaround(constructor) {\n  return function InitAfterBindingsWrapper($injector, $attrs, $element, $scope, $transclude) {\n    var _this2 = this;\n\n    this.$onInit = function () {\n      $injector.invoke(constructor, _this2, {\n        $attrs: $attrs,\n        $element: $element,\n        $scope: $scope,\n        $transclude: $transclude\n      });\n    };\n  };\n}",null]}