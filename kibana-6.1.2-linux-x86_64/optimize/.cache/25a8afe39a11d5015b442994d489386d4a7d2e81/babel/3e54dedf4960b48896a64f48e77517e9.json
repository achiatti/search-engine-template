{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/hierarchical/_transform_aggregation.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/hierarchical/_transform_aggregation.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HierarchicalTransformAggregationProvider = HierarchicalTransformAggregationProvider;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _extract_buckets = require('ui/agg_response/hierarchical/_extract_buckets');\n\nvar _agg_config_result = require('ui/vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction HierarchicalTransformAggregationProvider() {\n  return function transformAggregation(agg, metric, aggData, parent) {\n    return _lodash2.default.map((0, _extract_buckets.extractBuckets)(aggData, agg), function (bucket) {\n      var aggConfigResult = new _agg_config_result2.default(agg, parent && parent.aggConfigResult, metric.getValue(bucket), agg.getKey(bucket));\n\n      var branch = {\n        name: agg.fieldFormatter()(bucket.key),\n        size: aggConfigResult.value,\n        aggConfig: agg,\n        aggConfigResult: aggConfigResult\n      };\n\n      // if the parent is defined then we need to set the parent of the branch\n      // this will be used later for filters for waking up the parent path.\n      if (parent) {\n        branch.parent = parent;\n      }\n\n      // If the next bucket exists and it has children the we need to\n      // transform it as well. This is where the recursion happens.\n      if (agg._next) {\n        var nextBucket = bucket[agg._next.id];\n        if (nextBucket && nextBucket.buckets) {\n          branch.children = transformAggregation(agg._next, metric, nextBucket, branch);\n        }\n      }\n\n      return branch;\n    });\n  };\n}",null]}