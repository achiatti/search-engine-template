{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_monitor_factory.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/state_management/state_monitor_factory.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stateMonitorFactory = undefined;\n\nvar _lodash = require('lodash');\n\nvar stateMonitorFactory = exports.stateMonitorFactory = {\n  create: function create(state, customInitialState) {\n    return stateMonitor(state, customInitialState);\n  }\n};\n\nfunction stateMonitor(state, customInitialState) {\n  var destroyed = false;\n  var ignoredProps = [];\n  var changeHandlers = [];\n  var initialState = void 0;\n\n  _setInitialState(customInitialState);\n\n  function _setInitialState(customInitialState) {\n    // state.toJSON returns a reference, clone so we can mutate it safely\n    initialState = (0, _lodash.cloneDeep)(customInitialState) || (0, _lodash.cloneDeep)(state.toJSON());\n  }\n\n  function removeIgnoredProps(state) {\n    ignoredProps.forEach(function (path) {\n      (0, _lodash.set)(state, path, true);\n    });\n    return state;\n  }\n\n  function getStatus() {\n    // state.toJSON returns a reference, clone so we can mutate it safely\n    var currentState = removeIgnoredProps((0, _lodash.cloneDeep)(state.toJSON()));\n    var isClean = (0, _lodash.isEqual)(currentState, initialState);\n\n    return {\n      clean: isClean,\n      dirty: !isClean\n    };\n  }\n\n  function dispatchChange() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var status = getStatus();\n    changeHandlers.forEach(function (changeHandler) {\n      changeHandler(status, type, keys);\n    });\n  }\n\n  function dispatchFetch(keys) {\n    dispatchChange('fetch_with_changes', keys);\n  }\n\n  function dispatchSave(keys) {\n    dispatchChange('save_with_changes', keys);\n  }\n\n  function dispatchReset(keys) {\n    dispatchChange('reset_with_changes', keys);\n  }\n\n  return {\n    setInitialState: function setInitialState(customInitialState) {\n      if (!(0, _lodash.isPlainObject)(customInitialState)) throw new TypeError('The default state must be an object');\n\n      // check the current status\n      var previousStatus = getStatus();\n\n      // update the initialState and apply ignoredProps\n      _setInitialState(customInitialState);\n      removeIgnoredProps(initialState);\n\n      // fire the change handler if the status has changed\n      if (!(0, _lodash.isEqual)(previousStatus, getStatus())) dispatchChange();\n    },\n    ignoreProps: function ignoreProps(props) {\n      ignoredProps = ignoredProps.concat(props);\n      removeIgnoredProps(initialState);\n      return this;\n    },\n    onChange: function onChange(callback) {\n      if (destroyed) throw new Error('Monitor has been destroyed');\n      if (typeof callback !== 'function') throw new Error('onChange handler must be a function');\n\n      changeHandlers.push(callback);\n\n      // Listen for state events.\n      state.on('fetch_with_changes', dispatchFetch);\n      state.on('save_with_changes', dispatchSave);\n      state.on('reset_with_changes', dispatchReset);\n\n      // if the state is already dirty, fire the change handler immediately\n      var status = getStatus();\n      if (status.dirty) dispatchChange();\n\n      return this;\n    },\n    destroy: function destroy() {\n      destroyed = true;\n      changeHandlers = undefined;\n      state.off('fetch_with_changes', dispatchFetch);\n      state.off('save_with_changes', dispatchSave);\n      state.off('reset_with_changes', dispatchReset);\n    }\n  };\n}",null]}