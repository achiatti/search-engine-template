{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/request/segmented_handle.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/courier/fetch/request/segmented_handle.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.SegmentedHandleProvider = SegmentedHandleProvider;\n\nvar _events = require('ui/events');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction SegmentedHandleProvider(Private) {\n  var Events = Private(_events.EventsProvider);\n\n  var segmentedRequest = Symbol('Actual Segmented Request');\n\n  /**\n   * Simple class for creating an object to send to the\n   * requester of a SegmentedRequest. Since the SegmentedRequest\n   * extends AbstractRequest, it wasn't able to be the event\n   * emitter it was born to be. This provides a channel for\n   * setting values on the segmented request, and an event\n   * emitter for the request to speak outwardly\n   *\n   * @param {SegmentedRequest} - req - the requst this handle relates to\n   */\n  return function (_Events) {\n    _inherits(SegmentedHandle, _Events);\n\n    function SegmentedHandle(req) {\n      _classCallCheck(this, SegmentedHandle);\n\n      var _this = _possibleConstructorReturn(this, (SegmentedHandle.__proto__ || Object.getPrototypeOf(SegmentedHandle)).call(this));\n\n      _this[segmentedRequest] = req;\n      return _this;\n    }\n\n    _createClass(SegmentedHandle, [{\n      key: 'setDirection',\n      value: function setDirection() {\n        var _segmentedRequest;\n\n        (_segmentedRequest = this[segmentedRequest]).setDirection.apply(_segmentedRequest, arguments);\n      }\n    }, {\n      key: 'setSize',\n      value: function setSize() {\n        var _segmentedRequest2;\n\n        (_segmentedRequest2 = this[segmentedRequest]).setSize.apply(_segmentedRequest2, arguments);\n      }\n    }, {\n      key: 'setMaxSegments',\n      value: function setMaxSegments() {\n        var _segmentedRequest3;\n\n        (_segmentedRequest3 = this[segmentedRequest]).setMaxSegments.apply(_segmentedRequest3, arguments);\n      }\n    }, {\n      key: 'setSortFn',\n      value: function setSortFn() {\n        var _segmentedRequest4;\n\n        (_segmentedRequest4 = this[segmentedRequest]).setSortFn.apply(_segmentedRequest4, arguments);\n      }\n    }]);\n\n    return SegmentedHandle;\n  }(Events);\n}",null]}