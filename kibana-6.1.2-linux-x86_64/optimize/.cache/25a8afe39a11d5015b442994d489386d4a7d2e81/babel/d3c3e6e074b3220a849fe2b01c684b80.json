{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/nav.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/chrome/api/nav.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initChromeNavApi = initChromeNavApi;\n\nvar _lodash = require('lodash');\n\nvar _prepend_path = require('ui/url/prepend_path');\n\nvar _relative_to_absolute = require('ui/url/relative_to_absolute');\n\nvar _absolute_to_parsed_url = require('ui/url/absolute_to_parsed_url');\n\nfunction initChromeNavApi(chrome, internals) {\n  chrome.getNavLinks = function () {\n    return internals.nav;\n  };\n\n  chrome.navLinkExists = function (id) {\n    return !!internals.nav.find(function (link) {\n      return link.id === id;\n    });\n  };\n\n  chrome.getNavLinkById = function (id) {\n    var navLink = internals.nav.find(function (link) {\n      return link.id === id;\n    });\n    if (!navLink) {\n      throw new Error('Nav link for id = ' + id + ' not found');\n    }\n    return navLink;\n  };\n\n  chrome.showOnlyById = function (id) {\n    (0, _lodash.remove)(internals.nav, function (app) {\n      return app.id !== id;\n    });\n  };\n\n  chrome.getBasePath = function () {\n    return internals.basePath || '';\n  };\n\n  /**\n   *\n   * @param url {string} a relative url. ex: /app/kibana#/management\n   * @return {string} the relative url with the basePath prepended to it. ex: rkz/app/kibana#/management\n   */\n  chrome.addBasePath = function (url) {\n    return (0, _prepend_path.prependPath)(url, chrome.getBasePath());\n  };\n\n  chrome.removeBasePath = function (url) {\n    if (!internals.basePath) {\n      return url;\n    }\n\n    var basePathRegExp = new RegExp('^' + internals.basePath);\n    return url.replace(basePathRegExp, '');\n  };\n\n  function lastSubUrlKey(link) {\n    return 'lastSubUrl:' + link.url;\n  }\n\n  function setLastUrl(link, url) {\n    if (link.linkToLastSubUrl === false) {\n      return;\n    }\n\n    link.lastSubUrl = url;\n    internals.appUrlStore.setItem(lastSubUrlKey(link), url);\n  }\n\n  function refreshLastUrl(link) {\n    link.lastSubUrl = internals.appUrlStore.getItem(lastSubUrlKey(link)) || link.lastSubUrl || link.url;\n  }\n\n  function injectNewGlobalState(link, fromAppId, newGlobalState) {\n    var kibanaParsedUrl = (0, _absolute_to_parsed_url.absoluteToParsedUrl)(link.lastSubUrl, chrome.getBasePath());\n\n    // don't copy global state if links are for different apps\n    if (fromAppId !== kibanaParsedUrl.appId) return;\n\n    kibanaParsedUrl.setGlobalState(newGlobalState);\n\n    link.lastSubUrl = kibanaParsedUrl.getAbsoluteUrl();\n  }\n\n  /**\n   * Manually sets the last url for the given app. The last url for a given app is updated automatically during\n   * normal page navigation, so this should only need to be called to insert a last url that was not actually\n   * navigated to. For instance, when saving an object and redirecting to another page, the last url of the app\n   * should be the saved instance, but because of the redirect to a different page (e.g. `Save and Add to Dashboard`\n   * on visualize tab), it won't be tracked automatically and will need to be inserted manually. See\n   * https://github.com/elastic/kibana/pull/11932 for more background on why this was added.\n   * @param linkId {String} - an id that represents the navigation link.\n   * @param kibanaParsedUrl {KibanaParsedUrl} the url to track\n   */\n  chrome.trackSubUrlForApp = function (linkId, kibanaParsedUrl) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = internals.nav[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var link = _step.value;\n\n        if (link.id === linkId) {\n          var absoluteUrl = kibanaParsedUrl.getAbsoluteUrl();\n          setLastUrl(link, absoluteUrl);\n          return;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  internals.trackPossibleSubUrl = function (url) {\n    var kibanaParsedUrl = (0, _absolute_to_parsed_url.absoluteToParsedUrl)(url, chrome.getBasePath());\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = internals.nav[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var link = _step2.value;\n\n        link.active = url.startsWith(link.subUrlBase);\n        if (link.active) {\n          setLastUrl(link, url);\n          continue;\n        }\n\n        refreshLastUrl(link);\n\n        var newGlobalState = kibanaParsedUrl.getGlobalState();\n        if (newGlobalState) {\n          injectNewGlobalState(link, kibanaParsedUrl.appId, newGlobalState);\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  };\n\n  internals.nav.forEach(function (link) {\n    link.url = (0, _relative_to_absolute.relativeToAbsolute)(link.url);\n    link.subUrlBase = (0, _relative_to_absolute.relativeToAbsolute)(link.subUrlBase);\n  });\n\n  // simulate a possible change in url to initialize the\n  // link.active and link.lastUrl properties\n  internals.trackPossibleSubUrl(document.location.href);\n}",null]}