{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/embeddable/embeddable_factory.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/embeddable/embeddable_factory.js","mtime":1515552035000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The EmbeddableFactory renders an embeddable of a certain type at a given dom node.\n */\nvar EmbeddableFactory = exports.EmbeddableFactory = function () {\n  function EmbeddableFactory() {\n    _classCallCheck(this, EmbeddableFactory);\n\n    this.destroyEmbeddableMap = {};\n  }\n\n  /**\n   * @param {Element} domNode - the dom node to mount the rendered embeddable on\n   * @param {PanelState} panel - a panel object which container information about the panel. Can also be modified to\n   * store per panel information.\n   * @property {ContainerApi} containerApi - an id to specify the object that this panel contains.\n   * @param {Promise.<void>} A promise that resolves when the object is finished rendering.\n   * @return {Promise.<Embeddable>} A promise that resolves to a function that should be used to destroy the\n   * rendered embeddable.\n   */\n\n\n  _createClass(EmbeddableFactory, [{\n    key: 'render',\n    value: function render() /* domNode, panel, container */{\n      throw new Error('Must implement render.');\n    }\n  }, {\n    key: 'addDestroyEmeddable',\n    value: function addDestroyEmeddable(panelIndex, destroyEmbeddable) {\n      this.destroyEmbeddableMap[panelIndex] = destroyEmbeddable;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy(panelIndex) {\n      // Possible there is no destroy function mapped, for instance if there was an error thrown during render.\n      if (this.destroyEmbeddableMap[panelIndex]) {\n        this.destroyEmbeddableMap[panelIndex]();\n        delete this.destroyEmbeddableMap[panelIndex];\n      }\n    }\n  }]);\n\n  return EmbeddableFactory;\n}();",null]}