{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/response_handlers/basic.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vis/response_handlers/basic.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BasicResponseHandlerProvider = undefined;\n\nvar _index = require('ui/agg_response/index');\n\nvar _table = require('ui/agg_response/tabify/_table');\n\nvar _vis_response_handlers = require('ui/registry/vis_response_handlers');\n\nvar BasicResponseHandlerProvider = function BasicResponseHandlerProvider(Private) {\n  var aggResponse = Private(_index.AggResponseIndexProvider);\n  var Table = Private(_table.AggResponseTabifyTableProvider);\n\n  function convertTableGroup(vis, tableGroup) {\n    var tables = tableGroup.tables;\n    var firstChild = tables[0];\n    if (firstChild instanceof Table) {\n\n      var chart = convertTable(vis, firstChild);\n      // if chart is within a split, assign group title to its label\n      if (tableGroup.$parent) {\n        chart.label = tableGroup.title;\n      }\n      return chart;\n    }\n\n    if (!tables.length) return;\n    var out = {};\n    var outList = void 0;\n\n    tables.forEach(function (table) {\n      if (!outList) {\n        var aggConfig = table.aggConfig;\n        var direction = aggConfig.params.row ? 'rows' : 'columns';\n        outList = out[direction] = [];\n      }\n\n      var output = void 0;\n      if (output = convertTableGroup(vis, table)) {\n        outList.push(output);\n      }\n    });\n\n    return out;\n  }\n\n  function convertTable(vis, table) {\n    return vis.type.responseConverter ? vis.type.responseConverter(vis, table) : table;\n  }\n\n  return {\n    name: 'basic',\n    handler: function handler(vis, response) {\n      return new Promise(function (resolve) {\n        if (vis.isHierarchical()) {\n          // the hierarchical converter is very self-contained (woot!)\n          resolve(aggResponse.hierarchical(vis, response));\n        }\n\n        var tableGroup = aggResponse.tabify(vis, response, {\n          canSplit: true,\n          asAggConfigResults: true\n        });\n\n        var converted = convertTableGroup(vis, tableGroup);\n        if (!converted) {\n          // mimic a row of tables that doesn't have any tables\n          // https://github.com/elastic/kibana/blob/7bfb68cd24ed42b1b257682f93c50cd8d73e2520/src/kibana/components/vislib/components/zero_injection/inject_zeros.js#L32\n          converted = { rows: [] };\n        }\n\n        converted.hits = response.hits.total;\n\n        resolve(converted);\n      });\n    }\n  };\n};\n\n_vis_response_handlers.VisResponseHandlersRegistryProvider.register(BasicResponseHandlerProvider);\n\nexports.BasicResponseHandlerProvider = BasicResponseHandlerProvider;",null]}