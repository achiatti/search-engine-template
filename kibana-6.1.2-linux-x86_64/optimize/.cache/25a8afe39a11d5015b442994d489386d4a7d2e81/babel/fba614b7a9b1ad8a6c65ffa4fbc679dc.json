{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/filters/_prop_filter.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/filters/_prop_filter.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propFilter = propFilter;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Filters out a list by a given filter. This is currently used to impelment:\n *   - fieldType filters a list of fields by their type property\n *   - aggFilter filters a list of aggs by their name property\n *\n * @returns {function} - the filter function which can be registered with angular\n */\nfunction propFilter(prop) {\n  /**\n   * List filtering function which accepts an array or list of values that a property\n   * must contain\n   *\n   * @param  {array} list - array of items to filter\n   * @param  {function|array|string} filters - the values to match against the list\n   *   - if a function, it is expected to take the field property as argument and returns true to keep it.\n   *   - Can be also an array, a single value as a string, or a comma-seperated list of items\n   * @return {array} - the filtered list\n   */\n  return function (list, filters) {\n    if (!filters) return filters;\n\n    if (_lodash2.default.isFunction(filters)) {\n      return list.filter(function (item) {\n        return filters(item[prop]);\n      });\n    }\n\n    if (!Array.isArray(filters)) filters = filters.split(',');\n    if (_lodash2.default.contains(filters, '*')) return list;\n\n    var options = filters.reduce(function (options, filter) {\n      var type = 'include';\n      var value = filter;\n\n      if (filter.charAt(0) === '!') {\n        type = 'exclude';\n        value = filter.substr(1);\n      }\n\n      if (!options[type]) options[type] = [];\n      options[type].push(value);\n      return options;\n    }, {});\n\n    return list.filter(function (item) {\n      var value = item[prop];\n\n      var excluded = options.exclude && _lodash2.default.contains(options.exclude, value);\n      if (excluded) return false;\n\n      var included = !options.include || _lodash2.default.contains(options.include, value);\n      if (included) return true;\n\n      return false;\n    });\n  };\n}",null]}