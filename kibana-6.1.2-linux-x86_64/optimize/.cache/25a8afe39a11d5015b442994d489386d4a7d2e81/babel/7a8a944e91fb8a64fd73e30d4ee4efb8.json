{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/date_histogram.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_types/buckets/date_histogram.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggTypesBucketsDateHistogramProvider = AggTypesBucketsDateHistogramProvider;\n\nvar _jstimezonedetect = require('jstimezonedetect');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nrequire('ui/filters/field_type');\n\nrequire('ui/validate_date_interval');\n\nvar _bucket_agg_type = require('ui/agg_types/buckets/_bucket_agg_type');\n\nvar _time_buckets = require('ui/time_buckets');\n\nvar _date_histogram = require('ui/agg_types/buckets/create_filter/date_histogram');\n\nvar _interval_options = require('ui/agg_types/buckets/_interval_options');\n\nvar _time_interval = require('ui/agg_types/controls/time_interval.html');\n\nvar _time_interval2 = _interopRequireDefault(_time_interval);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction AggTypesBucketsDateHistogramProvider(timefilter, config, Private) {\n  var BucketAggType = Private(_bucket_agg_type.AggTypesBucketsBucketAggTypeProvider);\n  var TimeBuckets = Private(_time_buckets.TimeBucketsProvider);\n  var createFilter = Private(_date_histogram.AggTypesBucketsCreateFilterDateHistogramProvider);\n  var intervalOptions = Private(_interval_options.AggTypesBucketsIntervalOptionsProvider);\n\n  var detectedTimezone = _jstimezonedetect.jstz.determine().name();\n  var tzOffset = (0, _moment2.default)().format('Z');\n\n  function getInterval(agg) {\n    var interval = _lodash2.default.get(agg, ['params', 'interval']);\n    if (interval && interval.val === 'custom') {\n      return _lodash2.default.get(agg, ['params', 'customInterval']);\n    }\n    return interval;\n  }\n\n  function setBounds(agg, force) {\n    if (agg.buckets._alreadySet && !force) return;\n    agg.buckets._alreadySet = true;\n    var timeRange = agg.getTimeRange() || timefilter.getActiveBounds();\n    agg.buckets.setBounds(agg.fieldIsTimeField() && timeRange);\n  }\n\n  return new BucketAggType({\n    name: 'date_histogram',\n    title: 'Date Histogram',\n    ordered: {\n      date: true\n    },\n    makeLabel: function makeLabel(agg) {\n      var output = this.params.write(agg);\n      var field = agg.getFieldDisplayName();\n      return field + ' per ' + (output.metricScaleText || output.bucketInterval.description);\n    },\n    createFilter: createFilter,\n    decorateAggConfig: function decorateAggConfig() {\n      var buckets = void 0;\n      var timeRange = void 0;\n      return {\n        buckets: {\n          configurable: true,\n          get: function get() {\n            if (buckets) return buckets;\n\n            buckets = new TimeBuckets();\n            buckets.setInterval(getInterval(this));\n            setBounds(this);\n\n            return buckets;\n          }\n        },\n        setTimeRange: {\n          configurable: true,\n          value: function value(newValue) {\n            timeRange = newValue;\n            setBounds(this, true);\n          }\n        },\n        getTimeRange: {\n          configurable: true,\n          value: function value() {\n            return timeRange;\n          }\n        }\n      };\n    },\n    getFormat: function getFormat(agg) {\n      return agg.buckets.getScaledDateFormatter();\n    },\n    params: [{\n      name: 'field',\n      filterFieldTypes: 'date',\n      default: function _default(agg) {\n        return agg.vis.indexPattern.timeFieldName;\n      },\n      onChange: function onChange(agg) {\n        if (_lodash2.default.get(agg, 'params.interval.val') === 'auto' && !agg.fieldIsTimeField()) {\n          delete agg.params.interval;\n        }\n\n        setBounds(agg, true);\n      }\n    }, {\n      name: 'interval',\n      type: 'optioned',\n      deserialize: function deserialize(state) {\n        var interval = _lodash2.default.find(intervalOptions, { val: state });\n        return interval || _lodash2.default.find(intervalOptions, function (option) {\n          // For upgrading from 4.0.x to 4.1.x - intervals are now stored as 'y' instead of 'year',\n          // but this maps the old values to the new values\n          return Number(_moment2.default.duration(1, state)) === Number(_moment2.default.duration(1, option.val));\n        });\n      },\n      default: 'auto',\n      options: intervalOptions,\n      editor: _time_interval2.default,\n      modifyAggConfigOnSearchRequestStart: function modifyAggConfigOnSearchRequestStart(agg) {\n        setBounds(agg, true);\n      },\n      write: function write(agg, output) {\n        setBounds(agg);\n        agg.buckets.setInterval(getInterval(agg));\n\n        var interval = agg.buckets.getInterval();\n        output.bucketInterval = interval;\n        output.params.interval = interval.expression;\n\n        var isDefaultTimezone = config.isDefault('dateFormat:tz');\n        if (isDefaultTimezone) {\n          output.params.time_zone = detectedTimezone || tzOffset;\n        } else {\n          output.params.time_zone = config.get('dateFormat:tz');\n        }\n\n        var scaleMetrics = interval.scaled && interval.scale < 1;\n        if (scaleMetrics) {\n          var all = _lodash2.default.every(agg.vis.getAggConfig().bySchemaGroup.metrics, function (agg) {\n            return agg.type && agg.type.isScalable();\n          });\n          if (all) {\n            output.metricScale = interval.scale;\n            output.metricScaleText = interval.preScaled.description;\n          }\n        }\n      }\n    }, {\n      name: 'customInterval',\n      default: '2h',\n      write: _lodash2.default.noop\n    }, {\n      name: 'format'\n    }, {\n      name: 'min_doc_count',\n      default: 1\n    }, {\n      name: 'extended_bounds',\n      default: {},\n      write: function write(agg, output) {\n        var val = agg.params.extended_bounds;\n\n        if (val.min != null || val.max != null) {\n          output.params.extended_bounds = {\n            min: (0, _moment2.default)(val.min).valueOf(),\n            max: (0, _moment2.default)(val.max).valueOf()\n          };\n\n          return;\n        }\n      }\n    }]\n  });\n}",null]}