{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/vislib/lib/axis/axis.js","mtime":1515552039000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.VislibLibAxisProvider = VislibLibAxisProvider;\n\nvar _d = require('d3');\n\nvar _d2 = _interopRequireDefault(_d);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _error_handler = require('../_error_handler');\n\nvar _axis_title = require('./axis_title');\n\nvar _axis_labels = require('./axis_labels');\n\nvar _axis_scale = require('./axis_scale');\n\nvar _axis_config = require('./axis_config');\n\nvar _errors = require('ui/errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction VislibLibAxisProvider(Private) {\n  var ErrorHandler = Private(_error_handler.VislibLibErrorHandlerProvider);\n  var AxisTitle = Private(_axis_title.VislibLibAxisTitleProvider);\n  var AxisLabels = Private(_axis_labels.VislibAxisLabelsProvider);\n  var AxisScale = Private(_axis_scale.VislibAxisScaleProvider);\n  var AxisConfig = Private(_axis_config.VislibLibAxisConfigProvider);\n\n  var Axis = function (_ErrorHandler) {\n    _inherits(Axis, _ErrorHandler);\n\n    function Axis(visConfig, axisConfigArgs) {\n      _classCallCheck(this, Axis);\n\n      var _this = _possibleConstructorReturn(this, (Axis.__proto__ || Object.getPrototypeOf(Axis)).call(this));\n\n      _this.visConfig = visConfig;\n\n      _this.axisConfig = new AxisConfig(_this.visConfig, axisConfigArgs);\n      if (_this.axisConfig.get('type') === 'category') {\n        _this.values = _this.axisConfig.values;\n        _this.ordered = _this.axisConfig.ordered;\n      }\n      _this.axisScale = new AxisScale(_this.axisConfig, visConfig);\n      _this.axisTitle = new AxisTitle(_this.axisConfig);\n      _this.axisLabels = new AxisLabels(_this.axisConfig, _this.axisScale);\n\n      _this.stack = _d2.default.layout.stack().x(function (d) {\n        return d.x;\n      }).y(function (d) {\n        if (_this.axisConfig.get('scale.offset') === 'expand') {\n          return Math.abs(d.y);\n        }\n        return d.y;\n      }).offset(_this.axisConfig.get('scale.offset', 'zero'));\n\n      var stackedMode = ['normal', 'grouped'].includes(_this.axisConfig.get('scale.mode'));\n      if (stackedMode) {\n        _this.stack = _this._stackNegAndPosVals;\n      }\n      return _this;\n    }\n\n    _createClass(Axis, [{\n      key: '_stackNegAndPosVals',\n      value: function _stackNegAndPosVals(data) {\n        var cache = {};\n        data.forEach(function (series) {\n          series.forEach(function (value) {\n            if (!cache[value.x]) cache[value.x] = [0, 0];\n            value.y0 = cache[value.x][value.y < 0 ? 0 : 1];\n            cache[value.x][value.y < 0 ? 0 : 1] += value.y;\n          });\n        });\n        return data;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var elSelector = this.axisConfig.get('elSelector');\n        var rootEl = this.axisConfig.get('rootEl');\n        _d2.default.select(rootEl).selectAll(elSelector).call(this.draw());\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var elSelector = this.axisConfig.get('elSelector');\n        var rootEl = this.axisConfig.get('rootEl');\n        (0, _jquery2.default)(rootEl).find(elSelector).find('svg').remove();\n        this.axisTitle.destroy();\n      }\n    }, {\n      key: 'getAxis',\n      value: function getAxis(length) {\n        var scale = this.axisScale.getScale(length);\n        var position = this.axisConfig.get('position');\n        var axisFormatter = this.axisConfig.get('labels.axisFormatter');\n\n        return _d2.default.svg.axis().scale(scale).tickFormat(axisFormatter).ticks(this.tickScale(length)).orient(position);\n      }\n    }, {\n      key: 'getScale',\n      value: function getScale() {\n        return this.axisScale.scale;\n      }\n    }, {\n      key: 'addInterval',\n      value: function addInterval(interval) {\n        return this.axisScale.addInterval(interval);\n      }\n    }, {\n      key: 'substractInterval',\n      value: function substractInterval(interval) {\n        return this.axisScale.substractInterval(interval);\n      }\n    }, {\n      key: 'tickScale',\n      value: function tickScale(length) {\n        var yTickScale = _d2.default.scale.linear().clamp(true).domain([20, 40, 1000]).range([0, 3, 11]);\n\n        return Math.ceil(yTickScale(length));\n      }\n    }, {\n      key: 'getLength',\n      value: function getLength(el) {\n        if (this.axisConfig.isHorizontal()) {\n          return (0, _jquery2.default)(el).width();\n        } else {\n          return (0, _jquery2.default)(el).height();\n        }\n      }\n    }, {\n      key: 'adjustSize',\n      value: function adjustSize() {\n        var config = this.axisConfig;\n        var style = config.get('style');\n        var chartEl = this.visConfig.get('el');\n        var position = config.get('position');\n        var axisPadding = 5;\n\n        return function (selection) {\n          var text = selection.selectAll('.tick text');\n          var lengths = [];\n\n          text.each(function textWidths() {\n            var _this2 = this;\n\n            lengths.push(function () {\n              if (config.isHorizontal()) {\n                return _d2.default.select(_this2.parentNode).node().getBBox().height;\n              } else {\n                return _d2.default.select(_this2.parentNode).node().getBBox().width;\n              }\n            }());\n          });\n          var length = lengths.length > 0 ? _lodash2.default.max(lengths) : 0;\n          length += axisPadding;\n\n          if (config.isHorizontal()) {\n            selection.attr('height', Math.ceil(length));\n            if (position === 'top') {\n              selection.select('g').attr('transform', 'translate(0, ' + (length - parseInt(style.lineWidth)) + ')');\n              selection.select('path').attr('transform', 'translate(1,0)');\n            }\n            if (config.get('type') === 'value') {\n              var spacerNodes = (0, _jquery2.default)(chartEl).find('.y-axis-spacer-block-' + position);\n              var elHeight = (0, _jquery2.default)(chartEl).find('.axis-wrapper-' + position).height();\n              spacerNodes.height(elHeight);\n            }\n          } else {\n            var axisWidth = Math.ceil(length);\n            selection.attr('width', axisWidth);\n            if (position === 'left') {\n              selection.select('g').attr('transform', 'translate(' + axisWidth + ',0)');\n            }\n          }\n        };\n      }\n    }, {\n      key: 'validate',\n      value: function validate() {\n        if (this.axisConfig.isLogScale() && this.axisConfig.isPercentage()) {\n          throw new _errors.VislibError('Can\\'t mix percentage mode with log scale.');\n        }\n      }\n    }, {\n      key: 'draw',\n      value: function draw() {\n        var svgs = [];\n        var self = this;\n        var config = this.axisConfig;\n        var style = config.get('style');\n\n        return function (selection) {\n          var n = selection[0].length;\n          if (config.get('show') && self.axisTitle && ['left', 'top'].includes(config.get('position'))) {\n            self.axisTitle.render(selection);\n          }\n          selection.each(function () {\n            var el = this;\n            var div = _d2.default.select(el);\n            var width = (0, _jquery2.default)(el).width();\n            var height = (0, _jquery2.default)(el).height();\n            var length = self.getLength(el, n);\n\n            self.validate();\n\n            var axis = self.getAxis(length);\n\n            if (config.get('show')) {\n              var svg = div.append('svg').attr('width', width).attr('height', height);\n\n              svgs.push(svg);\n\n              var axisClass = self.axisConfig.isHorizontal() ? 'x' : 'y';\n              svg.append('g').attr('class', axisClass + ' axis ' + config.get('id')).call(axis);\n\n              var container = svg.select('g.axis').node();\n              if (container) {\n                svg.select('path').style('stroke', style.color).style('stroke-width', style.lineWidth).style('stroke-opacity', style.opacity);\n                svg.selectAll('line').style('stroke', style.tickColor).style('stroke-width', style.tickWidth).style('stroke-opacity', style.opacity);\n              }\n              if (self.axisLabels) self.axisLabels.render(svg);\n            }\n          });\n\n          if (self.axisTitle && ['right', 'bottom'].includes(config.get('position'))) {\n            self.axisTitle.render(selection);\n          }\n\n          svgs.forEach(function (svg) {\n            return svg.call(self.adjustSize());\n          });\n        };\n      }\n    }]);\n\n    return Axis;\n  }(ErrorHandler);\n\n  return Axis;\n}",null]}