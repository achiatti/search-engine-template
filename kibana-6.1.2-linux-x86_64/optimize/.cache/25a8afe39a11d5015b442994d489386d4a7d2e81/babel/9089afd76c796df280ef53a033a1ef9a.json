{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/shaded_circles.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/tile_map/public/markers/shaded_circles.js","mtime":1515552031000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShadedCirclesMarkers = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _leaflet = require('leaflet');\n\nvar _leaflet2 = _interopRequireDefault(_leaflet);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _scaled_circles = require('./scaled_circles');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ShadedCirclesMarkers = exports.ShadedCirclesMarkers = function (_ScaledCirclesMarkers) {\n  _inherits(ShadedCirclesMarkers, _ScaledCirclesMarkers);\n\n  function ShadedCirclesMarkers() {\n    _classCallCheck(this, ShadedCirclesMarkers);\n\n    return _possibleConstructorReturn(this, (ShadedCirclesMarkers.__proto__ || Object.getPrototypeOf(ShadedCirclesMarkers)).apply(this, arguments));\n  }\n\n  _createClass(ShadedCirclesMarkers, [{\n    key: 'getMarkerFunction',\n    value: function getMarkerFunction() {\n      var _this2 = this;\n\n      // multiplier to reduce size of all circles\n      var scaleFactor = 0.8;\n      return function (feature, latlng) {\n        var radius = _this2._geohashMinDistance(feature) * scaleFactor;\n        return _leaflet2.default.circle(latlng, radius);\n      };\n    }\n\n    /**\n     * _geohashMinDistance returns a min distance in meters for sizing\n     * circle markers to fit within geohash grid rectangle\n     *\n     * @method _geohashMinDistance\n     * @param feature {Object}\n     * @return {Number}\n     */\n\n  }, {\n    key: '_geohashMinDistance',\n    value: function _geohashMinDistance(feature) {\n      var centerPoint = _lodash2.default.get(feature, 'properties.center');\n      var geohashRect = _lodash2.default.get(feature, 'properties.rectangle');\n\n      // centerPoint is an array of [lat, lng]\n      // geohashRect is the 4 corners of the geoHash rectangle\n      //   an array that starts at the southwest corner and proceeds\n      //   clockwise, each value being an array of [lat, lng]\n\n      // center lat and southeast lng\n      var east = _leaflet2.default.latLng([centerPoint[0], geohashRect[2][1]]);\n      // southwest lat and center lng\n      var north = _leaflet2.default.latLng([geohashRect[3][0], centerPoint[1]]);\n\n      // get latLng of geohash center point\n      var center = _leaflet2.default.latLng([centerPoint[0], centerPoint[1]]);\n\n      // get smallest radius at center of geohash grid rectangle\n      var eastRadius = Math.floor(center.distanceTo(east));\n      var northRadius = Math.floor(center.distanceTo(north));\n      return _lodash2.default.min([eastRadius, northRadius]);\n    }\n  }]);\n\n  return ShadedCirclesMarkers;\n}(_scaled_circles.ScaledCirclesMarkers);",null]}