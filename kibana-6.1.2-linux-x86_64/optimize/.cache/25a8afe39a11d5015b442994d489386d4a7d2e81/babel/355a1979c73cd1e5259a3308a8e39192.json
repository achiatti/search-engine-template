{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/geo_json/rows_to_features.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/agg_response/geo_json/rows_to_features.js","mtime":1515552033000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertRowsToFeatures = convertRowsToFeatures;\n\nvar _decode_geo_hash = require('ui/utils/decode_geo_hash');\n\nvar _agg_config_result = require('ui/vis/agg_config_result');\n\nvar _agg_config_result2 = _interopRequireDefault(_agg_config_result);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getAcr(val) {\n  return val instanceof _agg_config_result2.default ? val : null;\n}\n\nfunction unwrap(val) {\n  return getAcr(val) ? val.value : val;\n}\n\nfunction clampGrid(val, min, max) {\n  if (val > max) val = max;else if (val < min) val = min;\n  return val;\n}\n\nfunction convertRowsToFeatures(table, geoI, metricI, centroidI) {\n\n  return _lodash2.default.transform(table.rows, function (features, row) {\n    var geohash = unwrap(row[geoI]);\n    if (!geohash) return;\n\n    // fetch latLn of northwest and southeast corners, and center point\n    var location = (0, _decode_geo_hash.decodeGeoHash)(geohash);\n\n    var centerLatLng = [location.latitude[2], location.longitude[2]];\n\n    //courtsey of @JacobBrandt: https://github.com/elastic/kibana/pull/9676/files#diff-c7c9f237e673ff486654f6cc6caa89f6\n    var point = centerLatLng;\n    var centroid = unwrap(row[centroidI]);\n    if (centroid) {\n      // see https://github.com/elastic/elasticsearch/issues/24694 for why clampGrid is used\n      point = [clampGrid(centroid.lat, location.latitude[0], location.latitude[1]), clampGrid(centroid.lon, location.longitude[0], location.longitude[1])];\n    }\n\n    // order is nw, ne, se, sw\n    var rectangle = [[location.latitude[0], location.longitude[0]], [location.latitude[0], location.longitude[1]], [location.latitude[1], location.longitude[1]], [location.latitude[1], location.longitude[0]]];\n\n    // geoJson coords use LngLat, so we reverse the centerLatLng\n    // See here for details: http://geojson.org/geojson-spec.html#positions\n    features.push({\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: point.slice(0).reverse()\n      },\n      properties: {\n        geohash: geohash,\n        value: unwrap(row[metricI]),\n        aggConfigResult: getAcr(row[metricI]),\n        center: centerLatLng,\n        rectangle: rectangle\n      }\n    });\n  }, []);\n}",null]}