{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/config/_delayed_updater.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/config/_delayed_updater.js","mtime":1515552034000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.ConfigDelayedUpdaterProvider = ConfigDelayedUpdaterProvider;\nfunction ConfigDelayedUpdaterProvider($http, chrome, Promise) {\n  var unsavedChanges = {};\n  var unresolvedPromises = [];\n  var saveTimeout = null;\n\n  return function delayedUpdate(key, value) {\n    unsavedChanges[key] = value;\n\n    return new Promise(saveSoon).then(function (res) {\n      return res.data.settings;\n    });\n  };\n\n  function saveSoon(resolve, reject) {\n    if (saveTimeout) {\n      clearTimeout(saveTimeout);\n    }\n\n    saveTimeout = setTimeout(fire, 200);\n    unresolvedPromises.push({ resolve: resolve, reject: reject });\n  }\n\n  function fire() {\n    var changes = unsavedChanges;\n    var promises = unresolvedPromises;\n\n    unresolvedPromises = [];\n    unsavedChanges = {};\n\n    persist(changes).then(function (result) {\n      return settle(promises, 'resolve', result);\n    }).catch(function (reason) {\n      return settle(promises, 'reject', reason);\n    });\n  }\n\n  function settle(listeners, decision, data) {\n    listeners.forEach(function (listener) {\n      return listener[decision](data);\n    });\n  }\n\n  function persist(changes) {\n    var keys = Object.keys(changes);\n    if (keys.length === 1) {\n      var _keys = _slicedToArray(keys, 1),\n          key = _keys[0];\n\n      var value = changes[key];\n      var update = value === null ? remove : edit;\n      return update(key, value);\n    }\n    return editMany(changes);\n  }\n\n  function remove(key) {\n    return sync('delete', { postfix: '/' + key });\n  }\n\n  function edit(key, value) {\n    return sync('post', { postfix: '/' + key, data: { value: value } });\n  }\n\n  function editMany(changes) {\n    return sync('post', { data: { changes: changes } });\n  }\n\n  function sync(method) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$postfix = _ref.postfix,\n        postfix = _ref$postfix === undefined ? '' : _ref$postfix,\n        data = _ref.data;\n\n    return $http({\n      method: method,\n      url: chrome.addBasePath('/api/kibana/settings' + postfix),\n      data: data\n    });\n  }\n}",null]}