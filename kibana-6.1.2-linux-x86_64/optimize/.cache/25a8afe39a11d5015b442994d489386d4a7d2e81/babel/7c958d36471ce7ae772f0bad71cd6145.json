{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/components/field_chooser/field_chooser.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/kibana/public/discover/components/field_chooser/field_chooser.js","mtime":1515552028000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nrequire('ui/directives/css_truncate');\n\nrequire('ui/directives/field_name');\n\nrequire('ui/filters/unique');\n\nrequire('plugins/kibana/discover/components/field_chooser/discover_field');\n\nrequire('angular-ui-select');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _risonNode = require('rison-node');\n\nvar _risonNode2 = _interopRequireDefault(_risonNode);\n\nvar _field_calculator = require('plugins/kibana/discover/components/field_chooser/lib/field_calculator');\n\nvar _field_list = require('ui/index_patterns/_field_list');\n\nvar _modules = require('ui/modules');\n\nvar _field_chooser = require('plugins/kibana/discover/components/field_chooser/field_chooser.html');\n\nvar _field_chooser2 = _interopRequireDefault(_field_chooser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = _modules.uiModules.get('apps/discover');\n\napp.directive('discFieldChooser', function ($location, globalState, config, $route, Private) {\n  var FieldList = Private(_field_list.IndexPatternsFieldListProvider);\n\n  return {\n    restrict: 'E',\n    scope: {\n      columns: '=',\n      hits: '=',\n      fieldCounts: '=',\n      state: '=',\n      indexPattern: '=',\n      indexPatternList: '=',\n      onAddField: '=',\n      onAddFilter: '=',\n      onRemoveField: '='\n    },\n    template: _field_chooser2.default,\n    link: function link($scope) {\n      $scope.selectedIndexPattern = $scope.indexPatternList.find(function (pattern) {\n        return pattern.id === $scope.indexPattern.id;\n      });\n      $scope.indexPatternList = _lodash2.default.sortBy($scope.indexPatternList, function (o) {\n        return o.get('title');\n      });\n      $scope.setIndexPattern = function (pattern) {\n        $scope.state.index = pattern.id;\n        $scope.state.save();\n      };\n\n      $scope.$watch('state.index', function (id, previousId) {\n        if (previousId == null || previousId === id) return;\n        $route.reload();\n      });\n\n      var filter = $scope.filter = {\n        props: ['type', 'aggregatable', 'searchable', 'missing', 'name'],\n        defaults: {\n          missing: true,\n          type: 'any'\n        },\n        boolOpts: [{ label: 'any', value: undefined }, { label: 'yes', value: true }, { label: 'no', value: false }],\n        toggleVal: function toggleVal(name, def) {\n          if (filter.vals[name] !== def) filter.vals[name] = def;else filter.vals[name] = undefined;\n        },\n        reset: function reset() {\n          filter.vals = _lodash2.default.clone(filter.defaults);\n        },\n        isFieldSelected: function isFieldSelected(field) {\n          return field.display;\n        },\n        isFieldFiltered: function isFieldFiltered(field) {\n          var matchFilter = filter.vals.type === 'any' || field.type === filter.vals.type;\n          var isAggregatable = filter.vals.aggregatable == null || field.aggregatable === filter.vals.aggregatable;\n          var isSearchable = filter.vals.searchable == null || field.searchable === filter.vals.searchable;\n          var scriptedOrMissing = !filter.vals.missing || field.scripted || field.rowCount > 0;\n          var matchName = !filter.vals.name || field.name.indexOf(filter.vals.name) !== -1;\n\n          return !field.display && matchFilter && isAggregatable && isSearchable && scriptedOrMissing && matchName;\n        },\n        popularity: function popularity(field) {\n          return field.count > 0;\n        },\n        getActive: function getActive() {\n          return _lodash2.default.some(filter.props, function (prop) {\n            return filter.vals[prop] !== filter.defaults[prop];\n          });\n        }\n      };\n\n      // set the initial values to the defaults\n      filter.reset();\n\n      $scope.$watchCollection('filter.vals', function () {\n        filter.active = filter.getActive();\n      });\n\n      $scope.$watchMulti(['[]fieldCounts', '[]columns', '[]hits'], function (cur, prev) {\n        var newHits = cur[2] !== prev[2];\n        var fields = $scope.fields;\n        var columns = $scope.columns || [];\n        var fieldCounts = $scope.fieldCounts;\n\n        if (!fields || newHits) {\n          $scope.fields = fields = getFields();\n        }\n\n        if (!fields) return;\n\n        // group the fields into popular and up-popular lists\n        _lodash2.default.chain(fields).each(function (field) {\n          field.displayOrder = _lodash2.default.indexOf(columns, field.name) + 1;\n          field.display = !!field.displayOrder;\n          field.rowCount = fieldCounts[field.name];\n        }).sortBy(function (field) {\n          return (field.count || 0) * -1;\n        }).groupBy(function (field) {\n          if (field.display) return 'selected';\n          return field.count > 0 ? 'popular' : 'unpopular';\n        }).tap(function (groups) {\n          groups.selected = _lodash2.default.sortBy(groups.selected || [], 'displayOrder');\n\n          groups.popular = groups.popular || [];\n          groups.unpopular = groups.unpopular || [];\n\n          // move excess popular fields to un-popular list\n          var extras = groups.popular.splice(config.get('fields:popularLimit'));\n          groups.unpopular = extras.concat(groups.unpopular);\n        }).each(function (group, name) {\n          $scope[name + 'Fields'] = _lodash2.default.sortBy(group, name === 'selected' ? 'display' : 'name');\n        }).commit();\n\n        // include undefined so the user can clear the filter\n        $scope.fieldTypes = _lodash2.default.union(['any'], _lodash2.default.pluck(fields, 'type'));\n      });\n\n      $scope.increaseFieldCounter = function (fieldName) {\n        $scope.indexPattern.popularizeField(fieldName, 1);\n      };\n\n      function getVisualizeUrl(field) {\n        if (!$scope.state) {\n          return '';\n        }\n\n        var agg = {};\n        var isGeoPoint = field.type === 'geo_point';\n        var type = isGeoPoint ? 'tile_map' : 'histogram';\n        // If we're visualizing a date field, and our index is time based (and thus has a time filter),\n        // then run a date histogram\n        if (field.type === 'date' && $scope.indexPattern.timeFieldName === field.name) {\n          agg = {\n            type: 'date_histogram',\n            schema: 'segment',\n            params: {\n              field: field.name,\n              interval: 'auto'\n            }\n          };\n        } else if (isGeoPoint) {\n          agg = {\n            type: 'geohash_grid',\n            schema: 'segment',\n            params: {\n              field: field.name,\n              precision: 3\n            }\n          };\n        } else {\n          agg = {\n            type: 'terms',\n            schema: 'segment',\n            params: {\n              field: field.name,\n              size: parseInt(config.get('discover:aggs:terms:size'), 10),\n              orderBy: '2'\n            }\n          };\n        }\n\n        return '#/visualize/create?' + _jquery2.default.param(_lodash2.default.assign(_lodash2.default.clone($location.search()), {\n          indexPattern: $scope.state.index,\n          type: type,\n          _a: _risonNode2.default.encode({\n            filters: $scope.state.filters || [],\n            query: $scope.state.query || undefined,\n            vis: {\n              type: type,\n              aggs: [{ schema: 'metric', type: 'count', 'id': '2' }, agg]\n            }\n          })\n        }));\n      }\n\n      $scope.computeDetails = function (field, recompute) {\n        if (_lodash2.default.isUndefined(field.details) || recompute) {\n          field.details = _extends({\n            visualizeUrl: field.visualizable ? getVisualizeUrl(field) : null\n          }, _field_calculator.fieldCalculator.getFieldValueCounts({\n            hits: $scope.hits,\n            field: field,\n            count: 5,\n            grouped: false\n          }));\n          _lodash2.default.each(field.details.buckets, function (bucket) {\n            bucket.display = field.format.convert(bucket.value);\n          });\n          $scope.increaseFieldCounter(field, 1);\n        } else {\n          delete field.details;\n        }\n      };\n\n      function getFields() {\n        var prevFields = $scope.fields;\n        var indexPattern = $scope.indexPattern;\n        var hits = $scope.hits;\n        var fieldCounts = $scope.fieldCounts;\n\n        if (!indexPattern || !hits || !fieldCounts) return;\n\n        var fieldSpecs = indexPattern.fields.slice(0);\n        var fieldNamesInDocs = _lodash2.default.keys(fieldCounts);\n        var fieldNamesInIndexPattern = _lodash2.default.keys(indexPattern.fields.byName);\n\n        _lodash2.default.difference(fieldNamesInDocs, fieldNamesInIndexPattern).forEach(function (unknownFieldName) {\n          fieldSpecs.push({\n            name: unknownFieldName,\n            type: 'unknown'\n          });\n        });\n\n        var fields = new FieldList(indexPattern, fieldSpecs);\n\n        if (prevFields) {\n          fields.forEach(function (field) {\n            field.details = _lodash2.default.get(prevFields, ['byName', field.name, 'details']);\n          });\n        }\n\n        return fields;\n      }\n    }\n  };\n});",null]}