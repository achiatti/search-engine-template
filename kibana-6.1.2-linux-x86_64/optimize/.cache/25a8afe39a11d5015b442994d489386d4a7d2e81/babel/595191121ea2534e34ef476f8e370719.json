{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis_controller.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metric_vis/public/metric_vis_controller.js","mtime":1515552029000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _modules = require('ui/modules');\n\nvar _heatmap_color = require('ui/vislib/components/color/heatmap_color');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// get the kibana/metric_vis module, and make sure that it requires the \"kibana\" module if it\n// didn't already\nvar _module = _modules.uiModules.get('kibana/metric_vis', ['kibana']);\n\n_module.controller('KbnMetricVisController', function ($scope, $element) {\n\n  var metrics = $scope.metrics = [];\n  var labels = [];\n  var colors = [];\n\n  var getLabels = function getLabels() {\n    var config = $scope.vis.params.metric;\n    var isPercentageMode = config.percentageMode;\n    var colorsRange = config.colorsRange;\n    var max = _lodash2.default.last(colorsRange).to;\n    var labels = [];\n    colorsRange.forEach(function (range) {\n      var from = isPercentageMode ? Math.round(100 * range.from / max) : range.from;\n      var to = isPercentageMode ? Math.round(100 * range.to / max) : range.to;\n      labels.push(from + ' - ' + to);\n    });\n\n    return labels;\n  };\n\n  var getColors = function getColors() {\n    var config = $scope.vis.params.metric;\n    var invertColors = config.invertColors;\n    var colorSchema = config.colorSchema;\n    var colorsRange = config.colorsRange;\n    var labels = getLabels();\n    var colors = {};\n    for (var i = 0; i < labels.length; i += 1) {\n      var divider = Math.max(colorsRange.length - 1, 1);\n      var val = invertColors ? 1 - i / divider : i / divider;\n      colors[labels[i]] = (0, _heatmap_color.getHeatmapColors)(val, colorSchema);\n    }\n    return colors;\n  };\n\n  var getBucket = function getBucket(val) {\n    var config = $scope.vis.params.metric;\n    var bucket = _lodash2.default.findIndex(config.colorsRange, function (range) {\n      return range.from <= val && range.to > val;\n    });\n\n    if (bucket === -1) {\n      if (val < config.colorsRange[0].from) bucket = 0;else bucket = config.colorsRange.length - 1;\n    }\n\n    return bucket;\n  };\n\n  var getColor = function getColor(val) {\n    var bucket = getBucket(val);\n    var label = labels[bucket];\n    return colors[label];\n  };\n\n  $scope.processTableGroups = function (tableGroups) {\n    var config = $scope.vis.params.metric;\n    var isPercentageMode = config.percentageMode;\n    var min = config.colorsRange[0].from;\n    var max = _lodash2.default.last(config.colorsRange).to;\n\n    tableGroups.tables.forEach(function (table) {\n      var bucketAgg = void 0;\n\n      table.columns.forEach(function (column, i) {\n        var aggConfig = column.aggConfig;\n\n        if (aggConfig && aggConfig.schema.group === 'buckets') {\n          bucketAgg = aggConfig;\n          return;\n        }\n\n        table.rows.forEach(function (row) {\n\n          var title = column.title;\n          var value = row[i];\n          var color = getColor(value);\n\n          if (isPercentageMode) {\n            var percentage = Math.round(100 * (value - min) / (max - min));\n            value = percentage + '%';\n          }\n\n          if (aggConfig) {\n            if (!isPercentageMode) value = aggConfig.fieldFormatter('html')(value);\n            if (bucketAgg) {\n              var bucketValue = bucketAgg.fieldFormatter('text')(row[0]);\n              title = bucketValue + ' - ' + aggConfig.makeLabel();\n            } else {\n              title = aggConfig.makeLabel();\n            }\n          }\n\n          var shouldColor = config.colorsRange.length > 1;\n\n          metrics.push({\n            label: title,\n            value: value,\n            color: shouldColor && config.style.labelColor ? color : null,\n            bgColor: shouldColor && config.style.bgColor ? color : null\n          });\n        });\n      });\n    });\n  };\n\n  $scope.$watch('esResponse', function (resp) {\n    if (resp) {\n      metrics.length = 0;\n      labels.length = 0;\n      colors.length = 0;\n      colors = getColors();\n      labels = getLabels();\n      $scope.processTableGroups(resp);\n      $element.trigger('renderComplete');\n    }\n  });\n});",null]}