{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/extract_app_path_and_id.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/url/extract_app_path_and_id.js","mtime":1515552038000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractAppPathAndId = extractAppPathAndId;\n\nvar _url = require('url');\n\n/**\n * If the url is determined to contain an appId and appPath, it returns those portions. If it is not in the right\n * format and an appId and appPath can't be extracted, it returns an empty object.\n * @param {string} url - a relative or absolute url which contains an appPath, an appId, and optionally, a basePath.\n * @param {string} basePath - optional base path, if given should start with \"/\".\n */\nfunction extractAppPathAndId(url) {\n  var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var parsedUrl = (0, _url.parse)(url);\n  if (!parsedUrl.path) {\n    return {};\n  }\n  var pathWithoutBase = parsedUrl.path.slice(basePath.length);\n\n  if (!pathWithoutBase.startsWith('/app/')) {\n    return {};\n  }\n\n  var appPath = parsedUrl.hash && parsedUrl.hash.length > 0 ? parsedUrl.hash.slice(1) : '';\n  return { appId: pathWithoutBase.slice('/app/'.length), appPath: appPath };\n}",null]}