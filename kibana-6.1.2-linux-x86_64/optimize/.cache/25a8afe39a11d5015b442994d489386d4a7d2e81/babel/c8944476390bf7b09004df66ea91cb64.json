{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/route_based_notifier/index.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/route_based_notifier/index.js","mtime":1515552037000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RouteBasedNotifierProvider = RouteBasedNotifierProvider;\n\nvar _lodash = require('lodash');\n\nvar _notifier = require('ui/notify/notifier');\n\n/*\n * Caches notification attempts so each one is only actually sent to the\n * notifier service once per route.\n */\nfunction RouteBasedNotifierProvider($rootScope) {\n  var notifier = new _notifier.Notifier();\n\n  var notifications = {\n    warnings: []\n  };\n\n  // empty the tracked notifications whenever the route changes so we can start\n  // fresh for the next route cycle\n  $rootScope.$on('$routeChangeSuccess', function () {\n    notifications = (0, _lodash.mapValues)(notifications, function () {\n      return [];\n    });\n  });\n\n  // Executes the given notify function if the message has not been seen in\n  // this route cycle\n  function executeIfNew(messages, message, notifyFn) {\n    if ((0, _lodash.includes)(messages, message)) {\n      return;\n    }\n\n    messages.push(message);\n    notifyFn.call(notifier, message);\n  }\n\n  return {\n    /**\n     * Notify a given warning once in this route cycle\n     * @param {string} message\n     */\n    warning: function warning(message) {\n      executeIfNew(notifications.warnings, message, notifier.warning);\n    }\n  };\n}",null]}