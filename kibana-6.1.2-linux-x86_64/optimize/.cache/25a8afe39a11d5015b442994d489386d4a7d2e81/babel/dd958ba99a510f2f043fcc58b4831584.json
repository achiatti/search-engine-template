{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_format_hit.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/ui/public/index_patterns/_format_hit.js","mtime":1515552036000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatHit = formatHit;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chrome = require('ui/chrome');\n\nvar _chrome2 = _interopRequireDefault(_chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Takes a hit, merges it with any stored/scripted fields, and with the metaFields\n// returns a formatted version\n\nfunction formatHit(indexPattern, defaultFormat) {\n\n  function convert(hit, val, fieldName) {\n    var field = indexPattern.fields.byName[fieldName];\n    if (!field) return defaultFormat.convert(val, 'html');\n    var parsedUrl = {\n      origin: window.location.origin,\n      pathname: window.location.pathname,\n      basePath: _chrome2.default.getBasePath()\n    };\n    return field.format.getConverterFor('html')(val, field, hit, parsedUrl);\n  }\n\n  function formatHit(hit) {\n    if (hit.$$_formatted) return hit.$$_formatted;\n\n    // use and update the partial cache, but don't rewrite it. _source is stored in partials\n    // but not $$_formatted\n    var partials = hit.$$_partialFormatted || (hit.$$_partialFormatted = {});\n    var cache = hit.$$_formatted = {};\n\n    _lodash2.default.forOwn(indexPattern.flattenHit(hit), function (val, fieldName) {\n      // sync the formatted and partial cache\n      var formatted = partials[fieldName] == null ? convert(hit, val, fieldName) : partials[fieldName];\n      cache[fieldName] = partials[fieldName] = formatted;\n    });\n\n    return cache;\n  }\n\n  formatHit.formatField = function (hit, fieldName) {\n    var partials = hit.$$_partialFormatted;\n    if (partials && partials[fieldName] != null) {\n      return partials[fieldName];\n    }\n\n    if (!partials) {\n      partials = hit.$$_partialFormatted = {};\n    }\n\n    var val = fieldName === '_source' ? hit._source : indexPattern.flattenHit(hit)[fieldName];\n    return partials[fieldName] = convert(hit, val, fieldName);\n  };\n\n  return formatHit;\n}",null]}