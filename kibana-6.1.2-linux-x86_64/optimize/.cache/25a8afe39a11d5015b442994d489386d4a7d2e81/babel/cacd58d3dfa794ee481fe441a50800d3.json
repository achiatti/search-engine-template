{"remainingRequest":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js??ref--6-1!/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/kbn_vis_types/request_handler.js","dependencies":[{"path":"/home/vagrant/projects/kibana/build/kibana/src/core_plugins/metrics/public/kbn_vis_types/request_handler.js","mtime":1515552030000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/cache-loader/dist/cjs.js","mtime":1493198456000},{"path":"/home/vagrant/projects/kibana/build/kibana/node_modules/babel-loader/lib/index.js","mtime":1503096278000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MetricsRequestHandlerProvider = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _validate_interval = require('../lib/validate_interval');\n\nvar _dashboard_context = require('plugins/kibana/dashboard/dashboard_context');\n\nvar _timezone = require('ui/vis/lib/timezone');\n\nvar MetricsRequestHandlerProvider = function MetricsRequestHandlerProvider(Private, Notifier, config, timefilter, $http) {\n  var dashboardContext = Private(_dashboard_context.dashboardContextProvider);\n  var notify = new Notifier({ location: 'Metrics' });\n\n  return {\n    name: 'metrics',\n    handler: function handler(vis, appState, uiState) {\n      var timezone = Private(_timezone.timezoneProvider)();\n      return new Promise(function (resolve) {\n        var panel = vis.params;\n        var uiStateObj = uiState.get(panel.type, {});\n        var timeRange = vis.params.timeRange || timefilter.getBounds();\n        if (panel && panel.id) {\n          var params = {\n            timerange: _extends({ timezone: timezone }, timeRange),\n            filters: [dashboardContext()],\n            panels: [panel],\n            state: uiStateObj\n          };\n\n          try {\n            var maxBuckets = config.get('metrics:max_buckets');\n            (0, _validate_interval.validateInterval)(timeRange, panel, maxBuckets);\n            var httpResult = $http.post('../api/metrics/vis/data', params).then(function (resp) {\n              return resp.data;\n            }).catch(function (resp) {\n              throw resp.data;\n            });\n\n            return httpResult.then(resolve).catch(function (resp) {\n              resolve({});\n              var err = new Error(resp.message);\n              err.stack = resp.stack;\n              notify.error(err);\n            });\n          } catch (e) {\n            notify.error(e);\n            return resolve();\n          }\n        }\n      });\n    }\n  };\n};\n\nexports.MetricsRequestHandlerProvider = MetricsRequestHandlerProvider;",null]}